<?php

#line 11 "resource/ASPPisParser.y"
 /* this will be copied blindly */
namespace aSPPis\lib;
use \stdClass;
use \Exception;
class NTToken {
    /* arrays, the array will be considered as sets, as only a few situations need an actual check for duplicates. 
     * This is achieved in PHP with using the value as key and a uniformed value for all keys. 
     * Example: ?text will be saved in the array as array['?text'] = 1, that way if we merge it with another array through the union operator (+)
     * we will get a resultarray with only 1 key called ?text instead of 2 arbitrary keys with both having ?text as value.
     * Furthermore this allows for a quick isset check for searching duplicates
     */
    public $vars = array();
    /* need to somehow check Scoping for (only?) vars noted with AS, for subselects, only the selectclause AS vars are important except, 
     * if the subselect uses Select * -> then all AS vars are important and will be carried over
     */
    public $ssVars = array();
    /* ssVars in nested groupGraphPatter's do not interfere
     * for example is (from w3c test set - syntax-SELECTscope3.rq):
     *  SELECT *
     *  WHERE {
     *    {SELECT (1 AS ?X ) {}
     *    }
     *    {SELECT (1 AS ?X ) {}
     *    }
     *  }
     * a valid query, as both AS ?X calls are in different (non overlapping) ggp's, only used in ggp's (everything that contains them and can be turned into them again)
     */
    public $gGPssVars = array();
    public $bNodes = array();
    /* needs to be an array, because multiple binds can be reduced and be checked against one triplegroup preceding all binds */
    public $bindVar = array();
    /* non-arrays */
    public $query = null;
    public $counter = 0;
    //NTToken Type to differentiate different Tokens in the Syntax Tree, starts at 500 (TTokens use 1-164 right now, up to 500 is just a buffer)
    public $type = -1;
    //Childs of the NTToken to create the parse tree
    public $childs = array();
    /* booleans */
    public $hasSS = false;
    public $hasBN = false;
    public $hasFNC = false;
    public $hasAGG = false;
    public $hasStar = false;

  /* to reduce the amount of isset calls the 'usual' smaller set should be set 1, returns null if NO duplicates are found
   * might be useful to return the duplicate for the error message tho (TODO)
   * array_intersect_key could be faster 
   */
  function noDuplicates($set1, $set2) {
		$noDuplicate = null;
        if ($set1 == null || $set2 == null) {
            return $noDuplicate;
        } else {
            foreach (array_keys($set1) as $key) {
                if (isset($set2[$key])) {
                    $noDuplicate = $key;
                    break;
                }
    	      }
        }
        return $noDuplicate;
	}

	function copyBools($tmpToken) {
		if ($this->hasBN == false) {
			  $this->hasBN = $tmpToken->hasBN;
		}
		if ($this->hasFNC == false) {
			  $this->hasFNC = $tmpToken->hasFNC;
		}
		if ($this->hasAGG == false) {
			  $this->hasAGG = $tmpToken->hasAGG;
		}
    if ($this->hasSS == false) {
        $this->hasSS == $tmpToken->hasSS;
    }
	}
}  
#line 84 "resource/ASPPisParser.php"

class ASPPisParser {
  private $yyidx = -1;               /* Index of top element in stack */
  private $yyerrcnt;                 /* Shifts left before out of the error */
  private $yystack = array();
  private $yyTraceFILE = null;
  private $yyTracePrompt = null;

#line 92 "resource/ASPPisParser.y"

/* putting the ns and base information in the parser class and adding access to the SparqlPHPParserMain.php, removes the necessity to use 
 * global variables/add another parameter to the parse function.
 */
public $main;
public $base = null;
public $allNS = array();

function __construct ($parent) {
    $this->main = $parent;
}

function addNS($alias, $iri) {
    $this->allNS[$alias] = $iri;
}

function checkNS($alias) {
    if ($alias == null) {
        return false;
    }
    //alias contains the part after the : as well, so it needs to be stripped, first locate the position
    $pos = strpos($alias, ':');
    if($pos !== false) {
        //keep : as an empty prefix is allowed
        $strippedAlias = substr($alias, 0, $pos + 1);
        if (isset($this->allNS[$strippedAlias])) {
            return true;
        }
    }
    return false;
}

//removed the base check, its actually not necessary/queries its allowed to have <x> as iri...
//actual iri reference transformation is rather complex ( http://www.ietf.org/rfc/rfc3986.txt )
//unsure if that is necessary for this project though
function checkBase($alias) {
    if (strcmp(substr($alias,1,7),'http://') == 0 || strcmp(substr($alias,1,8),'https://') == 0) {
        return true;
    } else {
        if(isset($this->base)) {
            return true;
        } else {
            return false;
        }
    }
}
#line 140 "resource/ASPPisParser.php"

  const TK_PRAGMA =  1;
  const TK_BASE =  2;
  const TK_IRIREF =  3;
  const TK_DOT =  4;
  const TK_PREFIX =  5;
  const TK_PNAME_NS =  6;
  const TK_SELECT =  7;
  const TK_DISTINCT =  8;
  const TK_REDUCED =  9;
  const TK_STAR = 10;
  const TK_LPARENTHESE = 11;
  const TK_AS = 12;
  const TK_RPARENTHESE = 13;
  const TK_CONSTRUCT = 14;
  const TK_LBRACE = 15;
  const TK_RBRACE = 16;
  const TK_WHERE = 17;
  const TK_DESCRIBE = 18;
  const TK_ASK = 19;
  const TK_FROM = 20;
  const TK_NAMED = 21;
  const TK_GROUP = 22;
  const TK_BY = 23;
  const TK_HAVING = 24;
  const TK_ORDER = 25;
  const TK_ASC = 26;
  const TK_DESC = 27;
  const TK_LIMIT = 28;
  const TK_INTEGER = 29;
  const TK_OFFSET = 30;
  const TK_VALUES = 31;
  const TK_SEMICOLON = 32;
  const TK_LOAD = 33;
  const TK_SILENT = 34;
  const TK_INTO = 35;
  const TK_CLEAR = 36;
  const TK_DROP = 37;
  const TK_CREATE = 38;
  const TK_ADD = 39;
  const TK_TO = 40;
  const TK_MOVE = 41;
  const TK_COPY = 42;
  const TK_INSERTDATA = 43;
  const TK_DELETEDATA = 44;
  const TK_DELETEWHERE = 45;
  const TK_WITH = 46;
  const TK_DELETE = 47;
  const TK_INSERT = 48;
  const TK_USING = 49;
  const TK_GRAPH = 50;
  const TK_DEFAULT = 51;
  const TK_ALL = 52;
  const TK_OPTIONAL = 53;
  const TK_SERVICE = 54;
  const TK_BIND = 55;
  const TK_NIL = 56;
  const TK_UNDEF = 57;
  const TK_SMINUS = 58;
  const TK_UNION = 59;
  const TK_FILTER = 60;
  const TK_COMMA = 61;
  const TK_A = 62;
  const TK_VBAR = 63;
  const TK_SLASH = 64;
  const TK_HAT = 65;
  const TK_PLUS = 66;
  const TK_QUESTION = 67;
  const TK_EXCLAMATION = 68;
  const TK_LBRACKET = 69;
  const TK_RBRACKET = 70;
  const TK_VAR1 = 71;
  const TK_VAR2 = 72;
  const TK_OR = 73;
  const TK_AND = 74;
  const TK_EQUAL = 75;
  const TK_NEQUAL = 76;
  const TK_SMALLERTHEN = 77;
  const TK_GREATERTHEN = 78;
  const TK_SMALLERTHENQ = 79;
  const TK_GREATERTHENQ = 80;
  const TK_IN = 81;
  const TK_NOT = 82;
  const TK_MINUS = 83;
  const TK_STR = 84;
  const TK_LANG = 85;
  const TK_LANGMATCHES = 86;
  const TK_DATATYPE = 87;
  const TK_BOUND = 88;
  const TK_URI = 89;
  const TK_BNODE = 90;
  const TK_RAND = 91;
  const TK_ABS = 92;
  const TK_CEIL = 93;
  const TK_FLOOR = 94;
  const TK_ROUND = 95;
  const TK_CONCAT = 96;
  const TK_STRLEN = 97;
  const TK_UCASE = 98;
  const TK_LCASE = 99;
  const TK_ENCODE_FOR_URI = 100;
  const TK_CONTAINS = 101;
  const TK_STRSTARTS = 102;
  const TK_STRENDS = 103;
  const TK_STBEFORE = 104;
  const TK_STRAFTER = 105;
  const TK_YEAR = 106;
  const TK_MONTH = 107;
  const TK_DAY = 108;
  const TK_HOURS = 109;
  const TK_MINUTES = 110;
  const TK_SECONDS = 111;
  const TK_TIMEZONE = 112;
  const TK_TZ = 113;
  const TK_NOW = 114;
  const TK_UUID = 115;
  const TK_STRUUID = 116;
  const TK_MD5 = 117;
  const TK_SHA1 = 118;
  const TK_SHA256 = 119;
  const TK_SHA384 = 120;
  const TK_SHA512 = 121;
  const TK_COALESCE = 122;
  const TK_IF = 123;
  const TK_STRLANG = 124;
  const TK_STRDT = 125;
  const TK_SAMETERM = 126;
  const TK_ISIRI = 127;
  const TK_ISURI = 128;
  const TK_ISBLANK = 129;
  const TK_ISLITERAL = 130;
  const TK_ISNUMERIC = 131;
  const TK_REGEX = 132;
  const TK_SUBSTR = 133;
  const TK_REPLACE = 134;
  const TK_EXISTS = 135;
  const TK_COUNT = 136;
  const TK_SUM = 137;
  const TK_MIN = 138;
  const TK_MAX = 139;
  const TK_AVG = 140;
  const TK_SAMPLE = 141;
  const TK_GROUP_CONCAT = 142;
  const TK_SEPARATOR = 143;
  const TK_LANGTAG = 144;
  const TK_DHAT = 145;
  const TK_DECIMAL = 146;
  const TK_DOUBLE = 147;
  const TK_INTEGER_POSITIVE = 148;
  const TK_DECIMAL_POSITIVE = 149;
  const TK_DOUBLE_POSITIVE = 150;
  const TK_INTEGER_NEGATIVE = 151;
  const TK_DECIMAL_NEGATIVE = 152;
  const TK_DOUBLE_NEGATIVE = 153;
  const TK_TRUE = 154;
  const TK_FALSE = 155;
  const TK_STRING_LITERAL1 = 156;
  const TK_STRING_LITERAL2 = 157;
  const TK_STRING_LITERAL_LONG1 = 158;
  const TK_STRING_LITERAL_LONG2 = 159;
  const TK_PNAME_LN = 160;
  const TK_BLANK_NODE_LABEL = 161;
  const TK_ANON = 162;

  const YYNOCODE = 314;
  const YYNSTATE = 1043;
  const YYNRULE = 565;

  private $YY_NO_ACTION;
  private $YY_ACCEPT_ACTION;
  private $YY_ERROR_ACTION;

  /* action tables */ 

static $yy_action = array(
 /*     0 */   619,  591,  223,  622,  588,    4,  115,  548,   14,  254,
 /*    10 */   665,  619,  835,  269,  622,  326,  327,  216,  231,  162,
 /*    20 */   964,  836,  227,  257,  937,  346,  626,  255,  748,  326,
 /*    30 */   327,  588,  263,  326,  327,  259,  260,  315,  234,  673,
 /*    40 */   235,  236,  355,  358,  359,  273,  367,  364,  637,  638,
 /*    50 */   639,  640,  684,  679,  681,  682,  683,  680,  272,  998,
 /*    60 */   539,  293,  191,  119,  938,  118,  180,  126,  649,  650,
 /*    70 */   881,  882,  883,  884,  885,  886,  887,  888,  788,  522,
 /*    80 */   120,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*    90 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*   100 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*   110 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*   120 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*   130 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*   140 */   620,  987,  991,  627,  628,  629,  630,  631,  632,  633,
 /*   150 */   634,  635,  636,  637,  638,  639,  640,  621,  619,  591,
 /*   160 */   542,  622,  588,   12,  648,  914,   14,  624,  621,  625,
 /*   170 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*   180 */   620,  987,  993,  346,  626,  361,    1,  128,  333,  585,
 /*   190 */   263,  262,  262,  259,  260,  315,  234,  844,  235,  236,
 /*   200 */   355,  358,  359,  273,  367,  364,  258,  309,  407,  310,
 /*   210 */   406,  684,  679,  681,  682,  683,  680,  266,  169,  408,
 /*   220 */   293,  119,  407,  118,  406,  125,  649,  650,  881,  882,
 /*   230 */   883,  884,  885,  886,  887,  888,  854,  522,  120,  413,
 /*   240 */   414,  416,  419,  421,  423,  385,  426,  427,  429,  431,
 /*   250 */   433,  298,  435,  437,  439,  441,  443,  446,  449,  452,
 /*   260 */   455,  458,  460,  462,  464,  466,  468,  470,  472,  474,
 /*   270 */   475,  476,  477,  479,  481,  483,  485,  300,  487,  491,
 /*   280 */   494,  497,  500,  502,  504,  506,  508,  510,  513,  516,
 /*   290 */   330,  523,  526,  528,  530,  532,  534,  536,  279,  317,
 /*   300 */  1023,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*   310 */   636,  637,  638,  639,  640,  621,  619,  408,  619,  622,
 /*   320 */   407,  622,  406,  524,   14,  651,  624,  989,  625,  675,
 /*   330 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*   340 */   264,  971,  626,  972,  973,  974,  975,  976,  977,  978,
 /*   350 */   979,  980,  981,  982,  654,  620,  271,  988,  990,  253,
 /*   360 */   282,   99,  100,  101,  102,  103,  104,  311,  576,  684,
 /*   370 */   679,  681,  682,  683,  680,  987,  986,  834,  293,  119,
 /*   380 */   295,  118,  308,  379,  649,  650,  649,  650,  619,  987,
 /*   390 */   992,  622,  289,  857,  655,  522,  120,  413,  414,  416,
 /*   400 */   419,  421,  423,  385,  426,  427,  429,  431,  433,  298,
 /*   410 */   435,  437,  439,  441,  443,  446,  449,  452,  455,  458,
 /*   420 */   460,  462,  464,  466,  468,  470,  472,  474,  475,  476,
 /*   430 */   477,  479,  481,  483,  485,  300,  487,  491,  494,  497,
 /*   440 */   500,  502,  504,  506,  508,  510,  513,  516,  330,  523,
 /*   450 */   526,  528,  530,  532,  534,  536,  649,  650,  381,  627,
 /*   460 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*   470 */   638,  639,  640,  621,  619,  621,    1,  622,  333,   80,
 /*   480 */   851,  861,   14,  350,  624,  969,  625,  677,  690,  685,
 /*   490 */   686,  687,  688,  704,  706,  380,  623,  620,  189, 1037,
 /*   500 */   626,  972,  973,  974,  975,  976,  977,  978,  979,  980,
 /*   510 */   981,  982,  620,  520,  788,  169,  408,  253,  282,  407,
 /*   520 */   619,  406,  224,  622,  684,  679,  681,  682,  683,  680,
 /*   530 */   283,  967,  520,  293,  169,  408,  940,  119,  407,  118,
 /*   540 */   406,  382,  649,  650,  660,  621,  281,  320, 1023,  326,
 /*   550 */   327,  270,  668,  522,  120,  413,  414,  416,  419,  421,
 /*   560 */   423,  385,  426,  427,  429,  431,  433,  298,  435,  437,
 /*   570 */   439,  441,  443,  446,  449,  452,  455,  458,  460,  462,
 /*   580 */   464,  466,  468,  470,  472,  474,  475,  476,  477,  479,
 /*   590 */   481,  483,  485,  300,  487,  491,  494,  497,  500,  502,
 /*   600 */   504,  506,  508,  510,  513,  516,  330,  523,  526,  528,
 /*   610 */   530,  532,  534,  536,  351,  403,  969,  627,  628,  629,
 /*   620 */   630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
 /*   630 */   640,  621,  619,  649,  650,  622,  607,   81,  422,  624,
 /*   640 */    14,  625,  911,  690,  685,  686,  687,  688,  704,  706,
 /*   650 */   380,  623,  620,  999,  619,  620,  263,  622,  626,  259,
 /*   660 */   260,  315,  234,  989,  235,  236,  355,  358,  359,  273,
 /*   670 */   367,  364,  248,  192,  383,  942,  265,  621,  608,  609,
 /*   680 */   384,  596,  684,  679,  681,  682,  683,  680,  386,  788,
 /*   690 */   908,  293,  271,  988,  990,  119,  835,  118,  396,  314,
 /*   700 */   649,  650,  942,  747,  833,  836,  857,  863,  326,  327,
 /*   710 */   732,  522,  120,  413,  414,  416,  419,  421,  423,  385,
 /*   720 */   426,  427,  429,  431,  433,  298,  435,  437,  439,  441,
 /*   730 */   443,  446,  449,  452,  455,  458,  460,  462,  464,  466,
 /*   740 */   468,  470,  472,  474,  475,  476,  477,  479,  481,  483,
 /*   750 */   485,  300,  487,  491,  494,  497,  500,  502,  504,  506,
 /*   760 */   508,  510,  513,  516,  330,  523,  526,  528,  530,  532,
 /*   770 */   534,  536,  620,  138,  521,  627,  628,  629,  630,  631,
 /*   780 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*   790 */   619,  848,  290,  622,  306,   82,  550,  624,   14,  625,
 /*   800 */   912,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*   810 */   620,  621,  989,  594,  619,  363,  626,  622,  183,  204,
 /*   820 */   963,  942,  835,  749,  620,  620,  620,  641,  326,  327,
 /*   830 */   344,  836,  195,  553,  938,  788,  217,  228,  256,  750,
 /*   840 */   626,  271,  988,  990,  326,  327,  364,  266,  788,  591,
 /*   850 */   367,  364,  588,  119,  835,  118,  774,  772,  649,  650,
 /*   860 */   554,  773,  833,  836,  857,  302,  316, 1023,  616,  522,
 /*   870 */   120,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*   880 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*   890 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*   900 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*   910 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*   920 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*   930 */   571,  140,  620,  627,  628,  629,  630,  631,  632,  633,
 /*   940 */   634,  635,  636,  637,  638,  639,  640,  621,  619,  275,
 /*   950 */   620,  622,  853,   83,  252,  280,   14,  627,  628,  629,
 /*   960 */   630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
 /*   970 */   640,  621,  619,  397,  626,  622,  685,  686,  687,  688,
 /*   980 */   704,  706,  620,  620,  620,  610,    1,  398,  333,  580,
 /*   990 */   371,  262,  262,  520,  405,  169,  408,  399,  626,  407,
 /*  1000 */   923,  406,  249,  196,  924,  942,  835,  318, 1023,  649,
 /*  1010 */   650,  119, 1021,  118,  342,  836,  649,  650,  936,  788,
 /*  1020 */   857,  364,  266,  326,  327,  400,  616,  522,  120,  413,
 /*  1030 */   414,  416,  419,  421,  423,  385,  426,  427,  429,  431,
 /*  1040 */   433,  298,  435,  437,  439,  441,  443,  446,  449,  452,
 /*  1050 */   455,  458,  460,  462,  464,  466,  468,  470,  472,  474,
 /*  1060 */   475,  476,  477,  479,  481,  483,  485,  300,  487,  491,
 /*  1070 */   494,  497,  500,  502,  504,  506,  508,  510,  513,  516,
 /*  1080 */   330,  523,  526,  528,  530,  532,  534,  536,  319, 1023,
 /*  1090 */   938,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  1100 */   636,  637,  638,  639,  640,  621,  619,  858,  859,  622,
 /*  1110 */   845,   84,  321, 1023,   14,  627,  628,  629,  630,  631,
 /*  1120 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*  1130 */   619,  620,  626,  622,  620,  201,  956,  938,  835,  620,
 /*  1140 */   644,  250,  198,  197,  942,  938,  343,  836,  205,  762,
 /*  1150 */   938,  788,  217,  228,  256,  750,  626,  238,  788,  788,
 /*  1160 */   326,  327,  251,  206,  788,  942,  846,  847,  537,  119,
 /*  1170 */   618,  118,  995,  835,  649,  650, 1019,  939,  224,  788,
 /*  1180 */   606,  602,  836,  656,  616,  522,  120,  413,  414,  416,
 /*  1190 */   419,  421,  423,  385,  426,  427,  429,  431,  433,  298,
 /*  1200 */   435,  437,  439,  441,  443,  446,  449,  452,  455,  458,
 /*  1210 */   460,  462,  464,  466,  468,  470,  472,  474,  475,  476,
 /*  1220 */   477,  479,  481,  483,  485,  300,  487,  491,  494,  497,
 /*  1230 */   500,  502,  504,  506,  508,  510,  513,  516,  330,  523,
 /*  1240 */   526,  528,  530,  532,  534,  536,  356,  132,  657,  627,
 /*  1250 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*  1260 */   638,  639,  640,  621,  619,  404,  620,  622,  927,   85,
 /*  1270 */   658,  366,   14,  627,  628,  629,  630,  631,  632,  633,
 /*  1280 */   634,  635,  636,  637,  638,  639,  640,  621,  619,  620,
 /*  1290 */   626,  622,  182,  202,  958,  942,  620,  619,  646,  835,
 /*  1300 */   622,  620,  619,  266,  593,  622,  354,  959,  836,  788,
 /*  1310 */   217,  228,  256,  750,  626,  268,   27,  406,  326,  327,
 /*  1320 */   274,  764,  271,  649,  650,  301,  752,  119,  661,  118,
 /*  1330 */   984,  407,  649,  650,  617,  267,  997,  663,  278, 1020,
 /*  1340 */   540,   96,  616,  522,  120,  413,  414,  416,  419,  421,
 /*  1350 */   423,  385,  426,  427,  429,  431,  433,  298,  435,  437,
 /*  1360 */   439,  441,  443,  446,  449,  452,  455,  458,  460,  462,
 /*  1370 */   464,  466,  468,  470,  472,  474,  475,  476,  477,  479,
 /*  1380 */   481,  483,  485,  300,  487,  491,  494,  497,  500,  502,
 /*  1390 */   504,  506,  508,  510,  513,  516,  330,  523,  526,  528,
 /*  1400 */   530,  532,  534,  536,  303,  777,  411,  627,  628,  629,
 /*  1410 */   630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
 /*  1420 */   640,  621,  619,  620,   98,  622,  412,  620,  369,  373,
 /*  1430 */    14,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  1440 */   636,  637,  638,  639,  640,  621,  746,  619,  626,  620,
 /*  1450 */   622,  203,  961,  938,  621,  620,  331,  620,  620,  621,
 /*  1460 */   266,  266,  304,  790,  360,  362,  365,  788,  217,  228,
 /*  1470 */   256,  750,  217,  228,  256,  750,  326,  327,  239,    1,
 /*  1480 */   326,  327,  305,  799,  903,  119,  745,  118,  188,  753,
 /*  1490 */   649,  650,  787,  559,  272,  998,  266,  266,  266,  158,
 /*  1500 */   560,  522,  120,  413,  414,  416,  419,  421,  423,  385,
 /*  1510 */   426,  427,  429,  431,  433,  298,  435,  437,  439,  441,
 /*  1520 */   443,  446,  449,  452,  455,  458,  460,  462,  464,  466,
 /*  1530 */   468,  470,  472,  474,  475,  476,  477,  479,  481,  483,
 /*  1540 */   485,  300,  487,  491,  494,  497,  500,  502,  504,  506,
 /*  1550 */   508,  510,  513,  516,  330,  523,  526,  528,  530,  532,
 /*  1560 */   534,  536,  172,  403,    3,  627,  628,  629,  630,  631,
 /*  1570 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*  1580 */   619,  852,  215,  622,  894,  116,  117,  807,   90,  368,
 /*  1590 */  1609,  401,  402,  121,  374,  659,  375,  376,  377,  277,
 /*  1600 */   284,  969,  226,  561,  621,  652,  626,  647,  208,  775,
 /*  1610 */   171,  217,  228,  256,  750,  643,  563,  564,  213,  326,
 /*  1620 */   327,  266,  370,  160,  999,  566,  608,  609,  567,  999,
 /*  1630 */   999,  237,  378,  889,  972,  973,  974,  975,  976,  977,
 /*  1640 */   978,  979,  980,  981,  982,  653,  890,  891,  649,  650,
 /*  1650 */   253,  282,  598,  619,  266,  645,  622,  600,  595,  522,
 /*  1660 */   174,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*  1670 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*  1680 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*  1690 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*  1700 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*  1710 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*  1720 */    26,  649,  650,  627,  628,  629,  630,  631,  632,  633,
 /*  1730 */   634,  635,  636,  637,  638,  639,  640,  621,  619,  348,
 /*  1740 */   115,  622,  892,  620,  907,  797,   90,  269,  620,  620,
 /*  1750 */   895,  216,  231,  572,  113,  322,  587,  323,  324,  325,
 /*  1760 */   111,  929,  151,  226,  626,  731,  263,  896,  897,  259,
 /*  1770 */   260,  315,  234,   21,  235,  236,  355,  358,  359,  273,
 /*  1780 */   367,  364,  967,  124,  372,  804,  800,  801,  802,  803,
 /*  1790 */   805,  271,   27,  349,  302,  972,  973,  974,  975,  976,
 /*  1800 */   977,  978,  979,  980,  981,  982,  649,  650,  114,   27,
 /*  1810 */   621,  253,  282,  983,  112,  985,  266,  522,  909,  413,
 /*  1820 */   414,  416,  419,  421,  423,  385,  426,  427,  429,  431,
 /*  1830 */   433,  298,  435,  437,  439,  441,  443,  446,  449,  452,
 /*  1840 */   455,  458,  460,  462,  464,  466,  468,  470,  472,  474,
 /*  1850 */   475,  476,  477,  479,  481,  483,  485,  300,  487,  491,
 /*  1860 */   494,  497,  500,  502,  504,  506,  508,  510,  513,  516,
 /*  1870 */   330,  523,  526,  528,  530,  532,  534,  536,  669,  702,
 /*  1880 */   906,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  1890 */   636,  637,  638,  639,  640,  621,  619,  994,    1,  622,
 /*  1900 */   624,  109,  625,  806,   90,  685,  686,  687,  688,  704,
 /*  1910 */   706,  380,  623,  620,  225, 1005,  130,  999,  999, 1014,
 /*  1920 */   110,  905,  626,  904,  928, 1015,   13,   13,   71, 1026,
 /*  1930 */  1018, 1022, 1024,  221, 1025, 1029,  341,  220,  569,  999,
 /*  1940 */  1039,  345, 1040,  176, 1041,  996, 1000,  122, 1027,  804,
 /*  1950 */   800,  801,  802,  803,  805, 1028, 1042, 1030,  302,  153,
 /*  1960 */  1031,  780,  778, 1032,  649,  650,  779,  597, 1033,   74,
 /*  1970 */   302,   78,   13, 1034, 1035,  522,  168,  413,  414,  416,
 /*  1980 */   419,  421,  423,  385,  426,  427,  429,  431,  433,  298,
 /*  1990 */   435,  437,  439,  441,  443,  446,  449,  452,  455,  458,
 /*  2000 */   460,  462,  464,  466,  468,  470,  472,  474,  475,  476,
 /*  2010 */   477,  479,  481,  483,  485,  300,  487,  491,  494,  497,
 /*  2020 */   500,  502,  504,  506,  508,  510,  513,  516,  330,  523,
 /*  2030 */   526,  528,  530,  532,  534,  536,  620,  620,  605,  627,
 /*  2040 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*  2050 */   638,  639,  640,  621,  619, 1043,  619,  622,  620,  622,
 /*  2060 */  1044,  170,   14,  291,  624,  292,  625,  662,  664,  685,
 /*  2070 */   686,  687,  688,  704,  706,  380,  623,  620,  941,  165,
 /*  2080 */   626,  685,  686,  687,  688,  704,  706,  222,   11,  620,
 /*  2090 */    95,  667,   97,   15,  217,  228,  256,  750,   16,  999,
 /*  2100 */   999,  691,  326,  327,   17,  123,  999,  804,  800,  801,
 /*  2110 */   802,  803,  805,   18,  692,   19,  302,  297,  693,   20,
 /*  2120 */   694,  697,  649,  650,  649,  650,  695, 1001, 1002,  696,
 /*  2130 */    22,  698,  863,  522,  599,  413,  414,  416,  419,  421,
 /*  2140 */   423,  385,  426,  427,  429,  431,  433,  298,  435,  437,
 /*  2150 */   439,  441,  443,  446,  449,  452,  455,  458,  460,  462,
 /*  2160 */   464,  466,  468,  470,  472,  474,  475,  476,  477,  479,
 /*  2170 */   481,  483,  485,  300,  487,  491,  494,  497,  500,  502,
 /*  2180 */   504,  506,  508,  510,  513,  516,  330,  523,  526,  528,
 /*  2190 */   530,  532,  534,  536,   23,  699,   24,  627,  628,  629,
 /*  2200 */   630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
 /*  2210 */   640,  621,  619,  621,  843,  622,  849,  290,  620,  620,
 /*  2220 */    89,  700,  624,  943,  625,  620,   25,  685,  686,  687,
 /*  2230 */   688,  704,  706,  380,  623,  620,  701,   28,  626,  217,
 /*  2240 */   228,  256,  750,  705,   29,  707,   30,  326,  327,  708,
 /*  2250 */   709,  620,   31,   32,  944,   33,  710,   34,  949,   35,
 /*  2260 */   684,  679,  681,  682,  683,  680,  711,   36,   37,  293,
 /*  2270 */   217,  228,  256,  750,  217,  228,  256,  750,  326,  327,
 /*  2280 */   649,  650,  326,  327,  712,   38,   39,   40,  713,   41,
 /*  2290 */   714,  522,   42,  413,  414,  416,  419,  421,  423,  385,
 /*  2300 */   426,  427,  429,  431,  433,  298,  435,  437,  439,  441,
 /*  2310 */   443,  446,  449,  452,  455,  458,  460,  462,  464,  466,
 /*  2320 */   468,  470,  472,  474,  475,  476,  477,  479,  481,  483,
 /*  2330 */   485,  300,  487,  491,  494,  497,  500,  502,  504,  506,
 /*  2340 */   508,  510,  513,  516,  330,  523,  526,  528,  530,  532,
 /*  2350 */   534,  536,  715,   43,  716,  627,  628,  629,  630,  631,
 /*  2360 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*  2370 */   619,   44,  717,  622,   45,  624,   46,  625,   94,  676,
 /*  2380 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  718,
 /*  2390 */   719,   47,  999,  409,  577,  720,   48,  721,   49,  722,
 /*  2400 */   934,  932,  723,  724,  725,  933,   50,  999,  332,  302,
 /*  2410 */   726,   51,  727,   52,  728,   53,  729,  166,  935,   54,
 /*  2420 */  1003,   55,  549,  684,  679,  681,  682,  683,  680,  730,
 /*  2430 */   733,   56,  293,   57,   58, 1004,   59,  734,  649,  650,
 /*  2440 */    60,  735,   61,   62,   63,   64,  736,   65,  737,  522,
 /*  2450 */   738,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*  2460 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*  2470 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*  2480 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*  2490 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*  2500 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*  2510 */   619,  620,   66,  622,   67,  739,   68,  740,   86,  741,
 /*  2520 */   685,  686,  687,  688,  704,  706,  620,  621,  620,   69,
 /*  2530 */   328,   70,  329,  742,  286,   72,  232,   73,  624,  743,
 /*  2540 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  2550 */   623,  620,  313,  684,  679,  681,  682,  683,  680,   75,
 /*  2560 */    76,   77,  293,  934,  932,  744,  167,  751,  933,    2,
 /*  2570 */   754,  287,  302,  755,    5,  756,    6,  757,  649,  650,
 /*  2580 */     7,  666,    8,  758,  538,    9,  759,   10,  760,  522,
 /*  2590 */   761,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*  2600 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*  2610 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*  2620 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*  2630 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*  2640 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*  2650 */   619,  541,  619,  622,  288,  622,  763,  808,   79,  765,
 /*  2660 */   328,  766,  329,  767,  286,  768,  232,  621,  624,  769,
 /*  2670 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  2680 */   623,  620,  770,  685,  686,  687,  688,  704,  706,  950,
 /*  2690 */   771,  620,  525,  684,  679,  681,  682,  683,  680,  776,
 /*  2700 */   781,  784,  293,  789,  798,  217,  228,  256,  750,  809,
 /*  2710 */   134,  855,  863,  326,  327,  156,  187,  214,  649,  650,
 /*  2720 */   547,  684,  679,  681,  682,  683,  680,  157,  838,  522,
 /*  2730 */   293,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*  2740 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*  2750 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*  2760 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*  2770 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*  2780 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*  2790 */   619,  207,  842,  622,  338,  212,  849,  290,   88,  850,
 /*  2800 */   328,  159,  329,  876,  286,   91,  232,  621,  624,  621,
 /*  2810 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  2820 */   623,  620,  307,  347,  893,  898,  910,  913,  328,  782,
 /*  2830 */   329,  620,  286,  783,  232,  312,  624,  302,  625,  296,
 /*  2840 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  2850 */   546,  684,  679,  681,  682,  683,  680,   93,  930,  127,
 /*  2860 */   293,  863,  931,  193,  147,  161,  229,  129,  150,  522,
 /*  2870 */   199,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*  2880 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*  2890 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*  2900 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*  2910 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*  2920 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*  2930 */   619,  619,  619,  622,  622,  622,  565,  589,   87,  190,
 /*  2940 */   190,  337,  590,  338,  968,  849,  290,  621,  685,  686,
 /*  2950 */   687,  688,  704,  706,  592,  352,  620,  970,  328,  353,
 /*  2960 */   329,  240,  286,  241,  232,  243,  624,  131,  625,  296,
 /*  2970 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  2980 */   620,  244,  545,  684,  679,  681,  682,  683,  680,  246,
 /*  2990 */   862,  862,  293,  218,  218,  247,  219,  219, 1006,  649,
 /*  3000 */   650,  684,  679,  681,  682,  683,  680, 1010, 1016,  522,
 /*  3010 */   293,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*  3020 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*  3030 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*  3040 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*  3050 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*  3060 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*  3070 */   619,  619,  152,  622,  622, 1610, 1610, 1610,   92,  190,
 /*  3080 */  1610, 1610, 1610,  619, 1610, 1610,  622,  621,  621,  621,
 /*  3090 */   328,  233,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  3100 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  3110 */   623,  620,  674, 1610,  232,  951,  624, 1610,  625,  296,
 /*  3120 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  3130 */   862,  217,  228,  256,  750,  863,  219, 1610, 1610,  326,
 /*  3140 */   327,  141,  856, 1610, 1610,  261, 1610, 1610, 1610,  522,
 /*  3150 */   863,  413,  414,  416,  419,  421,  423,  385,  426,  427,
 /*  3160 */   429,  431,  433,  298,  435,  437,  439,  441,  443,  446,
 /*  3170 */   449,  452,  455,  458,  460,  462,  464,  466,  468,  470,
 /*  3180 */   472,  474,  475,  476,  477,  479,  481,  483,  485,  300,
 /*  3190 */   487,  491,  494,  497,  500,  502,  504,  506,  508,  510,
 /*  3200 */   513,  516,  330,  523,  526,  528,  530,  532,  534,  536,
 /*  3210 */   619,  863, 1610,  622,  115,  865, 1610,  338,  145,  849,
 /*  3220 */   290, 1610,    1,  810, 1610,  136, 1610,  621,  621, 1610,
 /*  3230 */   337, 1610,  338, 1610,  849,  290,  626, 1610,  225, 1610,
 /*  3240 */   621,  163,  619, 1610, 1610,  622, 1610,  277,  284,  969,
 /*  3250 */  1610,  785,  860, 1610,  620,  786, 1610,  221, 1610,  302,
 /*  3260 */   341,  220,  569,  829,  164,  345,  175,  176, 1610,  620,
 /*  3270 */   277,  284,  969, 1610, 1610, 1610,  185, 1610,  649,  650,
 /*  3280 */  1036, 1610,  972,  973,  974,  975,  976,  977,  978,  979,
 /*  3290 */   980,  981,  982,  864, 1610,  849,  290, 1610,  253,  282,
 /*  3300 */   952,  856, 1610, 1038,  261,  972,  973,  974,  975,  976,
 /*  3310 */   977,  978,  979,  980,  981,  982,  217,  228,  256,  750,
 /*  3320 */  1610,  253,  282, 1610,  326,  327,  276, 1610, 1610,  107,
 /*  3330 */   620,  556, 1610, 1610,  822, 1610,  825,  826,  827, 1610,
 /*  3340 */  1610, 1610, 1610,  824,  346, 1610,  108,  619, 1610, 1610,
 /*  3350 */   622, 1610, 1610,  627,  628,  629,  630,  631,  632,  633,
 /*  3360 */   634,  635,  636,  637,  638,  639,  640,  621,  830,  831,
 /*  3370 */   685,  686,  687,  688,  704,  706, 1610, 1610,  620, 1610,
 /*  3380 */  1610, 1610, 1610,  555,  173,  181,  126,  557, 1610,  881,
 /*  3390 */   882,  883,  884,  885,  886,  887,  888,  619, 1610,  621,
 /*  3400 */   622, 1610, 1610, 1610, 1610,  139,  856, 1610,  184,  261,
 /*  3410 */  1007,  629,  630,  631,  632,  633,  634,  186, 1610, 1610,
 /*  3420 */  1610,  619, 1610,  626,  622, 1610, 1610, 1610, 1610,  139,
 /*  3430 */  1610, 1610, 1610, 1610, 1017,  869,  870, 1610, 1610,  823,
 /*  3440 */   828,  105, 1610, 1610,  223,  619, 1610,  626,  622,  624,
 /*  3450 */   829,  625,  619, 1610, 1610,  622, 1610, 1610,  106, 1610,
 /*  3460 */   380,  623,  620,  209, 1610,  649,  650, 1610,  223,  619,
 /*  3470 */   133, 1610,  622, 1610,  829, 1610,  242,  145, 1610, 1610,
 /*  3480 */  1610, 1610, 1610,  245, 1610, 1610, 1610,  209, 1610,  649,
 /*  3490 */   650,  619,  272,  998,  622,  626, 1610, 1610, 1610,  272,
 /*  3500 */   998, 1610, 1610,    1,  621,  333, 1610, 1610,  262, 1610,
 /*  3510 */   520, 1610,  169,  408, 1610, 1610,  407, 1610,  406, 1610,
 /*  3520 */  1610, 1610,  829,  629,  630,  631,  632,  633,  634, 1610,
 /*  3530 */  1610, 1610, 1610, 1610, 1610,  185, 1610,  649,  650, 1610,
 /*  3540 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /*  3550 */   637,  638,  639,  640,  621,  830,  831, 1610, 1610,  649,
 /*  3560 */   650, 1610, 1610, 1610,  627,  628,  629,  630,  631,  632,
 /*  3570 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  830,
 /*  3580 */   831,  619,  146, 1610,  622,  144, 1610, 1610, 1610,  145,
 /*  3590 */  1610, 1610, 1610, 1610,  863, 1610, 1610,  613,  614,  615,
 /*  3600 */  1610, 1610,  621, 1610,  612, 1610, 1610,  626, 1610,  621,
 /*  3610 */  1610, 1610,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  3620 */   635,  636,  637,  638,  639,  640,  621,  830,  831,  619,
 /*  3630 */  1610, 1610,  622, 1610,  829, 1610, 1610,  139,  613,  614,
 /*  3640 */   615, 1610,  194, 1610, 1610,  612, 1610,  185,  621,  649,
 /*  3650 */   650,  619, 1610, 1610,  622,  626, 1610, 1610, 1610,  139,
 /*  3660 */   177,  642, 1610, 1610,  230, 1610, 1610,  813, 1610,  135,
 /*  3670 */  1610, 1610, 1610, 1610,  337,  953,  338,  626,  849,  290,
 /*  3680 */  1610, 1610,  829, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  3690 */   954,  217,  228,  256,  750,  209, 1610,  649,  650,  326,
 /*  3700 */   327,  178,  642, 1610,  829, 1610,  217,  228,  256,  750,
 /*  3710 */   624, 1610,  625,  620,  326,  327, 1610,  209, 1610,  649,
 /*  3720 */   650,  380,  623,  620,  627,  628,  629,  630,  631,  632,
 /*  3730 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  830,
 /*  3740 */   831, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  3750 */  1610,  624, 1610,  625, 1610, 1610, 1610,  144, 1610, 1610,
 /*  3760 */  1610, 1610,  380,  623,  620, 1610,  863, 1610, 1610, 1610,
 /*  3770 */  1610, 1610,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  3780 */   635,  636,  637,  638,  639,  640,  621,  830,  831, 1610,
 /*  3790 */  1610, 1610, 1610, 1610,  627,  628,  629,  630,  631,  632,
 /*  3800 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  830,
 /*  3810 */   831,  619,  899, 1610,  622, 1610,  900, 1610, 1610,  139,
 /*  3820 */   302, 1610, 1610, 1610,  200,  613,  614,  615,  619,  148,
 /*  3830 */  1610,  622,  612, 1610, 1610, 1610,  139,  626, 1610,  568,
 /*  3840 */  1610,  135, 1610, 1610, 1610, 1610,  337, 1610,  338, 1610,
 /*  3850 */   849,  290, 1610, 1610,  626, 1610, 1610, 1610,  619, 1610,
 /*  3860 */  1610,  622, 1610, 1610,  829, 1610,  139, 1610, 1610, 1610,
 /*  3870 */  1610, 1011, 1610, 1610,  955,  619,  149,  209,  622,  649,
 /*  3880 */   650,  829, 1610,  139,  626,  620, 1610, 1610,  179,  642,
 /*  3890 */   217,  228,  256,  750,  209, 1610,  649,  650,  326,  327,
 /*  3900 */  1610,  626, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  3910 */  1610,  829, 1610, 1610,  835, 1610, 1610, 1610, 1610, 1610,
 /*  3920 */  1610, 1610,  833,  836,  209, 1610,  649,  650,  829, 1610,
 /*  3930 */  1610,  685,  686,  687,  688,  704,  706, 1610,  624,  620,
 /*  3940 */   625,  209, 1610,  649,  650, 1610, 1610, 1610, 1610,  380,
 /*  3950 */   623,  620, 1610, 1610,  627,  628,  629,  630,  631,  632,
 /*  3960 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  830,
 /*  3970 */   831,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  3980 */   636,  637,  638,  639,  640,  621,  830,  831,  144,  562,
 /*  3990 */  1610,  137, 1610, 1610, 1610, 1610, 1610,  863, 1610, 1610,
 /*  4000 */  1610,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  4010 */   636,  637,  638,  639,  640,  621,  830,  831,  627,  628,
 /*  4020 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  4030 */   639,  640,  621,  830,  831,  619, 1610, 1610,  622, 1610,
 /*  4040 */  1610, 1610,  620,  139, 1610,  818, 1610, 1610,  544,  684,
 /*  4050 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  4060 */  1610,  626, 1610, 1610, 1610,  619, 1610, 1610,  622, 1610,
 /*  4070 */   878, 1610,  135,  145, 1610,  871,  835,  337, 1610,  338,
 /*  4080 */  1610,  849,  290, 1610,  833,  836, 1610, 1610,  829, 1610,
 /*  4090 */  1610,  626, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4100 */  1610,  209, 1610,  649,  650, 1610, 1610, 1610, 1610, 1610,
 /*  4110 */  1610,  957, 1610, 1610, 1610, 1610,  620, 1610,  829, 1610,
 /*  4120 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  217,  228,  256,
 /*  4130 */   750,  185, 1610,  649,  650,  326,  327, 1610,  543,  684,
 /*  4140 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  4150 */  1610,  946, 1610,  137, 1610, 1610,  328, 1610,  329, 1610,
 /*  4160 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  4170 */   686,  687,  688,  704,  706,  380,  623,  620,  627,  628,
 /*  4180 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  4190 */   639,  640,  621,  830,  831,  392,  684,  679,  681,  682,
 /*  4200 */   683,  680, 1610, 1610,  620,  293, 1610, 1610,  627,  628,
 /*  4210 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  4220 */   639,  640,  621,  830,  831, 1610, 1610,  410,  684,  679,
 /*  4230 */   681,  682,  683,  680, 1610, 1610, 1610,  293, 1610, 1610,
 /*  4240 */  1610, 1610, 1610, 1610, 1610, 1610,  328, 1610,  329, 1610,
 /*  4250 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  4260 */   686,  687,  688,  704,  706,  380,  623,  620, 1610, 1610,
 /*  4270 */  1610,  960,  294,  684,  679,  681,  682,  683,  680, 1610,
 /*  4280 */  1610, 1610,  293, 1610, 1610, 1610, 1610,  217,  228,  256,
 /*  4290 */   750, 1610, 1610, 1610, 1610,  326,  327, 1610, 1610, 1610,
 /*  4300 */  1610, 1610, 1610,  328, 1610,  329, 1610,  286, 1610,  232,
 /*  4310 */  1610,  624, 1610,  625,  296,  690,  685,  686,  687,  688,
 /*  4320 */   704,  706,  380,  623,  620, 1610,  670,  684,  679,  681,
 /*  4330 */   682,  683,  680, 1610, 1610,  328,  293,  329, 1610,  286,
 /*  4340 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  4350 */   687,  688,  704,  706,  380,  623,  620,  575,  684,  679,
 /*  4360 */   681,  682,  683,  680, 1610, 1610,  835,  293, 1610, 1610,
 /*  4370 */  1610, 1610, 1610, 1610,  833,  836, 1610, 1610, 1610, 1610,
 /*  4380 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  4390 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  4400 */   623,  620,  574,  684,  679,  681,  682,  683,  680, 1610,
 /*  4410 */  1610, 1610,  293, 1610, 1610,  143, 1610, 1610, 1610, 1610,
 /*  4420 */  1610, 1610, 1610, 1610,  863, 1610, 1610, 1610, 1610, 1610,
 /*  4430 */  1610, 1610, 1610, 1610,  328, 1610,  329, 1610,  286, 1610,
 /*  4440 */   232,  947,  624,  137,  625,  296,  690,  685,  686,  687,
 /*  4450 */   688,  704,  706,  380,  623,  620,  415,  684,  679,  681,
 /*  4460 */   682,  683,  680, 1610, 1610,  328,  293,  329, 1610,  286,
 /*  4470 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  4480 */   687,  688,  704,  706,  380,  623,  620,  417,  684,  679,
 /*  4490 */   681,  682,  683,  680,  620, 1610, 1610,  293, 1610,  142,
 /*  4500 */  1610, 1610, 1610, 1610,  337, 1610,  338, 1610,  849,  290,
 /*  4510 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  4520 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  4530 */   623,  620,  418,  684,  679,  681,  682,  683,  680, 1610,
 /*  4540 */  1610, 1610,  293,  620, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4550 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4560 */  1610, 1610, 1610, 1610,  328, 1610,  329, 1610,  286, 1610,
 /*  4570 */   232, 1610,  624, 1610,  625,  296,  690,  685,  686,  687,
 /*  4580 */   688,  704,  706,  380,  623,  620,  420,  684,  679,  681,
 /*  4590 */   682,  683,  680, 1610, 1610,  328,  293,  329, 1610,  286,
 /*  4600 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  4610 */   687,  688,  704,  706,  380,  623,  620, 1610,  424,  684,
 /*  4620 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  4630 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4640 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  4650 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  4660 */   623,  620,  425,  684,  679,  681,  682,  683,  680, 1610,
 /*  4670 */  1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4680 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4690 */  1610, 1610, 1610, 1610,  328, 1610,  329, 1610,  286, 1610,
 /*  4700 */   232, 1610,  624, 1610,  625,  296,  690,  685,  686,  687,
 /*  4710 */   688,  704,  706,  380,  623,  620, 1610,  428,  684,  679,
 /*  4720 */   681,  682,  683,  680, 1610, 1610,  328,  293,  329, 1610,
 /*  4730 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  4740 */   686,  687,  688,  704,  706,  380,  623,  620,  430,  684,
 /*  4750 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  4760 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4770 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  4780 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  4790 */   623,  620,  432,  684,  679,  681,  682,  683,  680,  962,
 /*  4800 */  1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4810 */  1610, 1610, 1610, 1610, 1610,  217,  228,  256,  750, 1610,
 /*  4820 */  1610, 1610, 1610,  326,  327,  328, 1610,  329, 1610,  286,
 /*  4830 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  4840 */   687,  688,  704,  706,  380,  623,  620,  434,  684,  679,
 /*  4850 */   681,  682,  683,  680, 1610, 1610,  328,  293,  329, 1610,
 /*  4860 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  4870 */   686,  687,  688,  704,  706,  380,  623,  620,  299,  684,
 /*  4880 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  4890 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4900 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  4910 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  4920 */   623,  620,  703,  684,  679,  681,  682,  683,  680,  965,
 /*  4930 */  1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  4940 */  1610, 1610, 1610, 1610, 1610,  217,  228,  256,  750, 1610,
 /*  4950 */  1610, 1610, 1610,  326,  327,  328, 1610,  329, 1610,  286,
 /*  4960 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  4970 */   687,  688,  704,  706,  380,  623,  620,  436,  684,  679,
 /*  4980 */   681,  682,  683,  680, 1610, 1610,  328,  293,  329, 1610,
 /*  4990 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  5000 */   686,  687,  688,  704,  706,  380,  623,  620, 1610,  438,
 /*  5010 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  5020 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5030 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  5040 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  5050 */   623,  620,  440,  684,  679,  681,  682,  683,  680,  966,
 /*  5060 */  1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5070 */  1610, 1610, 1610, 1610, 1610,  217,  228,  256,  750, 1610,
 /*  5080 */  1610, 1610, 1610,  326,  327,  328, 1610,  329, 1610,  286,
 /*  5090 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  5100 */   687,  688,  704,  706,  380,  623,  620, 1610,  442,  684,
 /*  5110 */   679,  681,  682,  683,  680, 1610, 1610,  328,  293,  329,
 /*  5120 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  5130 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  444,
 /*  5140 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  5150 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5160 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  5170 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  5180 */   623,  620,  445,  684,  679,  681,  682,  683,  680, 1610,
 /*  5190 */  1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5200 */  1610, 1610, 1610, 1610,  684,  679,  681,  682,  683,  680,
 /*  5210 */  1610, 1610, 1610,  293, 1610, 1610,  328, 1610,  329, 1610,
 /*  5220 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  5230 */   686,  687,  688,  704,  706,  380,  623,  620,  447,  684,
 /*  5240 */   679,  681,  682,  683,  680, 1610, 1610,  328,  293,  329,
 /*  5250 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  5260 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  448,
 /*  5270 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  5280 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5290 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  5300 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  5310 */   623,  620,  450,  684,  679,  681,  682,  683,  680,  624,
 /*  5320 */  1610,  625,  293,  678,  685,  686,  687,  688,  704,  706,
 /*  5330 */   380,  623,  620, 1610,  684,  679,  681,  682,  683,  680,
 /*  5340 */  1610, 1610, 1610,  293, 1610, 1610,  328, 1610,  329, 1610,
 /*  5350 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  5360 */   686,  687,  688,  704,  706,  380,  623,  620,  451,  684,
 /*  5370 */   679,  681,  682,  683,  680, 1610, 1610,  328,  293,  329,
 /*  5380 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  5390 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1610,
 /*  5400 */   453,  684,  679,  681,  682,  683,  680, 1610, 1610, 1610,
 /*  5410 */   293, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5420 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  5430 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  5440 */   623,  620,  454,  684,  679,  681,  682,  683,  680,  624,
 /*  5450 */  1610,  625,  293,  689,  685,  686,  687,  688,  704,  706,
 /*  5460 */   380,  623,  620, 1610,  795,  791,  792,  793,  794,  796,
 /*  5470 */  1610, 1610, 1610,  302, 1610, 1610,  328, 1610,  329, 1610,
 /*  5480 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  5490 */   686,  687,  688,  704,  706,  380,  623,  620, 1610,  456,
 /*  5500 */   684,  679,  681,  682,  683,  680, 1610, 1610,  328,  293,
 /*  5510 */   329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,
 /*  5520 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  5530 */   457,  684,  679,  681,  682,  683,  680, 1610, 1610, 1610,
 /*  5540 */   293, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5550 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  5560 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  5570 */   623,  620,  459,  684,  679,  681,  682,  683,  680,  624,
 /*  5580 */  1610,  625,  293, 1610,  685,  686,  687,  688,  704,  706,
 /*  5590 */   380,  623,  620, 1610,  461,  684,  679,  681,  682,  683,
 /*  5600 */   680, 1610, 1610, 1610,  293, 1610, 1610,  328, 1610,  329,
 /*  5610 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  5620 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  463,
 /*  5630 */   684,  679,  681,  682,  683,  680, 1610, 1610,  328,  293,
 /*  5640 */   329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,
 /*  5650 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  5660 */   465,  684,  679,  681,  682,  683,  680, 1610, 1610, 1610,
 /*  5670 */   293, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5680 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  5690 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  5700 */   623,  620,  328, 1610,  329, 1610,  286, 1610,  232, 1610,
 /*  5710 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  5720 */   706,  380,  623,  620,  467,  684,  679,  681,  682,  683,
 /*  5730 */   680, 1610, 1610, 1610,  293, 1610, 1610,  328, 1610,  329,
 /*  5740 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  5750 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  469,
 /*  5760 */   684,  679,  681,  682,  683,  680, 1610, 1610,  328,  293,
 /*  5770 */   329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,
 /*  5780 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  5790 */  1610,  471,  684,  679,  681,  682,  683,  680, 1610, 1610,
 /*  5800 */  1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5810 */  1610, 1610, 1610,  473,  684,  679,  681,  682,  683,  680,
 /*  5820 */  1610, 1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5830 */  1610, 1610,  328, 1610,  329, 1610,  286, 1610,  232, 1610,
 /*  5840 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  5850 */   706,  380,  623,  620,  478,  684,  679,  681,  682,  683,
 /*  5860 */   680, 1610, 1610, 1610,  293, 1610, 1610,  328, 1610,  329,
 /*  5870 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  5880 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1610,
 /*  5890 */   480,  684,  679,  681,  682,  683,  680, 1610, 1610,  328,
 /*  5900 */   293,  329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,
 /*  5910 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  5920 */   620,  328, 1610,  329, 1610,  286, 1610,  232, 1610,  624,
 /*  5930 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  5940 */   380,  623,  620,  482,  684,  679,  681,  682,  683,  680,
 /*  5950 */  1610, 1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  5960 */  1610, 1610,  328, 1610,  329, 1610,  286, 1610,  232, 1610,
 /*  5970 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  5980 */   706,  380,  623,  620, 1610,  484,  684,  679,  681,  682,
 /*  5990 */   683,  680, 1610, 1610, 1610,  293, 1610, 1610,  328, 1610,
 /*  6000 */   329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,
 /*  6010 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  6020 */   486,  684,  679,  681,  682,  683,  680, 1610, 1610, 1610,
 /*  6030 */   293, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  6040 */  1610, 1610,  488,  684,  679,  681,  682,  683,  680, 1610,
 /*  6050 */  1610,  328,  293,  329, 1610,  286, 1610,  232, 1610,  624,
 /*  6060 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6070 */   380,  623,  620, 1610,  489,  684,  679,  681,  682,  683,
 /*  6080 */   680, 1610, 1610, 1610,  293, 1610, 1610, 1610, 1610, 1610,
 /*  6090 */  1610, 1610, 1610,  328, 1610,  329, 1610,  286, 1610,  232,
 /*  6100 */  1610,  624, 1610,  625,  296,  690,  685,  686,  687,  688,
 /*  6110 */   704,  706,  380,  623,  620,  490,  684,  679,  681,  682,
 /*  6120 */   683,  680, 1610, 1610, 1610,  293, 1610, 1610,  328, 1610,
 /*  6130 */   329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,
 /*  6140 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  6150 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  6160 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  6170 */   623,  620, 1610,  492,  684,  679,  681,  682,  683,  680,
 /*  6180 */  1610, 1610,  328,  293,  329, 1610,  286, 1610,  232, 1610,
 /*  6190 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  6200 */   706,  380,  623,  620,  493,  684,  679,  681,  682,  683,
 /*  6210 */   680, 1610, 1610, 1610,  293, 1610, 1610, 1610, 1610, 1610,
 /*  6220 */  1610, 1610, 1610,  328, 1610,  329, 1610,  286, 1610,  232,
 /*  6230 */  1610,  624, 1610,  625,  296,  690,  685,  686,  687,  688,
 /*  6240 */   704,  706,  380,  623,  620,  495,  684,  679,  681,  682,
 /*  6250 */   683,  680, 1610, 1610, 1610,  293, 1610, 1610, 1610, 1610,
 /*  6260 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  496,  684,
 /*  6270 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  6280 */  1610,  328, 1610,  329, 1610,  286, 1610,  232, 1610,  624,
 /*  6290 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6300 */   380,  623,  620,  498,  684,  679,  681,  682,  683,  680,
 /*  6310 */  1610, 1610,  328,  293,  329, 1610,  286, 1610,  232, 1610,
 /*  6320 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  6330 */   706,  380,  623,  620,  499,  684,  679,  681,  682,  683,
 /*  6340 */   680, 1610, 1610, 1610,  293, 1610, 1610, 1610, 1610, 1610,
 /*  6350 */  1610, 1610, 1610,  328, 1610,  329, 1610,  286, 1610,  232,
 /*  6360 */  1610,  624, 1610,  625,  296,  690,  685,  686,  687,  688,
 /*  6370 */   704,  706,  380,  623,  620, 1610,  328, 1610,  329, 1610,
 /*  6380 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  6390 */   686,  687,  688,  704,  706,  380,  623,  620,  501,  684,
 /*  6400 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  6410 */  1610,  328, 1610,  329, 1610,  286, 1610,  232, 1610,  624,
 /*  6420 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6430 */   380,  623,  620,  503,  684,  679,  681,  682,  683,  680,
 /*  6440 */  1610, 1610,  328,  293,  329, 1610,  286, 1610,  232, 1610,
 /*  6450 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  6460 */   706,  380,  623,  620, 1610,  505,  684,  679,  681,  682,
 /*  6470 */   683,  680, 1610, 1610, 1610,  293, 1610, 1610, 1610, 1610,
 /*  6480 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  507,  684,  679,
 /*  6490 */   681,  682,  683,  680, 1610, 1610, 1610,  293, 1610, 1610,
 /*  6500 */  1610, 1610, 1610, 1610, 1610, 1610,  328, 1610,  329, 1610,
 /*  6510 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  6520 */   686,  687,  688,  704,  706,  380,  623,  620,  509,  684,
 /*  6530 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  6540 */  1610,  328, 1610,  329, 1610,  286, 1610,  232, 1610,  624,
 /*  6550 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6560 */   380,  623,  620, 1610,  511,  684,  679,  681,  682,  683,
 /*  6570 */   680, 1610, 1610,  328,  293,  329, 1610,  286, 1610,  232,
 /*  6580 */  1610,  624, 1610,  625,  296,  690,  685,  686,  687,  688,
 /*  6590 */   704,  706,  380,  623,  620,  328, 1610,  329, 1610,  286,
 /*  6600 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  6610 */   687,  688,  704,  706,  380,  623,  620,  387,  684,  679,
 /*  6620 */   681,  682,  683,  680, 1610, 1610, 1610,  293, 1610, 1610,
 /*  6630 */  1610, 1610, 1610, 1610, 1610, 1610,  328, 1610,  329, 1610,
 /*  6640 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  6650 */   686,  687,  688,  704,  706,  380,  623,  620, 1610,  512,
 /*  6660 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  6670 */  1610, 1610,  328, 1610,  329, 1610,  286, 1610,  232, 1610,
 /*  6680 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  6690 */   706,  380,  623,  620,  514,  684,  679,  681,  682,  683,
 /*  6700 */   680, 1610, 1610, 1610,  293, 1610, 1610, 1610, 1610, 1610,
 /*  6710 */  1610, 1610, 1610, 1610, 1610, 1610,  388,  684,  679,  681,
 /*  6720 */   682,  683,  680, 1610, 1610,  328,  293,  329, 1610,  286,
 /*  6730 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  6740 */   687,  688,  704,  706,  380,  623,  620, 1610,  515,  684,
 /*  6750 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  6760 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  328, 1610,  329,
 /*  6770 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  6780 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  517,
 /*  6790 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  6800 */  1610, 1610,  328, 1610,  329, 1610,  286, 1610,  232, 1610,
 /*  6810 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  6820 */   706,  380,  623,  620,  328, 1610,  329, 1610,  286, 1610,
 /*  6830 */   232, 1610,  624, 1610,  625,  296,  690,  685,  686,  687,
 /*  6840 */   688,  704,  706,  380,  623,  620, 1610,  518,  684,  679,
 /*  6850 */   681,  682,  683,  680, 1610, 1610,  328,  293,  329, 1610,
 /*  6860 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  6870 */   686,  687,  688,  704,  706,  380,  623,  620,  389,  684,
 /*  6880 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  6890 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  328, 1610,  329,
 /*  6900 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  6910 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  519,
 /*  6920 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  6930 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  6940 */  1610, 1610,  390,  684,  679,  681,  682,  683,  680, 1610,
 /*  6950 */  1610, 1610,  293, 1610, 1610,  328, 1610,  329, 1610,  286,
 /*  6960 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  6970 */   687,  688,  704,  706,  380,  623,  620,  527,  684,  679,
 /*  6980 */   681,  682,  683,  680, 1610, 1610,  328,  293,  329, 1610,
 /*  6990 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  7000 */   686,  687,  688,  704,  706,  380,  623,  620,  529,  684,
 /*  7010 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  7020 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  328, 1610,  329,
 /*  7030 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  7040 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1610,
 /*  7050 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  7060 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  7070 */   623,  620,  531,  684,  679,  681,  682,  683,  680, 1610,
 /*  7080 */  1610, 1610,  293, 1610, 1610,  328, 1610,  329, 1610,  286,
 /*  7090 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  7100 */   687,  688,  704,  706,  380,  623,  620,  533,  684,  679,
 /*  7110 */   681,  682,  683,  680, 1610, 1610,  328,  293,  329, 1610,
 /*  7120 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  7130 */   686,  687,  688,  704,  706,  380,  623,  620, 1610,  535,
 /*  7140 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  7150 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7160 */  1610,  391,  684,  679,  681,  682,  683,  680, 1610, 1610,
 /*  7170 */  1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7180 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  7190 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  7200 */   623,  620,  393,  684,  679,  681,  682,  683,  680, 1610,
 /*  7210 */  1610, 1610,  293, 1610, 1610,  328, 1610,  329, 1610,  286,
 /*  7220 */  1610,  232, 1610,  624, 1610,  625,  296,  690,  685,  686,
 /*  7230 */   687,  688,  704,  706,  380,  623,  620, 1610,  551,  684,
 /*  7240 */   679,  681,  682,  683,  680, 1610, 1610,  328,  293,  329,
 /*  7250 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  7260 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  328,
 /*  7270 */  1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,
 /*  7280 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  7290 */   620,  552,  684,  679,  681,  682,  683,  680, 1610, 1610,
 /*  7300 */  1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7310 */   328, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  7320 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  7330 */   623,  620, 1610,  394,  684,  679,  681,  682,  683,  680,
 /*  7340 */  1610, 1610, 1610,  293, 1610, 1610,  328, 1610,  329, 1610,
 /*  7350 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  7360 */   686,  687,  688,  704,  706,  380,  623,  620,  395,  684,
 /*  7370 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  7380 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7390 */   570,  684,  679,  681,  682,  683,  680, 1610, 1610,  328,
 /*  7400 */   293,  329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,
 /*  7410 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  7420 */   620, 1610,  573,  684,  679,  681,  682,  683,  680, 1610,
 /*  7430 */  1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7440 */  1610,  328, 1610,  329, 1610,  286, 1610,  232, 1610,  624,
 /*  7450 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  7460 */   380,  623,  620,  578,  684,  679,  681,  682,  683,  680,
 /*  7470 */  1610, 1610, 1610,  293, 1610, 1610,  328, 1610,  329, 1610,
 /*  7480 */   286, 1610,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  7490 */   686,  687,  688,  704,  706,  380,  623,  620,  328, 1610,
 /*  7500 */   329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,
 /*  7510 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  7520 */  1610,  579,  684,  679,  681,  682,  683,  680, 1610, 1610,
 /*  7530 */   328,  293,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  7540 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  7550 */   623,  620,  619, 1610, 1610,  622, 1610, 1610, 1610, 1610,
 /*  7560 */   145, 1610, 1610,  684,  679,  681,  682,  683,  680, 1610,
 /*  7570 */  1610,  328,  293,  329, 1610,  286, 1610,  232,  626,  624,
 /*  7580 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  7590 */   380,  623,  620, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7600 */  1610, 1610, 1610, 1610, 1610,  829, 1610, 1610, 1610, 1610,
 /*  7610 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  185, 1610,
 /*  7620 */   649,  650, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  328,
 /*  7630 */  1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,
 /*  7640 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  7650 */   620, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7660 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7670 */   671, 1610,  329, 1610,  286, 1610,  232, 1610,  624, 1610,
 /*  7680 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  7690 */   623,  620, 1610, 1610, 1610,  627,  628,  629,  630,  631,
 /*  7700 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*  7710 */   830,  831,  619, 1610, 1610,  622, 1610, 1610, 1610, 1610,
 /*  7720 */   139,  684,  679,  681,  682,  683,  680, 1610, 1610, 1610,
 /*  7730 */   293, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  626, 1610,
 /*  7740 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7750 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7760 */  1610, 1610, 1610, 1610, 1610,  829,  684,  679,  681,  682,
 /*  7770 */   683,  680, 1610, 1610, 1610,  293, 1610, 1610,  209, 1610,
 /*  7780 */   649,  650, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7790 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  7800 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7810 */  1610, 1610, 1610, 1610,  684,  679,  681,  682,  683,  680,
 /*  7820 */  1610, 1610, 1610,  293, 1610, 1610, 1610, 1610,  926, 1610,
 /*  7830 */   329, 1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,
 /*  7840 */   690,  685,  686,  687,  688,  704,  706,  380,  623,  620,
 /*  7850 */  1610, 1610, 1610, 1610, 1610,  627,  628,  629,  630,  631,
 /*  7860 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*  7870 */   830,  831, 1610, 1610, 1610,  672, 1610,  286, 1610,  232,
 /*  7880 */  1610,  624, 1610,  625,  296,  690,  685,  686,  687,  688,
 /*  7890 */   704,  706,  380,  623,  620, 1610, 1610, 1610, 1610,  925,
 /*  7900 */  1610,  286, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  7910 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1610,
 /*  7920 */  1610, 1610, 1610, 1610, 1610,  918, 1610,  232, 1610,  624,
 /*  7930 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  7940 */   380,  623,  620, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7950 */   684,  679,  681,  682,  683,  680, 1610, 1610, 1610,  293,
 /*  7960 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  7970 */  1610, 1610, 1610, 1610, 1610,  684,  679,  681,  682,  683,
 /*  7980 */   680, 1610, 1610, 1610,  293, 1610, 1610, 1610, 1610, 1610,
 /*  7990 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  684,
 /*  8000 */   679,  681,  682,  683,  680, 1610, 1610, 1610,  293, 1610,
 /*  8010 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  684,  679,  681,
 /*  8020 */   682,  683,  680, 1610, 1610, 1610,  293, 1610, 1610, 1610,
 /*  8030 */  1610, 1610, 1610,  684,  679,  681,  682,  683,  680, 1610,
 /*  8040 */  1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610,  684,
 /*  8050 */   679,  681,  682,  683,  680, 1610, 1610,  619,  293, 1610,
 /*  8060 */   622,  919, 1610,  232, 1610,  624, 1610,  625,  296,  690,
 /*  8070 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1610,
 /*  8080 */  1610, 1610, 1610,  626, 1610, 1610,  920, 1610,  232, 1610,
 /*  8090 */   624, 1610,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  8100 */   706,  380,  623,  620, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8110 */   921,  616,  232, 1610,  624, 1610,  625,  296,  690,  685,
 /*  8120 */   686,  687,  688,  704,  706,  380,  623,  620,  922, 1610,
 /*  8130 */   232, 1610,  624, 1610,  625,  296,  690,  685,  686,  687,
 /*  8140 */   688,  704,  706,  380,  623,  620,  915, 1610,  624, 1610,
 /*  8150 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  380,
 /*  8160 */   623,  620,  916, 1610,  624, 1610,  625,  296,  690,  685,
 /*  8170 */   686,  687,  688,  704,  706,  380,  623,  620, 1610, 1610,
 /*  8180 */  1610, 1610, 1610, 1610,  684,  679,  681,  682,  683,  680,
 /*  8190 */  1610, 1610, 1610,  293, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8200 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /*  8210 */   637,  638,  639,  640,  621, 1610, 1610, 1610,  822, 1610,
 /*  8220 */   825,  826,  827, 1610,  285, 1610, 1610,  824, 1610, 1610,
 /*  8230 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8240 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8250 */  1610, 1610,  613,  614,  615, 1610, 1610, 1610, 1610,  612,
 /*  8260 */  1610, 1610,  601,  357,  132,  582, 1610, 1610, 1610, 1610,
 /*  8270 */  1610, 1610, 1610, 1610, 1610,  822, 1610,  825,  826,  827,
 /*  8280 */  1610,  285, 1610, 1610,  824, 1610, 1610, 1610, 1610, 1610,
 /*  8290 */  1610, 1610,  210, 1610,  211, 1610, 1610,  917, 1610,  624,
 /*  8300 */  1610,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  8310 */   380,  623,  620, 1610, 1610, 1610,  611,  815,  816,  604,
 /*  8320 */   357,  132,  582,  823,  828, 1610, 1610, 1610, 1610, 1610,
 /*  8330 */  1610, 1610, 1610,  624, 1610,  625, 1610, 1610,  822, 1610,
 /*  8340 */   825,  826,  827, 1610,  380,  623,  620,  824, 1610,  210,
 /*  8350 */  1610,  211, 1610, 1610, 1610,  822, 1610,  825,  826,  827,
 /*  8360 */  1610, 1610, 1610, 1610,  824,  624, 1610,  625, 1610, 1610,
 /*  8370 */  1610, 1610, 1610, 1610,  815,  816,  380,  623,  620, 1610,
 /*  8380 */   823,  828, 1610, 1610, 1610, 1610, 1610, 1610,  880, 1610,
 /*  8390 */   624,  557,  625, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8400 */  1610,  380,  623,  620, 1610,  902, 1610, 1610,  557, 1610,
 /*  8410 */  1610, 1610,  184, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8420 */  1610,  186, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  184,
 /*  8430 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  186,  869,
 /*  8440 */   870, 1610, 1610,  823,  828, 1610, 1610, 1610, 1610, 1610,
 /*  8450 */  1610, 1610, 1610,  624, 1610,  625,  869,  870, 1610, 1610,
 /*  8460 */   823,  828, 1610, 1610,  380,  623,  620, 1610, 1610, 1610,
 /*  8470 */   624, 1610,  625, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8480 */  1610,  380,  623,  620,  822, 1610,  825,  826,  827, 1610,
 /*  8490 */   581, 1610,  822,  824,  825,  826,  827, 1610,  584, 1610,
 /*  8500 */  1610,  824, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8510 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8520 */  1610, 1610, 1610, 1610, 1610, 1610,  822, 1610,  825,  826,
 /*  8530 */   827,  582,  586, 1610, 1610,  824, 1610, 1610, 1610,  582,
 /*  8540 */   822, 1610,  825,  826,  827, 1610, 1009, 1610, 1610,  824,
 /*  8550 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  210, 1610,
 /*  8560 */   211, 1610, 1610, 1610, 1610, 1610,  210, 1610,  211, 1610,
 /*  8570 */  1610, 1610, 1610,  582, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8580 */  1610, 1610, 1610,  815,  816, 1610, 1610,  582, 1610,  823,
 /*  8590 */   828,  815,  816, 1610, 1610, 1610, 1610,  823,  828,  624,
 /*  8600 */   210,  625,  211, 1610, 1610, 1610, 1610,  624, 1610,  625,
 /*  8610 */   380,  623,  620, 1610,  210, 1610,  211, 1610,  380,  623,
 /*  8620 */   620, 1610, 1610, 1610, 1610,  815,  816, 1610, 1610, 1610,
 /*  8630 */  1610,  823,  828, 1610, 1610, 1610, 1610, 1610, 1610,  815,
 /*  8640 */   816,  624, 1610,  625, 1610,  823,  828, 1610, 1610, 1610,
 /*  8650 */  1610, 1610,  380,  623,  620,  624, 1610,  625, 1610, 1610,
 /*  8660 */  1610, 1610, 1610, 1610, 1610, 1610,  380,  623,  620,  822,
 /*  8670 */  1610,  825,  826,  827, 1610,  603, 1610,  822,  824,  825,
 /*  8680 */   826,  827, 1610, 1013, 1610, 1610,  824, 1610, 1610, 1610,
 /*  8690 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8700 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8710 */  1610, 1610, 1610, 1610, 1610, 1610,  582,  822, 1610,  825,
 /*  8720 */   826,  827, 1610, 1610,  582,  822,  824,  825,  826,  827,
 /*  8730 */  1610, 1610, 1610, 1610,  824, 1610, 1610, 1610, 1610, 1610,
 /*  8740 */  1610, 1610, 1610,  210, 1610,  211, 1610, 1610, 1610, 1610,
 /*  8750 */  1610,  210, 1610,  211, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8760 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  811,  815,  816,
 /*  8770 */   557, 1610, 1610, 1610,  823,  828,  815,  816,  879,  558,
 /*  8780 */  1610, 1610,  823,  828,  624, 1610,  625, 1610, 1610, 1610,
 /*  8790 */  1610,  184,  624, 1610,  625,  380,  623,  620, 1610,  184,
 /*  8800 */   186, 1610, 1610,  380,  623,  620, 1610, 1610,  186, 1610,
 /*  8810 */  1610,  822, 1610,  825,  826,  827, 1610, 1610,  869,  870,
 /*  8820 */   824, 1610,  823,  828, 1610, 1610,  869,  870, 1610, 1610,
 /*  8830 */   823,  828,  624, 1610,  625, 1610, 1610, 1610, 1610, 1610,
 /*  8840 */   624, 1610,  625,  380,  623,  620, 1610, 1610, 1610, 1610,
 /*  8850 */  1610,  380,  623,  620, 1610, 1610,  822, 1610,  825,  826,
 /*  8860 */   827, 1610, 1610, 1610, 1610,  824, 1610, 1610, 1610, 1610,
 /*  8870 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8880 */  1610, 1610, 1610, 1610, 1610,  873, 1610, 1610, 1610, 1610,
 /*  8890 */  1610, 1610, 1610, 1610,  874, 1610,  334, 1610,  339, 1610,
 /*  8900 */  1610,  822, 1610,  825,  826,  827, 1610, 1610, 1610, 1610,
 /*  8910 */   824, 1610,  869,  870, 1610, 1610,  823,  828, 1610, 1610,
 /*  8920 */  1610, 1610, 1610, 1610, 1610, 1610,  624, 1610,  625, 1610,
 /*  8930 */   820, 1610,  821, 1610,  840, 1610,  335,  380,  623,  620,
 /*  8940 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  8950 */  1610, 1610, 1610, 1610, 1610,  815,  816, 1610, 1610, 1610,
 /*  8960 */  1610,  823,  828,  822, 1610,  825,  826,  827, 1610, 1610,
 /*  8970 */  1610,  624,  824,  625, 1610,  820, 1610,  821, 1610,  336,
 /*  8980 */  1610,  335,  380,  623,  620, 1610, 1610, 1610, 1610, 1610,
 /*  8990 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9000 */   815,  816, 1610, 1610, 1610, 1610,  823,  828,  822, 1610,
 /*  9010 */   825,  826,  827, 1610, 1610, 1610,  624,  824,  625, 1610,
 /*  9020 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  380,  623,  620,
 /*  9030 */  1610, 1610, 1610, 1610, 1610, 1610, 1610,  820, 1610,  821,
 /*  9040 */  1610,  817, 1610,  335,  822, 1610,  825,  826,  827, 1610,
 /*  9050 */  1610, 1610, 1610,  824, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9060 */  1610, 1610,  815,  816, 1610, 1610, 1610, 1610,  823,  828,
 /*  9070 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  624, 1610,
 /*  9080 */   625, 1610,  820, 1610,  821, 1610, 1610, 1610,  832,  380,
 /*  9090 */   623,  620, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9100 */  1610,  822, 1610,  825,  826,  827, 1610,  815,  816, 1610,
 /*  9110 */   824,  154, 1610,  823,  828, 1610, 1610, 1610,  820, 1610,
 /*  9120 */   821, 1610,  837,  624,  335,  625, 1610, 1610, 1610, 1610,
 /*  9130 */  1610, 1610, 1610, 1610,  380,  623,  620, 1610, 1610, 1610,
 /*  9140 */  1610, 1610, 1610,  815,  816, 1610, 1610, 1610, 1610,  823,
 /*  9150 */   828, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  624,
 /*  9160 */   822,  625,  825,  826,  827, 1610, 1610, 1610, 1610,  824,
 /*  9170 */   380,  623,  620, 1610, 1610,  820, 1610,  821, 1610,  841,
 /*  9180 */  1610,  335, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9190 */  1610, 1610, 1610,  822, 1610,  825,  826,  827, 1610, 1610,
 /*  9200 */   815,  816,  824, 1610, 1610, 1610,  823,  828, 1610, 1610,
 /*  9210 */  1610, 1610, 1610, 1610, 1610, 1610,  624, 1610,  625, 1610,
 /*  9220 */  1610, 1610,  822, 1610,  825,  826,  827,  380,  623,  620,
 /*  9230 */  1610,  824, 1610, 1610,  820, 1610,  821, 1610,  866, 1610,
 /*  9240 */   335, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9250 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  815,
 /*  9260 */   816, 1610, 1610, 1610, 1610,  823,  828,  820, 1610,  821,
 /*  9270 */  1610,  867, 1610,  335, 1610,  624, 1610,  625, 1610, 1610,
 /*  9280 */  1610, 1610, 1610, 1610, 1610, 1610,  380,  623,  620, 1610,
 /*  9290 */  1610, 1610,  815,  816, 1610, 1610,  873, 1610,  823,  828,
 /*  9300 */  1610, 1610, 1610, 1610, 1610,  874, 1610,  340,  624,  339,
 /*  9310 */   625, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  380,
 /*  9320 */   623,  620, 1610,  869,  870, 1610, 1610,  823,  828,  822,
 /*  9330 */  1610,  825,  826,  827, 1610, 1610, 1610,  624,  824,  625,
 /*  9340 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  380,  623,
 /*  9350 */   620, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9360 */  1610, 1610, 1610, 1610,  822, 1610,  825,  826,  827, 1610,
 /*  9370 */  1610, 1610, 1610,  824, 1610, 1610, 1610, 1610,  822, 1610,
 /*  9380 */   825,  826,  827, 1610, 1610, 1610, 1610,  824, 1610, 1610,
 /*  9390 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9400 */  1610, 1610, 1610,  873, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9410 */  1610, 1610,  874, 1610,  901, 1610,  875,  557, 1610, 1610,
 /*  9420 */  1610, 1610, 1610, 1610, 1610,  948,  583, 1610, 1610, 1610,
 /*  9430 */   869,  870, 1610,  155,  823,  828, 1610, 1610,  184, 1610,
 /*  9440 */  1610, 1610, 1610, 1610,  624, 1610,  625,  186, 1610, 1610,
 /*  9450 */  1610, 1610,  210, 1610,  211,  380,  623,  620, 1610, 1610,
 /*  9460 */  1610, 1610, 1610, 1610, 1610,  869,  870, 1610, 1610,  823,
 /*  9470 */   828, 1610, 1610, 1610, 1610, 1610, 1610,  815,  816,  624,
 /*  9480 */  1610,  625, 1610,  823,  828, 1610, 1610, 1610, 1610, 1610,
 /*  9490 */   380,  623,  620,  624,  822,  625,  825,  826,  827, 1610,
 /*  9500 */  1008, 1610, 1610,  824,  380,  623,  620, 1610,  822, 1610,
 /*  9510 */   825,  826,  827, 1610, 1012, 1610, 1610,  824, 1610, 1610,
 /*  9520 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9530 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9540 */  1610,  582, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9550 */  1610, 1610, 1610, 1610, 1610,  582, 1610, 1610, 1610, 1610,
 /*  9560 */  1610, 1610, 1610,  822, 1610,  825,  826,  827,  210, 1610,
 /*  9570 */   211, 1610,  824, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9580 */  1610, 1610,  210, 1610,  211, 1610, 1610, 1610, 1610, 1610,
 /*  9590 */  1610, 1610, 1610,  815,  816, 1610, 1610, 1610, 1610,  823,
 /*  9600 */   828,  822, 1610,  825,  826,  827, 1610,  815,  816,  624,
 /*  9610 */   824,  625, 1610,  823,  828, 1610, 1610, 1610, 1610, 1610,
 /*  9620 */   380,  623,  620,  624, 1610,  625, 1610, 1610, 1610, 1610,
 /*  9630 */  1610, 1610, 1610, 1610,  380,  623,  620,  820, 1610,  821,
 /*  9640 */  1610, 1610, 1610,  819, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9650 */  1610,  822, 1610,  825,  826,  827, 1610, 1610, 1610, 1610,
 /*  9660 */   824, 1610,  815,  816, 1610, 1610, 1610, 1610,  823,  828,
 /*  9670 */  1610, 1610, 1610, 1610, 1610,  873, 1610, 1610,  624, 1610,
 /*  9680 */   625, 1610, 1610, 1610,  874, 1610, 1610, 1610,  872,  380,
 /*  9690 */   623,  620, 1610, 1610, 1610, 1610,  822, 1610,  825,  826,
 /*  9700 */   827, 1610,  869,  870,  812,  824,  823,  828, 1610, 1610,
 /*  9710 */  1610, 1610, 1610, 1610, 1610, 1610,  624, 1610,  625, 1610,
 /*  9720 */  1610, 1610, 1610, 1610, 1610,  184, 1610,  380,  623,  620,
 /*  9730 */  1610, 1610, 1610, 1610,  186, 1610, 1610, 1610, 1610, 1610,
 /*  9740 */   822, 1610,  825,  826,  827, 1610, 1610, 1610, 1610,  824,
 /*  9750 */  1610, 1610,  869,  870, 1610, 1610,  823,  828, 1610, 1610,
 /*  9760 */  1610, 1610, 1610, 1610, 1610, 1610,  624, 1610,  625, 1610,
 /*  9770 */   820, 1610,  821, 1610, 1610, 1610,  814,  380,  623,  620,
 /*  9780 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  822, 1610,
 /*  9790 */   825,  826,  827, 1610, 1610,  815,  816,  824, 1610, 1610,
 /*  9800 */  1610,  823,  828, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9810 */  1610,  624, 1610,  625,  820, 1610,  821, 1610, 1610, 1610,
 /*  9820 */   839, 1610,  380,  623,  620, 1610, 1610, 1610, 1610, 1610,
 /*  9830 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  815,
 /*  9840 */   816, 1610, 1610, 1610, 1610,  823,  828,  822, 1610,  825,
 /*  9850 */   826,  827, 1610, 1610, 1610,  624,  824,  625, 1610, 1610,
 /*  9860 */  1610, 1610,  873, 1610, 1610, 1610,  380,  623,  620, 1610,
 /*  9870 */  1610,  874, 1610, 1610, 1610,  868, 1610, 1610, 1610, 1610,
 /*  9880 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  869,
 /*  9890 */   870, 1610, 1610,  823,  828, 1610, 1610, 1610, 1610, 1610,
 /*  9900 */  1610, 1610, 1610,  624, 1610,  625, 1610, 1610, 1610, 1610,
 /*  9910 */  1610, 1610, 1610, 1610,  380,  623,  620, 1610, 1610, 1610,
 /*  9920 */  1610,  873, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  822,
 /*  9930 */   874,  825,  826,  827,  877, 1610, 1610, 1610,  824, 1610,
 /*  9940 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  869,  870,
 /*  9950 */  1610, 1610,  823,  828, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9960 */  1610, 1610,  624, 1610,  625, 1610, 1610, 1610, 1610, 1610,
 /*  9970 */  1610, 1610, 1610,  380,  623,  620,  945, 1610, 1610, 1610,
 /*  9980 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /*  9990 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /* 10000 */  1610, 1610, 1610,  210, 1610,  211, 1610, 1610, 1610, 1610,
 /* 10010 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,
 /* 10020 */  1610, 1610, 1610, 1610, 1610, 1610, 1610, 1610,  815,  816,
 /* 10030 */  1610, 1610, 1610, 1610,  823,  828, 1610, 1610, 1610, 1610,
 /* 10040 */  1610, 1610, 1610, 1610,  624, 1610,  625, 1610, 1610, 1610,
 /* 10050 */  1610, 1610, 1610, 1610, 1610,  380,  623,  620,
);
static $yy_lookahead = array(
 /*     0 */     3,    2,   50,    6,    5,    8,    7,   10,   11,  197,
 /*    10 */   198,    3,  184,   14,    6,  203,  204,   18,   19,  191,
 /*    20 */   192,  193,  196,  197,  198,  194,   29,  197,  198,  203,
 /*    30 */   204,    5,   33,  203,  204,   36,   37,   38,   39,  296,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,   48,  156,  157,
 /*    50 */   158,  159,  184,  185,  186,  187,  188,  189,   50,   51,
 /*    60 */   310,  193,  178,   66,  180,   68,  235,  236,   71,   72,
 /*    70 */   239,  240,  241,  242,  243,  244,  245,  246,  194,   82,
 /*    80 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*    90 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   100 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   110 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*   120 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   130 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   140 */   312,  219,  220,  146,  147,  148,  149,  150,  151,  152,
 /*   150 */   153,  154,  155,  156,  157,  158,  159,  160,    3,    2,
 /*   160 */   310,    6,    5,    8,  184,  297,   11,  299,  160,  301,
 /*   170 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*   180 */   312,  219,  220,  194,   29,   17,   15,   15,   17,   17,
 /*   190 */    33,   20,   20,   36,   37,   38,   39,  279,   41,   42,
 /*   200 */    43,   44,   45,   46,   47,   48,  298,  299,   28,  301,
 /*   210 */    30,  184,  185,  186,  187,  188,  189,   49,   24,   25,
 /*   220 */   193,   66,   28,   68,   30,  236,   71,   72,  239,  240,
 /*   230 */   241,  242,  243,  244,  245,  246,  193,   82,   83,   84,
 /*   240 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*   250 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   260 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*   270 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*   280 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*   290 */   135,  136,  137,  138,  139,  140,  141,  142,  225,  226,
 /*   300 */   227,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*   310 */   155,  156,  157,  158,  159,  160,    3,   25,    3,    6,
 /*   320 */    28,    6,   30,   10,   11,  184,  299,   21,  301,  302,
 /*   330 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*   340 */    34,  206,   29,  208,  209,  210,  211,  212,  213,  214,
 /*   350 */   215,  216,  217,  218,   16,  312,   50,   51,   52,  224,
 /*   360 */   225,   75,   76,   77,   78,   79,   80,   81,   82,  184,
 /*   370 */   185,  186,  187,  188,  189,  219,  220,   62,  193,   66,
 /*   380 */   299,   68,  301,  252,   71,   72,   71,   72,    3,  219,
 /*   390 */   220,    6,  251,  193,   56,   82,   83,   84,   85,   86,
 /*   400 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*   410 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   420 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*   430 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*   440 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   450 */   137,  138,  139,  140,  141,  142,   71,   72,  253,  146,
 /*   460 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*   470 */   157,  158,  159,  160,    3,  160,   15,    6,   17,    8,
 /*   480 */   280,  281,   11,  173,  299,  175,  301,  302,  303,  304,
 /*   490 */   305,  306,  307,  308,  309,  310,  311,  312,  178,  206,
 /*   500 */    29,  208,  209,  210,  211,  212,  213,  214,  215,  216,
 /*   510 */   217,  218,  312,   22,  194,   24,   25,  224,  225,   28,
 /*   520 */     3,   30,   31,    6,  184,  185,  186,  187,  188,  189,
 /*   530 */   174,  175,   22,  193,   24,   25,  193,   66,   28,   68,
 /*   540 */    30,  256,   71,   72,  198,  160,  225,  226,  227,  203,
 /*   550 */   204,   34,  255,   82,   83,   84,   85,   86,   87,   88,
 /*   560 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*   570 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   580 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*   590 */   119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
 /*   600 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   610 */   139,  140,  141,  142,  173,  184,  175,  146,  147,  148,
 /*   620 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*   630 */   159,  160,    3,   71,   72,    6,  205,    8,  184,  299,
 /*   640 */    11,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*   650 */   310,  311,  312,  193,    3,  312,   33,    6,   29,   36,
 /*   660 */    37,   38,   39,   21,   41,   42,   43,   44,   45,   46,
 /*   670 */    47,   48,  177,  178,  300,  180,   34,  160,  247,  248,
 /*   680 */   300,  221,  184,  185,  186,  187,  188,  189,  256,  194,
 /*   690 */   257,  193,   50,   51,   52,   66,  184,   68,  282,  177,
 /*   700 */    71,   72,  180,  198,  192,  193,  193,  193,  203,  204,
 /*   710 */   257,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   720 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*   730 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   740 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   750 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*   760 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   770 */   141,  142,  312,  261,  184,  146,  147,  148,  149,  150,
 /*   780 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*   790 */     3,  277,  278,    6,  281,    8,  184,  299,   11,  301,
 /*   800 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*   810 */   312,  160,   21,  193,    3,   17,   29,    6,  177,  178,
 /*   820 */   179,  180,  184,  198,  312,  312,  312,   16,  203,  204,
 /*   830 */   192,  193,  178,  184,  180,  194,  195,  196,  197,  198,
 /*   840 */    29,   50,   51,   52,  203,  204,   48,   49,  194,    2,
 /*   850 */    47,   48,    5,   66,  184,   68,  184,  185,   71,   72,
 /*   860 */   184,  189,  192,  193,  193,  193,  226,  227,   57,   82,
 /*   870 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*   880 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   890 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   900 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*   910 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   920 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   930 */   184,  261,  312,  146,  147,  148,  149,  150,  151,  152,
 /*   940 */   153,  154,  155,  156,  157,  158,  159,  160,    3,   11,
 /*   950 */   312,    6,  281,    8,  224,  225,   11,  146,  147,  148,
 /*   960 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*   970 */   159,  160,    3,  300,   29,    6,  304,  305,  306,  307,
 /*   980 */   308,  309,  312,  312,  312,   16,   15,  300,   17,   17,
 /*   990 */    17,   20,   20,   22,   56,   24,   25,  300,   29,   28,
 /*  1000 */   257,   30,  177,  178,  257,  180,  184,  226,  227,   71,
 /*  1010 */    72,   66,  193,   68,  192,  193,   71,   72,  198,  194,
 /*  1020 */   193,   48,   49,  203,  204,  256,   57,   82,   83,   84,
 /*  1030 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  1040 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1050 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1060 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  1070 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1080 */   135,  136,  137,  138,  139,  140,  141,  142,  226,  227,
 /*  1090 */   180,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1100 */   155,  156,  157,  158,  159,  160,    3,   13,  281,    6,
 /*  1110 */    10,    8,  226,  227,   11,  146,  147,  148,  149,  150,
 /*  1120 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  1130 */     3,  312,   29,    6,  312,  178,  179,  180,  184,  312,
 /*  1140 */    13,  177,  178,  178,  180,  180,  192,  193,  178,   13,
 /*  1150 */   180,  194,  195,  196,  197,  198,   29,   63,  194,  194,
 /*  1160 */   203,  204,  177,  178,  194,  180,   66,   67,   32,   66,
 /*  1170 */   193,   68,  219,  184,   71,   72,  227,  193,   31,  194,
 /*  1180 */   169,  192,  193,  169,   57,   82,   83,   84,   85,   86,
 /*  1190 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*  1200 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1210 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1220 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*  1230 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1240 */   137,  138,  139,  140,  141,  142,  229,  230,  169,  146,
 /*  1250 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*  1260 */   157,  158,  159,  160,    3,   13,  312,    6,   13,    8,
 /*  1270 */   169,   17,   11,  146,  147,  148,  149,  150,  151,  152,
 /*  1280 */   153,  154,  155,  156,  157,  158,  159,  160,    3,  312,
 /*  1290 */    29,    6,  177,  178,  179,  180,  312,    3,   13,  184,
 /*  1300 */     6,  312,    3,   49,  193,    6,   34,  192,  193,  194,
 /*  1310 */   195,  196,  197,  198,   29,   21,   61,   30,  203,  204,
 /*  1320 */    21,   13,   50,   71,   72,   12,   13,   66,  204,   68,
 /*  1330 */   193,   28,   71,   72,  144,  145,  193,  203,  193,  193,
 /*  1340 */    32,   73,   57,   82,   83,   84,   85,   86,   87,   88,
 /*  1350 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*  1360 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1370 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  1380 */   119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
 /*  1390 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1400 */   139,  140,  141,  142,   12,   13,  292,  146,  147,  148,
 /*  1410 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*  1420 */   159,  160,    3,  312,   74,    6,  294,  312,   17,   17,
 /*  1430 */    11,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1440 */   155,  156,  157,  158,  159,  160,  169,    3,   29,  312,
 /*  1450 */     6,  178,  179,  180,  160,  312,  179,  312,  312,  160,
 /*  1460 */    49,   49,   12,   13,   17,   17,   17,  194,  195,  196,
 /*  1470 */   197,  198,  195,  196,  197,  198,  203,  204,   34,   15,
 /*  1480 */   203,  204,   12,   13,  194,   66,  169,   68,   32,  194,
 /*  1490 */    71,   72,  194,  270,   50,   51,   49,   49,   49,   61,
 /*  1500 */   265,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*  1510 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*  1520 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1530 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  1540 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  1550 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1560 */   141,  142,   11,  184,   11,  146,  147,  148,  149,  150,
 /*  1570 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  1580 */     3,   13,   32,    6,  205,    8,    9,   10,   11,   17,
 /*  1590 */   164,  165,  166,  167,  168,  179,  170,  171,  172,  173,
 /*  1600 */   174,  175,  176,  263,  160,   16,   29,   56,   63,   56,
 /*  1610 */    11,  195,  196,  197,  198,   16,  274,  276,   64,  203,
 /*  1620 */   204,   49,   17,   61,  193,  272,  247,  248,  270,  193,
 /*  1630 */   193,   63,  206,  194,  208,  209,  210,  211,  212,  213,
 /*  1640 */   214,  215,  216,  217,  218,   56,  194,  194,   71,   72,
 /*  1650 */   224,  225,  221,    3,   49,   56,    6,  221,  221,   82,
 /*  1660 */    10,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1670 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1680 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1690 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1700 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1710 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1720 */    11,   71,   72,  146,  147,  148,  149,  150,  151,  152,
 /*  1730 */   153,  154,  155,  156,  157,  158,  159,  160,    3,   59,
 /*  1740 */     7,    6,  194,  312,   13,   10,   11,   14,  312,  312,
 /*  1750 */   194,   18,   19,  254,   10,  168,  207,  170,  171,  172,
 /*  1760 */    10,   13,   32,  176,   29,   56,   33,  194,  194,   36,
 /*  1770 */    37,   38,   39,   11,   41,   42,   43,   44,   45,   46,
 /*  1780 */    47,   48,  175,  182,   17,  184,  185,  186,  187,  188,
 /*  1790 */   189,   50,   61,  206,  193,  208,  209,  210,  211,  212,
 /*  1800 */   213,  214,  215,  216,  217,  218,   71,   72,   64,   61,
 /*  1810 */   160,  224,  225,  219,   64,  219,   49,   82,   56,   84,
 /*  1820 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  1830 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1840 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1850 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  1860 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1870 */   135,  136,  137,  138,  139,  140,  141,  142,   13,   13,
 /*  1880 */    13,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1890 */   155,  156,  157,  158,  159,  160,    3,  219,   15,    6,
 /*  1900 */   299,   15,  301,   10,   11,  304,  305,  306,  307,  308,
 /*  1910 */   309,  310,  311,  312,   31,  222,  230,  193,  193,  222,
 /*  1920 */    15,   13,   29,   13,   13,  223,   61,   61,   61,  223,
 /*  1930 */   194,  194,  194,   50,  194,  223,   53,   54,   55,  193,
 /*  1940 */   169,   58,  169,   60,  169,  221,  221,  182,  194,  184,
 /*  1950 */   185,  186,  187,  188,  189,  194,  169,  194,  193,   32,
 /*  1960 */   194,  184,  185,  194,   71,   72,  189,  221,  194,   61,
 /*  1970 */   193,   61,   61,  194,  194,   82,  199,   84,   85,   86,
 /*  1980 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*  1990 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2000 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  2010 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*  2020 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2030 */   137,  138,  139,  140,  141,  142,  312,  312,  207,  146,
 /*  2040 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*  2050 */   157,  158,  159,  160,    3,    0,    3,    6,  312,    6,
 /*  2060 */     0,   15,   11,   15,  299,   15,  301,   29,   29,  304,
 /*  2070 */   305,  306,  307,  308,  309,  310,  311,  312,  179,   23,
 /*  2080 */    29,  304,  305,  306,  307,  308,  309,   34,   11,  312,
 /*  2090 */    73,   13,   74,   11,  195,  196,  197,  198,   11,  193,
 /*  2100 */   193,   13,  203,  204,   11,  182,  193,  184,  185,  186,
 /*  2110 */   187,  188,  189,   61,   13,   11,  193,   11,   13,   11,
 /*  2120 */    13,   56,   71,   72,   71,   72,   13,  221,  221,   13,
 /*  2130 */    11,   13,  193,   82,  221,   84,   85,   86,   87,   88,
 /*  2140 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*  2150 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2160 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  2170 */   119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
 /*  2180 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2190 */   139,  140,  141,  142,   11,   13,   11,  146,  147,  148,
 /*  2200 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*  2210 */   159,  160,    3,  160,  275,    6,  277,  278,  312,  312,
 /*  2220 */    11,   13,  299,  179,  301,  312,   11,  304,  305,  306,
 /*  2230 */   307,  308,  309,  310,  311,  312,   13,   11,   29,  195,
 /*  2240 */   196,  197,  198,   13,   11,   13,   11,  203,  204,   13,
 /*  2250 */    13,  312,   11,   11,  179,   61,   13,   11,  179,   61,
 /*  2260 */   184,  185,  186,  187,  188,  189,   13,   11,   61,  193,
 /*  2270 */   195,  196,  197,  198,  195,  196,  197,  198,  203,  204,
 /*  2280 */    71,   72,  203,  204,   13,   11,   61,   11,   13,   61,
 /*  2290 */    13,   82,   11,   84,   85,   86,   87,   88,   89,   90,
 /*  2300 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*  2310 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  2320 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  2330 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  2340 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  2350 */   141,  142,   13,   11,   13,  146,  147,  148,  149,  150,
 /*  2360 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  2370 */     3,   11,   13,    6,   11,  299,   11,  301,   11,  303,
 /*  2380 */   304,  305,  306,  307,  308,  309,  310,  311,  312,   13,
 /*  2390 */    13,   11,  193,   26,   27,   13,   11,   13,   11,   13,
 /*  2400 */   184,  185,   56,   56,   56,  189,   11,  193,  135,  193,
 /*  2410 */    13,   11,   13,   11,   13,   11,   13,  201,  202,   11,
 /*  2420 */   221,   11,  183,  184,  185,  186,  187,  188,  189,   13,
 /*  2430 */    13,   61,  193,   61,   11,  221,   61,   13,   71,   72,
 /*  2440 */    11,   13,   61,   11,   61,   11,   13,   11,   13,   82,
 /*  2450 */    13,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  2460 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2470 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2480 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  2490 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2500 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2510 */     3,  312,   11,    6,   11,   13,   11,   13,   11,   13,
 /*  2520 */   304,  305,  306,  307,  308,  309,  312,  160,  312,   11,
 /*  2530 */   291,   61,  293,   13,  295,   11,  297,   61,  299,   13,
 /*  2540 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  2550 */   311,  312,  183,  184,  185,  186,  187,  188,  189,   11,
 /*  2560 */    61,   61,  193,  184,  185,   13,   23,   13,  189,   11,
 /*  2570 */    13,   75,  193,   13,   11,   13,   11,   13,   71,   72,
 /*  2580 */    11,  202,   11,   13,  143,   11,   13,   11,   13,   82,
 /*  2590 */    13,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  2600 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2610 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2620 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  2630 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2640 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2650 */     3,  143,    3,    6,   75,    6,   13,   16,   11,   13,
 /*  2660 */   291,   13,  293,   13,  295,   13,  297,  160,  299,   13,
 /*  2670 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  2680 */   311,  312,   13,  304,  305,  306,  307,  308,  309,  179,
 /*  2690 */    13,  312,  183,  184,  185,  186,  187,  188,  189,   13,
 /*  2700 */    13,   13,  193,   13,   13,  195,  196,  197,  198,   16,
 /*  2710 */     4,   62,  193,  203,  204,    4,   32,   32,   71,   72,
 /*  2720 */   183,  184,  185,  186,  187,  188,  189,   61,   70,   82,
 /*  2730 */   193,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  2740 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2750 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2760 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  2770 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2780 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2790 */     3,   63,  273,    6,  275,   64,  277,  278,   11,   13,
 /*  2800 */   291,   61,  293,   70,  295,   11,  297,  160,  299,  160,
 /*  2810 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  2820 */   311,  312,   12,   59,   13,   13,   13,   13,  291,  185,
 /*  2830 */   293,  312,  295,  189,  297,   81,  299,  193,  301,  302,
 /*  2840 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  2850 */   183,  184,  185,  186,  187,  188,  189,   11,   13,   15,
 /*  2860 */   193,  193,   13,   16,    4,    4,   16,   15,   32,   82,
 /*  2870 */    16,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  2880 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  2890 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  2900 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  2910 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  2920 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  2930 */     3,    3,    3,    6,    6,    6,  268,    6,   11,   11,
 /*  2940 */    11,  273,    3,  275,    4,  277,  278,  160,  304,  305,
 /*  2950 */   306,  307,  308,  309,    3,   35,  312,    4,  291,   35,
 /*  2960 */   293,   40,  295,   40,  297,   40,  299,   15,  301,  302,
 /*  2970 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  2980 */   312,   40,  183,  184,  185,  186,  187,  188,  189,   40,
 /*  2990 */    62,   62,  193,   65,   65,   40,   68,   68,   16,   71,
 /*  3000 */    72,  184,  185,  186,  187,  188,  189,   16,   16,   82,
 /*  3010 */   193,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  3020 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3030 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3040 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  3050 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  3060 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3070 */     3,    3,   32,    6,    6,  313,  313,  313,   11,   11,
 /*  3080 */   313,  313,  313,    3,  313,  313,    6,  160,  160,  160,
 /*  3090 */   291,   11,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  3100 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  3110 */   311,  312,  295,  313,  297,  179,  299,  313,  301,  302,
 /*  3120 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  3130 */    62,  195,  196,  197,  198,  193,   68,  313,  313,  203,
 /*  3140 */   204,  184,   62,  313,  313,   65,  313,  313,  313,   82,
 /*  3150 */   193,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  3160 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  3170 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  3180 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  3190 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  3200 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  3210 */     3,  193,  313,    6,    7,  273,  313,  275,   11,  277,
 /*  3220 */   278,  313,   15,   16,  313,  268,  313,  160,  160,  313,
 /*  3230 */   273,  313,  275,  313,  277,  278,   29,  313,   31,  313,
 /*  3240 */   160,  167,    3,  313,  313,    6,  313,  173,  174,  175,
 /*  3250 */   313,  185,   13,  313,  312,  189,  313,   50,  313,  193,
 /*  3260 */    53,   54,   55,   56,  167,   58,  200,   60,  313,  312,
 /*  3270 */   173,  174,  175,  313,  313,  313,   69,  313,   71,   72,
 /*  3280 */   206,  313,  208,  209,  210,  211,  212,  213,  214,  215,
 /*  3290 */   216,  217,  218,  275,  313,  277,  278,  313,  224,  225,
 /*  3300 */   179,   62,  313,  206,   65,  208,  209,  210,  211,  212,
 /*  3310 */   213,  214,  215,  216,  217,  218,  195,  196,  197,  198,
 /*  3320 */   313,  224,  225,  313,  203,  204,  176,  313,  313,   66,
 /*  3330 */   312,  181,  313,  313,  184,  313,  186,  187,  188,  313,
 /*  3340 */   313,  313,  313,  193,  194,  313,   83,    3,  313,  313,
 /*  3350 */     6,  313,  313,  146,  147,  148,  149,  150,  151,  152,
 /*  3360 */   153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
 /*  3370 */   304,  305,  306,  307,  308,  309,  313,  313,  312,  313,
 /*  3380 */   313,  313,  313,  233,  234,  235,  236,  237,  313,  239,
 /*  3390 */   240,  241,  242,  243,  244,  245,  246,    3,  313,  160,
 /*  3400 */     6,  313,  313,  313,  313,   11,   62,  313,  258,   65,
 /*  3410 */    16,  148,  149,  150,  151,  152,  153,  267,  313,  313,
 /*  3420 */   313,    3,  313,   29,    6,  313,  313,  313,  313,   11,
 /*  3430 */   313,  313,  313,  313,   16,  285,  286,  313,  313,  289,
 /*  3440 */   290,   66,  313,  313,   50,    3,  313,   29,    6,  299,
 /*  3450 */    56,  301,    3,  313,  313,    6,  313,  313,   83,  313,
 /*  3460 */   310,  311,  312,   69,  313,   71,   72,  313,   50,    3,
 /*  3470 */     4,  313,    6,  313,   56,  313,   34,   11,  313,  313,
 /*  3480 */   313,  313,  313,   34,  313,  313,  313,   69,  313,   71,
 /*  3490 */    72,    3,   50,   51,    6,   29,  313,  313,  313,   50,
 /*  3500 */    51,  313,  313,   15,  160,   17,  313,  313,   20,  313,
 /*  3510 */    22,  313,   24,   25,  313,  313,   28,  313,   30,  313,
 /*  3520 */   313,  313,   56,  148,  149,  150,  151,  152,  153,  313,
 /*  3530 */   313,  313,  313,  313,  313,   69,  313,   71,   72,  313,
 /*  3540 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  3550 */   156,  157,  158,  159,  160,  161,  162,  313,  313,   71,
 /*  3560 */    72,  313,  313,  313,  146,  147,  148,  149,  150,  151,
 /*  3570 */   152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
 /*  3580 */   162,    3,    4,  313,    6,  184,  313,  313,  313,   11,
 /*  3590 */   313,  313,  313,  313,  193,  313,  313,  186,  187,  188,
 /*  3600 */   313,  313,  160,  313,  193,  313,  313,   29,  313,  160,
 /*  3610 */   313,  313,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3620 */   154,  155,  156,  157,  158,  159,  160,  161,  162,    3,
 /*  3630 */   313,  313,    6,  313,   56,  313,  313,   11,  186,  187,
 /*  3640 */   188,  313,   16,  313,  313,  193,  313,   69,  160,   71,
 /*  3650 */    72,    3,  313,  313,    6,   29,  313,  313,  313,   11,
 /*  3660 */   249,  250,  313,  313,   16,  313,  313,  266,  313,  268,
 /*  3670 */   313,  313,  313,  313,  273,  179,  275,   29,  277,  278,
 /*  3680 */   313,  313,   56,  313,  313,  313,  313,  313,  313,  313,
 /*  3690 */   179,  195,  196,  197,  198,   69,  313,   71,   72,  203,
 /*  3700 */   204,  249,  250,  313,   56,  313,  195,  196,  197,  198,
 /*  3710 */   299,  313,  301,  312,  203,  204,  313,   69,  313,   71,
 /*  3720 */    72,  310,  311,  312,  146,  147,  148,  149,  150,  151,
 /*  3730 */   152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
 /*  3740 */   162,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3750 */   313,  299,  313,  301,  313,  313,  313,  184,  313,  313,
 /*  3760 */   313,  313,  310,  311,  312,  313,  193,  313,  313,  313,
 /*  3770 */   313,  313,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3780 */   154,  155,  156,  157,  158,  159,  160,  161,  162,  313,
 /*  3790 */   313,  313,  313,  313,  146,  147,  148,  149,  150,  151,
 /*  3800 */   152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
 /*  3810 */   162,    3,  185,  313,    6,  313,  189,  313,  313,   11,
 /*  3820 */   193,  313,  313,  313,   16,  186,  187,  188,    3,    4,
 /*  3830 */   313,    6,  193,  313,  313,  313,   11,   29,  313,  266,
 /*  3840 */   313,  268,  313,  313,  313,  313,  273,  313,  275,  313,
 /*  3850 */   277,  278,  313,  313,   29,  313,  313,  313,    3,  313,
 /*  3860 */   313,    6,  313,  313,   56,  313,   11,  313,  313,  313,
 /*  3870 */   313,   16,  313,  313,  179,    3,    4,   69,    6,   71,
 /*  3880 */    72,   56,  313,   11,   29,  312,  313,  313,  249,  250,
 /*  3890 */   195,  196,  197,  198,   69,  313,   71,   72,  203,  204,
 /*  3900 */   313,   29,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3910 */   313,   56,  313,  313,  184,  313,  313,  313,  313,  313,
 /*  3920 */   313,  313,  192,  193,   69,  313,   71,   72,   56,  313,
 /*  3930 */   313,  304,  305,  306,  307,  308,  309,  313,  299,  312,
 /*  3940 */   301,   69,  313,   71,   72,  313,  313,  313,  313,  310,
 /*  3950 */   311,  312,  313,  313,  146,  147,  148,  149,  150,  151,
 /*  3960 */   152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
 /*  3970 */   162,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  3980 */   155,  156,  157,  158,  159,  160,  161,  162,  184,  259,
 /*  3990 */   313,  261,  313,  313,  313,  313,  313,  193,  313,  313,
 /*  4000 */   313,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4010 */   155,  156,  157,  158,  159,  160,  161,  162,  146,  147,
 /*  4020 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  4030 */   158,  159,  160,  161,  162,    3,  313,  313,    6,  313,
 /*  4040 */   313,  313,  312,   11,  313,   13,  313,  313,  183,  184,
 /*  4050 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  4060 */   313,   29,  313,  313,  313,    3,  313,  313,    6,  313,
 /*  4070 */   266,  313,  268,   11,  313,   13,  184,  273,  313,  275,
 /*  4080 */   313,  277,  278,  313,  192,  193,  313,  313,   56,  313,
 /*  4090 */   313,   29,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4100 */   313,   69,  313,   71,   72,  313,  313,  313,  313,  313,
 /*  4110 */   313,  179,  313,  313,  313,  313,  312,  313,   56,  313,
 /*  4120 */   313,  313,  313,  313,  313,  313,  313,  195,  196,  197,
 /*  4130 */   198,   69,  313,   71,   72,  203,  204,  313,  183,  184,
 /*  4140 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  4150 */   313,  259,  313,  261,  313,  313,  291,  313,  293,  313,
 /*  4160 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  4170 */   305,  306,  307,  308,  309,  310,  311,  312,  146,  147,
 /*  4180 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  4190 */   158,  159,  160,  161,  162,  183,  184,  185,  186,  187,
 /*  4200 */   188,  189,  313,  313,  312,  193,  313,  313,  146,  147,
 /*  4210 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  4220 */   158,  159,  160,  161,  162,  313,  313,  183,  184,  185,
 /*  4230 */   186,  187,  188,  189,  313,  313,  313,  193,  313,  313,
 /*  4240 */   313,  313,  313,  313,  313,  313,  291,  313,  293,  313,
 /*  4250 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  4260 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  313,
 /*  4270 */   313,  179,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  4280 */   313,  313,  193,  313,  313,  313,  313,  195,  196,  197,
 /*  4290 */   198,  313,  313,  313,  313,  203,  204,  313,  313,  313,
 /*  4300 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  4310 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  4320 */   308,  309,  310,  311,  312,  313,  183,  184,  185,  186,
 /*  4330 */   187,  188,  189,  313,  313,  291,  193,  293,  313,  295,
 /*  4340 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4350 */   306,  307,  308,  309,  310,  311,  312,  183,  184,  185,
 /*  4360 */   186,  187,  188,  189,  313,  313,  184,  193,  313,  313,
 /*  4370 */   313,  313,  313,  313,  192,  193,  313,  313,  313,  313,
 /*  4380 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  4390 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  4400 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  4410 */   313,  313,  193,  313,  313,  184,  313,  313,  313,  313,
 /*  4420 */   313,  313,  313,  313,  193,  313,  313,  313,  313,  313,
 /*  4430 */   313,  313,  313,  313,  291,  313,  293,  313,  295,  313,
 /*  4440 */   297,  259,  299,  261,  301,  302,  303,  304,  305,  306,
 /*  4450 */   307,  308,  309,  310,  311,  312,  183,  184,  185,  186,
 /*  4460 */   187,  188,  189,  313,  313,  291,  193,  293,  313,  295,
 /*  4470 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4480 */   306,  307,  308,  309,  310,  311,  312,  183,  184,  185,
 /*  4490 */   186,  187,  188,  189,  312,  313,  313,  193,  313,  268,
 /*  4500 */   313,  313,  313,  313,  273,  313,  275,  313,  277,  278,
 /*  4510 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  4520 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  4530 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  4540 */   313,  313,  193,  312,  313,  313,  313,  313,  313,  313,
 /*  4550 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4560 */   313,  313,  313,  313,  291,  313,  293,  313,  295,  313,
 /*  4570 */   297,  313,  299,  313,  301,  302,  303,  304,  305,  306,
 /*  4580 */   307,  308,  309,  310,  311,  312,  183,  184,  185,  186,
 /*  4590 */   187,  188,  189,  313,  313,  291,  193,  293,  313,  295,
 /*  4600 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4610 */   306,  307,  308,  309,  310,  311,  312,  313,  183,  184,
 /*  4620 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  4630 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4640 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  4650 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  4660 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  4670 */   313,  313,  193,  313,  313,  313,  313,  313,  313,  313,
 /*  4680 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4690 */   313,  313,  313,  313,  291,  313,  293,  313,  295,  313,
 /*  4700 */   297,  313,  299,  313,  301,  302,  303,  304,  305,  306,
 /*  4710 */   307,  308,  309,  310,  311,  312,  313,  183,  184,  185,
 /*  4720 */   186,  187,  188,  189,  313,  313,  291,  193,  293,  313,
 /*  4730 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  4740 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  4750 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  4760 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4770 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  4780 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  4790 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  179,
 /*  4800 */   313,  313,  193,  313,  313,  313,  313,  313,  313,  313,
 /*  4810 */   313,  313,  313,  313,  313,  195,  196,  197,  198,  313,
 /*  4820 */   313,  313,  313,  203,  204,  291,  313,  293,  313,  295,
 /*  4830 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4840 */   306,  307,  308,  309,  310,  311,  312,  183,  184,  185,
 /*  4850 */   186,  187,  188,  189,  313,  313,  291,  193,  293,  313,
 /*  4860 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  4870 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  4880 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  4890 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4900 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  4910 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  4920 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  179,
 /*  4930 */   313,  313,  193,  313,  313,  313,  313,  313,  313,  313,
 /*  4940 */   313,  313,  313,  313,  313,  195,  196,  197,  198,  313,
 /*  4950 */   313,  313,  313,  203,  204,  291,  313,  293,  313,  295,
 /*  4960 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4970 */   306,  307,  308,  309,  310,  311,  312,  183,  184,  185,
 /*  4980 */   186,  187,  188,  189,  313,  313,  291,  193,  293,  313,
 /*  4990 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  5000 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  183,
 /*  5010 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  5020 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5030 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  5040 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5050 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  179,
 /*  5060 */   313,  313,  193,  313,  313,  313,  313,  313,  313,  313,
 /*  5070 */   313,  313,  313,  313,  313,  195,  196,  197,  198,  313,
 /*  5080 */   313,  313,  313,  203,  204,  291,  313,  293,  313,  295,
 /*  5090 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  5100 */   306,  307,  308,  309,  310,  311,  312,  313,  183,  184,
 /*  5110 */   185,  186,  187,  188,  189,  313,  313,  291,  193,  293,
 /*  5120 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5130 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  183,
 /*  5140 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  5150 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5160 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  5170 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5180 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  5190 */   313,  313,  193,  313,  313,  313,  313,  313,  313,  313,
 /*  5200 */   313,  313,  313,  313,  184,  185,  186,  187,  188,  189,
 /*  5210 */   313,  313,  313,  193,  313,  313,  291,  313,  293,  313,
 /*  5220 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  5230 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  5240 */   185,  186,  187,  188,  189,  313,  313,  291,  193,  293,
 /*  5250 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5260 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  183,
 /*  5270 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  5280 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5290 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  5300 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5310 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  299,
 /*  5320 */   313,  301,  193,  303,  304,  305,  306,  307,  308,  309,
 /*  5330 */   310,  311,  312,  313,  184,  185,  186,  187,  188,  189,
 /*  5340 */   313,  313,  313,  193,  313,  313,  291,  313,  293,  313,
 /*  5350 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  5360 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  5370 */   185,  186,  187,  188,  189,  313,  313,  291,  193,  293,
 /*  5380 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5390 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  5400 */   183,  184,  185,  186,  187,  188,  189,  313,  313,  313,
 /*  5410 */   193,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5420 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  5430 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5440 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  299,
 /*  5450 */   313,  301,  193,  303,  304,  305,  306,  307,  308,  309,
 /*  5460 */   310,  311,  312,  313,  184,  185,  186,  187,  188,  189,
 /*  5470 */   313,  313,  313,  193,  313,  313,  291,  313,  293,  313,
 /*  5480 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  5490 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  183,
 /*  5500 */   184,  185,  186,  187,  188,  189,  313,  313,  291,  193,
 /*  5510 */   293,  313,  295,  313,  297,  313,  299,  313,  301,  302,
 /*  5520 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  5530 */   183,  184,  185,  186,  187,  188,  189,  313,  313,  313,
 /*  5540 */   193,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5550 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  5560 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5570 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  299,
 /*  5580 */   313,  301,  193,  313,  304,  305,  306,  307,  308,  309,
 /*  5590 */   310,  311,  312,  313,  183,  184,  185,  186,  187,  188,
 /*  5600 */   189,  313,  313,  313,  193,  313,  313,  291,  313,  293,
 /*  5610 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5620 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  183,
 /*  5630 */   184,  185,  186,  187,  188,  189,  313,  313,  291,  193,
 /*  5640 */   293,  313,  295,  313,  297,  313,  299,  313,  301,  302,
 /*  5650 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  5660 */   183,  184,  185,  186,  187,  188,  189,  313,  313,  313,
 /*  5670 */   193,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5680 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  5690 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5700 */   311,  312,  291,  313,  293,  313,  295,  313,  297,  313,
 /*  5710 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  5720 */   309,  310,  311,  312,  183,  184,  185,  186,  187,  188,
 /*  5730 */   189,  313,  313,  313,  193,  313,  313,  291,  313,  293,
 /*  5740 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5750 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  183,
 /*  5760 */   184,  185,  186,  187,  188,  189,  313,  313,  291,  193,
 /*  5770 */   293,  313,  295,  313,  297,  313,  299,  313,  301,  302,
 /*  5780 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  5790 */   313,  183,  184,  185,  186,  187,  188,  189,  313,  313,
 /*  5800 */   313,  193,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5810 */   313,  313,  313,  183,  184,  185,  186,  187,  188,  189,
 /*  5820 */   313,  313,  313,  193,  313,  313,  313,  313,  313,  313,
 /*  5830 */   313,  313,  291,  313,  293,  313,  295,  313,  297,  313,
 /*  5840 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  5850 */   309,  310,  311,  312,  183,  184,  185,  186,  187,  188,
 /*  5860 */   189,  313,  313,  313,  193,  313,  313,  291,  313,  293,
 /*  5870 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5880 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  5890 */   183,  184,  185,  186,  187,  188,  189,  313,  313,  291,
 /*  5900 */   193,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  5910 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  5920 */   312,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  5930 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  5940 */   310,  311,  312,  183,  184,  185,  186,  187,  188,  189,
 /*  5950 */   313,  313,  313,  193,  313,  313,  313,  313,  313,  313,
 /*  5960 */   313,  313,  291,  313,  293,  313,  295,  313,  297,  313,
 /*  5970 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  5980 */   309,  310,  311,  312,  313,  183,  184,  185,  186,  187,
 /*  5990 */   188,  189,  313,  313,  313,  193,  313,  313,  291,  313,
 /*  6000 */   293,  313,  295,  313,  297,  313,  299,  313,  301,  302,
 /*  6010 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  6020 */   183,  184,  185,  186,  187,  188,  189,  313,  313,  313,
 /*  6030 */   193,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6040 */   313,  313,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  6050 */   313,  291,  193,  293,  313,  295,  313,  297,  313,  299,
 /*  6060 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  6070 */   310,  311,  312,  313,  183,  184,  185,  186,  187,  188,
 /*  6080 */   189,  313,  313,  313,  193,  313,  313,  313,  313,  313,
 /*  6090 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  6100 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  6110 */   308,  309,  310,  311,  312,  183,  184,  185,  186,  187,
 /*  6120 */   188,  189,  313,  313,  313,  193,  313,  313,  291,  313,
 /*  6130 */   293,  313,  295,  313,  297,  313,  299,  313,  301,  302,
 /*  6140 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  6150 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  6160 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  6170 */   311,  312,  313,  183,  184,  185,  186,  187,  188,  189,
 /*  6180 */   313,  313,  291,  193,  293,  313,  295,  313,  297,  313,
 /*  6190 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  6200 */   309,  310,  311,  312,  183,  184,  185,  186,  187,  188,
 /*  6210 */   189,  313,  313,  313,  193,  313,  313,  313,  313,  313,
 /*  6220 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  6230 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  6240 */   308,  309,  310,  311,  312,  183,  184,  185,  186,  187,
 /*  6250 */   188,  189,  313,  313,  313,  193,  313,  313,  313,  313,
 /*  6260 */   313,  313,  313,  313,  313,  313,  313,  313,  183,  184,
 /*  6270 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  6280 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  6290 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  6300 */   310,  311,  312,  183,  184,  185,  186,  187,  188,  189,
 /*  6310 */   313,  313,  291,  193,  293,  313,  295,  313,  297,  313,
 /*  6320 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  6330 */   309,  310,  311,  312,  183,  184,  185,  186,  187,  188,
 /*  6340 */   189,  313,  313,  313,  193,  313,  313,  313,  313,  313,
 /*  6350 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  6360 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  6370 */   308,  309,  310,  311,  312,  313,  291,  313,  293,  313,
 /*  6380 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  6390 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  6400 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  6410 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  6420 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  6430 */   310,  311,  312,  183,  184,  185,  186,  187,  188,  189,
 /*  6440 */   313,  313,  291,  193,  293,  313,  295,  313,  297,  313,
 /*  6450 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  6460 */   309,  310,  311,  312,  313,  183,  184,  185,  186,  187,
 /*  6470 */   188,  189,  313,  313,  313,  193,  313,  313,  313,  313,
 /*  6480 */   313,  313,  313,  313,  313,  313,  313,  183,  184,  185,
 /*  6490 */   186,  187,  188,  189,  313,  313,  313,  193,  313,  313,
 /*  6500 */   313,  313,  313,  313,  313,  313,  291,  313,  293,  313,
 /*  6510 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  6520 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  6530 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  6540 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  6550 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  6560 */   310,  311,  312,  313,  183,  184,  185,  186,  187,  188,
 /*  6570 */   189,  313,  313,  291,  193,  293,  313,  295,  313,  297,
 /*  6580 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  6590 */   308,  309,  310,  311,  312,  291,  313,  293,  313,  295,
 /*  6600 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  6610 */   306,  307,  308,  309,  310,  311,  312,  183,  184,  185,
 /*  6620 */   186,  187,  188,  189,  313,  313,  313,  193,  313,  313,
 /*  6630 */   313,  313,  313,  313,  313,  313,  291,  313,  293,  313,
 /*  6640 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  6650 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  183,
 /*  6660 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  6670 */   313,  313,  291,  313,  293,  313,  295,  313,  297,  313,
 /*  6680 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  6690 */   309,  310,  311,  312,  183,  184,  185,  186,  187,  188,
 /*  6700 */   189,  313,  313,  313,  193,  313,  313,  313,  313,  313,
 /*  6710 */   313,  313,  313,  313,  313,  313,  183,  184,  185,  186,
 /*  6720 */   187,  188,  189,  313,  313,  291,  193,  293,  313,  295,
 /*  6730 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  6740 */   306,  307,  308,  309,  310,  311,  312,  313,  183,  184,
 /*  6750 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  6760 */   313,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  6770 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  6780 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  183,
 /*  6790 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  6800 */   313,  313,  291,  313,  293,  313,  295,  313,  297,  313,
 /*  6810 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  6820 */   309,  310,  311,  312,  291,  313,  293,  313,  295,  313,
 /*  6830 */   297,  313,  299,  313,  301,  302,  303,  304,  305,  306,
 /*  6840 */   307,  308,  309,  310,  311,  312,  313,  183,  184,  185,
 /*  6850 */   186,  187,  188,  189,  313,  313,  291,  193,  293,  313,
 /*  6860 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  6870 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  6880 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  6890 */   313,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  6900 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  6910 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  183,
 /*  6920 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  6930 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6940 */   313,  313,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  6950 */   313,  313,  193,  313,  313,  291,  313,  293,  313,  295,
 /*  6960 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  6970 */   306,  307,  308,  309,  310,  311,  312,  183,  184,  185,
 /*  6980 */   186,  187,  188,  189,  313,  313,  291,  193,  293,  313,
 /*  6990 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  7000 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  7010 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  7020 */   313,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  7030 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  7040 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  7050 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  7060 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  7070 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  7080 */   313,  313,  193,  313,  313,  291,  313,  293,  313,  295,
 /*  7090 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  7100 */   306,  307,  308,  309,  310,  311,  312,  183,  184,  185,
 /*  7110 */   186,  187,  188,  189,  313,  313,  291,  193,  293,  313,
 /*  7120 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  7130 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  183,
 /*  7140 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  7150 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7160 */   313,  183,  184,  185,  186,  187,  188,  189,  313,  313,
 /*  7170 */   313,  193,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7180 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  7190 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  7200 */   311,  312,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  7210 */   313,  313,  193,  313,  313,  291,  313,  293,  313,  295,
 /*  7220 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  7230 */   306,  307,  308,  309,  310,  311,  312,  313,  183,  184,
 /*  7240 */   185,  186,  187,  188,  189,  313,  313,  291,  193,  293,
 /*  7250 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  7260 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  291,
 /*  7270 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  7280 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7290 */   312,  183,  184,  185,  186,  187,  188,  189,  313,  313,
 /*  7300 */   313,  193,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7310 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  7320 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  7330 */   311,  312,  313,  183,  184,  185,  186,  187,  188,  189,
 /*  7340 */   313,  313,  313,  193,  313,  313,  291,  313,  293,  313,
 /*  7350 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  7360 */   305,  306,  307,  308,  309,  310,  311,  312,  183,  184,
 /*  7370 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  7380 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7390 */   183,  184,  185,  186,  187,  188,  189,  313,  313,  291,
 /*  7400 */   193,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  7410 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7420 */   312,  313,  183,  184,  185,  186,  187,  188,  189,  313,
 /*  7430 */   313,  313,  193,  313,  313,  313,  313,  313,  313,  313,
 /*  7440 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  7450 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7460 */   310,  311,  312,  183,  184,  185,  186,  187,  188,  189,
 /*  7470 */   313,  313,  313,  193,  313,  313,  291,  313,  293,  313,
 /*  7480 */   295,  313,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  7490 */   305,  306,  307,  308,  309,  310,  311,  312,  291,  313,
 /*  7500 */   293,  313,  295,  313,  297,  313,  299,  313,  301,  302,
 /*  7510 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  7520 */   313,  183,  184,  185,  186,  187,  188,  189,  313,  313,
 /*  7530 */   291,  193,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  7540 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  7550 */   311,  312,    3,  313,  313,    6,  313,  313,  313,  313,
 /*  7560 */    11,  313,  313,  184,  185,  186,  187,  188,  189,  313,
 /*  7570 */   313,  291,  193,  293,  313,  295,  313,  297,   29,  299,
 /*  7580 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7590 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /*  7600 */   313,  313,  313,  313,  313,   56,  313,  313,  313,  313,
 /*  7610 */   313,  313,  313,  313,  313,  313,  313,  313,   69,  313,
 /*  7620 */    71,   72,  313,  313,  313,  313,  313,  313,  313,  291,
 /*  7630 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  7640 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7650 */   312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7660 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7670 */   291,  313,  293,  313,  295,  313,  297,  313,  299,  313,
 /*  7680 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  7690 */   311,  312,  313,  313,  313,  146,  147,  148,  149,  150,
 /*  7700 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  7710 */   161,  162,    3,  313,  313,    6,  313,  313,  313,  313,
 /*  7720 */    11,  184,  185,  186,  187,  188,  189,  313,  313,  313,
 /*  7730 */   193,  313,  313,  313,  313,  313,  313,  313,   29,  313,
 /*  7740 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7750 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7760 */   313,  313,  313,  313,  313,   56,  184,  185,  186,  187,
 /*  7770 */   188,  189,  313,  313,  313,  193,  313,  313,   69,  313,
 /*  7780 */    71,   72,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7790 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  7800 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7810 */   313,  313,  313,  313,  184,  185,  186,  187,  188,  189,
 /*  7820 */   313,  313,  313,  193,  313,  313,  313,  313,  291,  313,
 /*  7830 */   293,  313,  295,  313,  297,  313,  299,  313,  301,  302,
 /*  7840 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  7850 */   313,  313,  313,  313,  313,  146,  147,  148,  149,  150,
 /*  7860 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  7870 */   161,  162,  313,  313,  313,  293,  313,  295,  313,  297,
 /*  7880 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  7890 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  293,
 /*  7900 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  7910 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  7920 */   313,  313,  313,  313,  313,  295,  313,  297,  313,  299,
 /*  7930 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7940 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /*  7950 */   184,  185,  186,  187,  188,  189,  313,  313,  313,  193,
 /*  7960 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7970 */   313,  313,  313,  313,  313,  184,  185,  186,  187,  188,
 /*  7980 */   189,  313,  313,  313,  193,  313,  313,  313,  313,  313,
 /*  7990 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  184,
 /*  8000 */   185,  186,  187,  188,  189,  313,  313,  313,  193,  313,
 /*  8010 */   313,  313,  313,  313,  313,  313,  313,  184,  185,  186,
 /*  8020 */   187,  188,  189,  313,  313,  313,  193,  313,  313,  313,
 /*  8030 */   313,  313,  313,  184,  185,  186,  187,  188,  189,  313,
 /*  8040 */   313,  313,  193,  313,  313,  313,  313,  313,  313,  184,
 /*  8050 */   185,  186,  187,  188,  189,  313,  313,    3,  193,  313,
 /*  8060 */     6,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  8070 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  8080 */   313,  313,  313,   29,  313,  313,  295,  313,  297,  313,
 /*  8090 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /*  8100 */   309,  310,  311,  312,  313,  313,  313,  313,  313,  313,
 /*  8110 */   295,   57,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  8120 */   305,  306,  307,  308,  309,  310,  311,  312,  295,  313,
 /*  8130 */   297,  313,  299,  313,  301,  302,  303,  304,  305,  306,
 /*  8140 */   307,  308,  309,  310,  311,  312,  297,  313,  299,  313,
 /*  8150 */   301,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  8160 */   311,  312,  297,  313,  299,  313,  301,  302,  303,  304,
 /*  8170 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  313,
 /*  8180 */   313,  313,  313,  313,  184,  185,  186,  187,  188,  189,
 /*  8190 */   313,  313,  313,  193,  313,  313,  313,  313,  313,  313,
 /*  8200 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  8210 */   156,  157,  158,  159,  160,  313,  313,  313,  184,  313,
 /*  8220 */   186,  187,  188,  313,  190,  313,  313,  193,  313,  313,
 /*  8230 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8240 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8250 */   313,  313,  186,  187,  188,  313,  313,  313,  313,  193,
 /*  8260 */   313,  313,  228,  229,  230,  231,  313,  313,  313,  313,
 /*  8270 */   313,  313,  313,  313,  313,  184,  313,  186,  187,  188,
 /*  8280 */   313,  190,  313,  313,  193,  313,  313,  313,  313,  313,
 /*  8290 */   313,  313,  258,  313,  260,  313,  313,  297,  313,  299,
 /*  8300 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  8310 */   310,  311,  312,  313,  313,  313,  250,  283,  284,  228,
 /*  8320 */   229,  230,  231,  289,  290,  313,  313,  313,  313,  313,
 /*  8330 */   313,  313,  313,  299,  313,  301,  313,  313,  184,  313,
 /*  8340 */   186,  187,  188,  313,  310,  311,  312,  193,  313,  258,
 /*  8350 */   313,  260,  313,  313,  313,  184,  313,  186,  187,  188,
 /*  8360 */   313,  313,  313,  313,  193,  299,  313,  301,  313,  313,
 /*  8370 */   313,  313,  313,  313,  283,  284,  310,  311,  312,  313,
 /*  8380 */   289,  290,  313,  313,  313,  313,  313,  313,  234,  313,
 /*  8390 */   299,  237,  301,  313,  313,  313,  313,  313,  313,  313,
 /*  8400 */   313,  310,  311,  312,  313,  234,  313,  313,  237,  313,
 /*  8410 */   313,  313,  258,  313,  313,  313,  313,  313,  313,  313,
 /*  8420 */   313,  267,  313,  313,  313,  313,  313,  313,  313,  258,
 /*  8430 */   313,  313,  313,  313,  313,  313,  313,  313,  267,  285,
 /*  8440 */   286,  313,  313,  289,  290,  313,  313,  313,  313,  313,
 /*  8450 */   313,  313,  313,  299,  313,  301,  285,  286,  313,  313,
 /*  8460 */   289,  290,  313,  313,  310,  311,  312,  313,  313,  313,
 /*  8470 */   299,  313,  301,  313,  313,  313,  313,  313,  313,  313,
 /*  8480 */   313,  310,  311,  312,  184,  313,  186,  187,  188,  313,
 /*  8490 */   190,  313,  184,  193,  186,  187,  188,  313,  190,  313,
 /*  8500 */   313,  193,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8510 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8520 */   313,  313,  313,  313,  313,  313,  184,  313,  186,  187,
 /*  8530 */   188,  231,  190,  313,  313,  193,  313,  313,  313,  231,
 /*  8540 */   184,  313,  186,  187,  188,  313,  190,  313,  313,  193,
 /*  8550 */   313,  313,  313,  313,  313,  313,  313,  313,  258,  313,
 /*  8560 */   260,  313,  313,  313,  313,  313,  258,  313,  260,  313,
 /*  8570 */   313,  313,  313,  231,  313,  313,  313,  313,  313,  313,
 /*  8580 */   313,  313,  313,  283,  284,  313,  313,  231,  313,  289,
 /*  8590 */   290,  283,  284,  313,  313,  313,  313,  289,  290,  299,
 /*  8600 */   258,  301,  260,  313,  313,  313,  313,  299,  313,  301,
 /*  8610 */   310,  311,  312,  313,  258,  313,  260,  313,  310,  311,
 /*  8620 */   312,  313,  313,  313,  313,  283,  284,  313,  313,  313,
 /*  8630 */   313,  289,  290,  313,  313,  313,  313,  313,  313,  283,
 /*  8640 */   284,  299,  313,  301,  313,  289,  290,  313,  313,  313,
 /*  8650 */   313,  313,  310,  311,  312,  299,  313,  301,  313,  313,
 /*  8660 */   313,  313,  313,  313,  313,  313,  310,  311,  312,  184,
 /*  8670 */   313,  186,  187,  188,  313,  190,  313,  184,  193,  186,
 /*  8680 */   187,  188,  313,  190,  313,  313,  193,  313,  313,  313,
 /*  8690 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8700 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8710 */   313,  313,  313,  313,  313,  313,  231,  184,  313,  186,
 /*  8720 */   187,  188,  313,  313,  231,  184,  193,  186,  187,  188,
 /*  8730 */   313,  313,  313,  313,  193,  313,  313,  313,  313,  313,
 /*  8740 */   313,  313,  313,  258,  313,  260,  313,  313,  313,  313,
 /*  8750 */   313,  258,  313,  260,  313,  313,  313,  313,  313,  313,
 /*  8760 */   313,  313,  313,  313,  313,  313,  313,  234,  283,  284,
 /*  8770 */   237,  313,  313,  313,  289,  290,  283,  284,  237,  238,
 /*  8780 */   313,  313,  289,  290,  299,  313,  301,  313,  313,  313,
 /*  8790 */   313,  258,  299,  313,  301,  310,  311,  312,  313,  258,
 /*  8800 */   267,  313,  313,  310,  311,  312,  313,  313,  267,  313,
 /*  8810 */   313,  184,  313,  186,  187,  188,  313,  313,  285,  286,
 /*  8820 */   193,  313,  289,  290,  313,  313,  285,  286,  313,  313,
 /*  8830 */   289,  290,  299,  313,  301,  313,  313,  313,  313,  313,
 /*  8840 */   299,  313,  301,  310,  311,  312,  313,  313,  313,  313,
 /*  8850 */   313,  310,  311,  312,  313,  313,  184,  313,  186,  187,
 /*  8860 */   188,  313,  313,  313,  313,  193,  313,  313,  313,  313,
 /*  8870 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8880 */   313,  313,  313,  313,  313,  258,  313,  313,  313,  313,
 /*  8890 */   313,  313,  313,  313,  267,  313,  269,  313,  271,  313,
 /*  8900 */   313,  184,  313,  186,  187,  188,  313,  313,  313,  313,
 /*  8910 */   193,  313,  285,  286,  313,  313,  289,  290,  313,  313,
 /*  8920 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  313,
 /*  8930 */   258,  313,  260,  313,  262,  313,  264,  310,  311,  312,
 /*  8940 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8950 */   313,  313,  313,  313,  313,  283,  284,  313,  313,  313,
 /*  8960 */   313,  289,  290,  184,  313,  186,  187,  188,  313,  313,
 /*  8970 */   313,  299,  193,  301,  313,  258,  313,  260,  313,  262,
 /*  8980 */   313,  264,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  8990 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9000 */   283,  284,  313,  313,  313,  313,  289,  290,  184,  313,
 /*  9010 */   186,  187,  188,  313,  313,  313,  299,  193,  301,  313,
 /*  9020 */   313,  313,  313,  313,  313,  313,  313,  310,  311,  312,
 /*  9030 */   313,  313,  313,  313,  313,  313,  313,  258,  313,  260,
 /*  9040 */   313,  262,  313,  264,  184,  313,  186,  187,  188,  313,
 /*  9050 */   313,  313,  313,  193,  313,  313,  313,  313,  313,  313,
 /*  9060 */   313,  313,  283,  284,  313,  313,  313,  313,  289,  290,
 /*  9070 */   313,  313,  313,  313,  313,  313,  313,  313,  299,  313,
 /*  9080 */   301,  313,  258,  313,  260,  313,  313,  313,  264,  310,
 /*  9090 */   311,  312,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9100 */   313,  184,  313,  186,  187,  188,  313,  283,  284,  313,
 /*  9110 */   193,  287,  313,  289,  290,  313,  313,  313,  258,  313,
 /*  9120 */   260,  313,  262,  299,  264,  301,  313,  313,  313,  313,
 /*  9130 */   313,  313,  313,  313,  310,  311,  312,  313,  313,  313,
 /*  9140 */   313,  313,  313,  283,  284,  313,  313,  313,  313,  289,
 /*  9150 */   290,  313,  313,  313,  313,  313,  313,  313,  313,  299,
 /*  9160 */   184,  301,  186,  187,  188,  313,  313,  313,  313,  193,
 /*  9170 */   310,  311,  312,  313,  313,  258,  313,  260,  313,  262,
 /*  9180 */   313,  264,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9190 */   313,  313,  313,  184,  313,  186,  187,  188,  313,  313,
 /*  9200 */   283,  284,  193,  313,  313,  313,  289,  290,  313,  313,
 /*  9210 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  313,
 /*  9220 */   313,  313,  184,  313,  186,  187,  188,  310,  311,  312,
 /*  9230 */   313,  193,  313,  313,  258,  313,  260,  313,  262,  313,
 /*  9240 */   264,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9250 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  283,
 /*  9260 */   284,  313,  313,  313,  313,  289,  290,  258,  313,  260,
 /*  9270 */   313,  262,  313,  264,  313,  299,  313,  301,  313,  313,
 /*  9280 */   313,  313,  313,  313,  313,  313,  310,  311,  312,  313,
 /*  9290 */   313,  313,  283,  284,  313,  313,  258,  313,  289,  290,
 /*  9300 */   313,  313,  313,  313,  313,  267,  313,  269,  299,  271,
 /*  9310 */   301,  313,  313,  313,  313,  313,  313,  313,  313,  310,
 /*  9320 */   311,  312,  313,  285,  286,  313,  313,  289,  290,  184,
 /*  9330 */   313,  186,  187,  188,  313,  313,  313,  299,  193,  301,
 /*  9340 */   313,  313,  313,  313,  313,  313,  313,  313,  310,  311,
 /*  9350 */   312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9360 */   313,  313,  313,  313,  184,  313,  186,  187,  188,  313,
 /*  9370 */   313,  313,  313,  193,  313,  313,  313,  313,  184,  313,
 /*  9380 */   186,  187,  188,  313,  313,  313,  313,  193,  313,  313,
 /*  9390 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9400 */   313,  313,  313,  258,  313,  313,  313,  313,  313,  313,
 /*  9410 */   313,  313,  267,  313,  234,  313,  271,  237,  313,  313,
 /*  9420 */   313,  313,  313,  313,  313,  231,  232,  313,  313,  313,
 /*  9430 */   285,  286,  313,  288,  289,  290,  313,  313,  258,  313,
 /*  9440 */   313,  313,  313,  313,  299,  313,  301,  267,  313,  313,
 /*  9450 */   313,  313,  258,  313,  260,  310,  311,  312,  313,  313,
 /*  9460 */   313,  313,  313,  313,  313,  285,  286,  313,  313,  289,
 /*  9470 */   290,  313,  313,  313,  313,  313,  313,  283,  284,  299,
 /*  9480 */   313,  301,  313,  289,  290,  313,  313,  313,  313,  313,
 /*  9490 */   310,  311,  312,  299,  184,  301,  186,  187,  188,  313,
 /*  9500 */   190,  313,  313,  193,  310,  311,  312,  313,  184,  313,
 /*  9510 */   186,  187,  188,  313,  190,  313,  313,  193,  313,  313,
 /*  9520 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9530 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9540 */   313,  231,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9550 */   313,  313,  313,  313,  313,  231,  313,  313,  313,  313,
 /*  9560 */   313,  313,  313,  184,  313,  186,  187,  188,  258,  313,
 /*  9570 */   260,  313,  193,  313,  313,  313,  313,  313,  313,  313,
 /*  9580 */   313,  313,  258,  313,  260,  313,  313,  313,  313,  313,
 /*  9590 */   313,  313,  313,  283,  284,  313,  313,  313,  313,  289,
 /*  9600 */   290,  184,  313,  186,  187,  188,  313,  283,  284,  299,
 /*  9610 */   193,  301,  313,  289,  290,  313,  313,  313,  313,  313,
 /*  9620 */   310,  311,  312,  299,  313,  301,  313,  313,  313,  313,
 /*  9630 */   313,  313,  313,  313,  310,  311,  312,  258,  313,  260,
 /*  9640 */   313,  313,  313,  264,  313,  313,  313,  313,  313,  313,
 /*  9650 */   313,  184,  313,  186,  187,  188,  313,  313,  313,  313,
 /*  9660 */   193,  313,  283,  284,  313,  313,  313,  313,  289,  290,
 /*  9670 */   313,  313,  313,  313,  313,  258,  313,  313,  299,  313,
 /*  9680 */   301,  313,  313,  313,  267,  313,  313,  313,  271,  310,
 /*  9690 */   311,  312,  313,  313,  313,  313,  184,  313,  186,  187,
 /*  9700 */   188,  313,  285,  286,  237,  193,  289,  290,  313,  313,
 /*  9710 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  313,
 /*  9720 */   313,  313,  313,  313,  313,  258,  313,  310,  311,  312,
 /*  9730 */   313,  313,  313,  313,  267,  313,  313,  313,  313,  313,
 /*  9740 */   184,  313,  186,  187,  188,  313,  313,  313,  313,  193,
 /*  9750 */   313,  313,  285,  286,  313,  313,  289,  290,  313,  313,
 /*  9760 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  313,
 /*  9770 */   258,  313,  260,  313,  313,  313,  264,  310,  311,  312,
 /*  9780 */   313,  313,  313,  313,  313,  313,  313,  313,  184,  313,
 /*  9790 */   186,  187,  188,  313,  313,  283,  284,  193,  313,  313,
 /*  9800 */   313,  289,  290,  313,  313,  313,  313,  313,  313,  313,
 /*  9810 */   313,  299,  313,  301,  258,  313,  260,  313,  313,  313,
 /*  9820 */   264,  313,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  9830 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  283,
 /*  9840 */   284,  313,  313,  313,  313,  289,  290,  184,  313,  186,
 /*  9850 */   187,  188,  313,  313,  313,  299,  193,  301,  313,  313,
 /*  9860 */   313,  313,  258,  313,  313,  313,  310,  311,  312,  313,
 /*  9870 */   313,  267,  313,  313,  313,  271,  313,  313,  313,  313,
 /*  9880 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  285,
 /*  9890 */   286,  313,  313,  289,  290,  313,  313,  313,  313,  313,
 /*  9900 */   313,  313,  313,  299,  313,  301,  313,  313,  313,  313,
 /*  9910 */   313,  313,  313,  313,  310,  311,  312,  313,  313,  313,
 /*  9920 */   313,  258,  313,  313,  313,  313,  313,  313,  313,  184,
 /*  9930 */   267,  186,  187,  188,  271,  313,  313,  313,  193,  313,
 /*  9940 */   313,  313,  313,  313,  313,  313,  313,  313,  285,  286,
 /*  9950 */   313,  313,  289,  290,  313,  313,  313,  313,  313,  313,
 /*  9960 */   313,  313,  299,  313,  301,  313,  313,  313,  313,  313,
 /*  9970 */   313,  313,  313,  310,  311,  312,  231,  313,  313,  313,
 /*  9980 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9990 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10000 */   313,  313,  313,  258,  313,  260,  313,  313,  313,  313,
 /* 10010 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10020 */   313,  313,  313,  313,  313,  313,  313,  313,  283,  284,
 /* 10030 */   313,  313,  313,  313,  289,  290,  313,  313,  313,  313,
 /* 10040 */   313,  313,  313,  313,  299,  313,  301,  313,  313,  313,
 /* 10050 */   313,  313,  313,  313,  313,  310,  311,  312,
);
  const YY_SHIFT_USE_DFLT = -109;
  const YY_SHIFT_MAX = 605;
static $yy_shift_ofst = array(
 /*     0 */    -1, 3207,   -3,  155,  313,  471,  629,  787,  945, 1103,
 /*    10 */  1261, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    20 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    30 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    40 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    50 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    60 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    70 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    80 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    90 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*   100 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 3394,
 /*   110 */  3418, 1419, 1419, 1419, 1419, 1577, 1735, 1893, 2051, 2051,
 /*   120 */  2051, 1733, 2209, 2209, 2209, 3466, 3578, 3626, 3648, 3808,
 /*   130 */  3825, 3855, 3872, 7549, 7549, 7549, 7709, 7709, 7709, 7709,
 /*   140 */  7709, 7709, 7709, 7709, 7549, 7549, 7549, 7709, 7709, 7709,
 /*   150 */   157,  157,  157,  157, 4032, 4062, 7549, 7709, 7709, 7549,
 /*   160 */  7549, 7709, 3488,  623,  623, 2367, 2367, 2507, 2647, 2787,
 /*   170 */   811, 8054, 8054, 1883,  971, 2927, 3067,  969, 1127, 1285,
 /*   180 */  1883, 1883,  971,  971, 2928, 2928, 2928, 2928, 2928,  491,
 /*   190 */  2929,  510,  510,  510,  510,  510,  510,  510,  510,  510,
 /*   200 */   510,  510,  510,  510,  510,  510,  510, 2929, 2929,  315,
 /*   210 */   315,  315, 2929, 2929,  315,  315, 1650,  194, 3068, 3080,
 /*   220 */  2053,  385,  385,  385,  938,  938,  171,  292,  292,  171,
 /*   230 */   171,  171, 3263, 3239, 1444, 3442, 3449, 3344, 3344,    8,
 /*   240 */     8,    8,    8,    8,    8,    8,    8,    8,  171,  171,
 /*   250 */   171,  171,  798,  973,  180,  180,  180,  180, 3375,  306,
 /*   260 */   642, 2649, 1294,  517,  791,  791, 1299,  651,  651,  172,
 /*   270 */   651,  651,  651,  651,  651,  562,  461,  847,  803,  168,
 /*   280 */  1254, 1411, 1412,   26,   26,  -48,  286, -108, -108, 1252,
 /*   290 */  1100, 1551,  338, 1553, 1255, 1744, 1744,  562, 1709, 1731,
 /*   300 */  1709,  562, 1553,  562,  562,  562, 1094,  562, 1744, 1744,
 /*   310 */  1744, 1709, 1709, 1748,  972, 1272, 1447, 1448, 1449, 1572,
 /*   320 */  1605, 1767, 1147, 1147, 1147, 1147, 1287, 1303, 1268, 1350,
 /*   330 */  1464, 1147, 1464, 1464, 1456, 1438, 1550, 1545, 1554, 1562,
 /*   340 */  1456, 1464, 1464, 1464, 1464, 1464, 1680, 1464, 1464, 1730,
 /*   350 */    26,   26, 1741, 1741, 1741, 1886,  -48,  -48, 1886, 1905,
 /*   360 */  1464, 1464, 1464, 1464, 1905, 1464, 1464, 1905, 1464, 1464,
 /*   370 */  1464, 1464, 1464, 1464, 1147, 1147, 1147, 1147, 1927, 1599,
 /*   380 */  1190, 1589, 1865, 1750, 1750, 1762, 1866, 1867, 1908, 1910,
 /*   390 */  1313, 1136, 1308, 1392, 1450, 1470, 1568, 1750, 1750, 1750,
 /*   400 */  1911, 2055, 2060, 2046, 2048, 2050, 2038, 2039, 2056, 2077,
 /*   410 */  2078, 2017, 2018, 2082, 2087, 2088, 2093, 2052, 2101, 2104,
 /*   420 */  2105, 2106, 2107, 2108, 2113, 2116, 2065, 2119, 2118, 2183,
 /*   430 */  2182, 2185, 2208, 2215, 2223, 2226, 2230, 2233, 2232, 2235,
 /*   440 */  2236, 2241, 2237, 2242, 2194, 2243, 2246, 2198, 2253, 2256,
 /*   450 */  2207, 2271, 2274, 2225, 2275, 2276, 2228, 2277, 2281, 2339,
 /*   460 */  2342, 2341, 2360, 2359, 2363, 2376, 2365, 2377, 2380, 2382,
 /*   470 */  2385, 2384, 2387, 2386, 2346, 2347, 2348, 2395, 2397, 2400,
 /*   480 */  2399, 2402, 2401, 2404, 2403, 2408, 2416, 2410, 2370, 2372,
 /*   490 */  2417, 2423, 2375, 2424, 2429, 2381, 2428, 2432, 2383, 2433,
 /*   500 */  2434, 2435, 2436, 2437, 2501, 2502, 2503, 2504, 2505, 2506,
 /*   510 */  2518, 2470, 2520, 2524, 2476, 2526, 2548, 2499, 2500, 2552,
 /*   520 */  2543, 2554, 2273, 2558, 2557, 2560, 2563, 2562, 2565, 2564,
 /*   530 */  2569, 2570, 2571, 2573, 2574, 2575, 2576, 2441, 2496, 2577,
 /*   540 */  2508, 2579, 2643, 2646, 2648, 2650, 2652, 2656, 2669, 2677,
 /*   550 */  2686, 2687, 2688, 2690, 2691, 2641, 2693, 2706, 2711, 2684,
 /*   560 */  2666, 2685, 2658, 2728, 2731, 2786, 2740, 2684, 2733, 2794,
 /*   570 */  2810, 2811, 2764, 2812, 2813, 2814, 2754, 2846, 2845, 2849,
 /*   580 */  2844, 2847, 2860, 2861, 2850, 2852, 2854, 2836, 2931, 2939,
 /*   590 */  2940, 2951, 2953, 2920, 2924, 2921, 2923, 2925, 2941, 2949,
 /*   600 */  2955, 2982, 2952, 2991, 2992, 3040,
);
  const YY_REDUCE_USE_DFLT = -258;
  const YY_REDUCE_MAX = 378;
static $yy_reduce_ofst = array(
 /*     0 */  1426, 3150, 2239, 2369, 2509, 2537, 2667, 2799, 3865, 3955,
 /*    10 */  4012, 4044, 4089, 4143, 4174, 4219, 4273, 4304, 4349, 4403,
 /*    20 */  4435, 4479, 4534, 4565, 4609, 4664, 4695, 4739, 4794, 4826,
 /*    30 */  4869, 4925, 4956, 4999, 5055, 5086, 5129, 5185, 5217, 5259,
 /*    40 */  5316, 5347, 5389, 5411, 5446, 5477, 5541, 5576, 5608, 5630,
 /*    50 */  5671, 5707, 5760, 5802, 5837, 5859, 5891, 5932, 5990, 6021,
 /*    60 */  6062, 6085, 6120, 6151, 6215, 6250, 6282, 6304, 6345, 6381,
 /*    70 */  6434, 6476, 6511, 6533, 6565, 6606, 6664, 6695, 6736, 6759,
 /*    80 */  6794, 6825, 6889, 6924, 6956, 6978, 7019, 7055, 7108, 7150,
 /*    90 */  7185, 7207, 7239, 7280, 7338, 7379, 7537, 7582, 7606, 2817,
 /*   100 */  7630, 7766, 7791, 7815, 7833, -132, 7849, 7865, 8000, 8034,
 /*   110 */  8091,   27,  185,  340,  498, 1601, 1765, 1923, 2076, 5020,
 /*   120 */  5150, 1587, 5280, 5280, 5280, 8154, 8171, 8300, 8308, 8342,
 /*   130 */  8356, 8485, 8493, 8533, 8541, 8627, 8672, 8717, 8779, 8824,
 /*   140 */  8860, 8917, 8976, 9009, 9038, 9145, 9180, 9194, 9310, 9324,
 /*   150 */  3074, 3097, 3074, 3097, 9379, 9417, 9467, 9512, 9556, 9604,
 /*   160 */  9663, 9745, 1115,  135,  293, 2216, 2379, 1777,  672, 3066,
 /*   170 */  3411, 3452, 3639, -169,  641, 2644, 3627, 8066, 8066, 8066,
 /*   180 */   -11,  -11,  957, 1273, 3401, 3573, 3804, 2957, 4231, 1277,
 /*   190 */  2668, 1416, 1899, 2044, 2075, 2079, 2510, 2936, 3121, 3496,
 /*   200 */  3511, 3695, 3932, 4092, 4620, 4750, 4880, 2519, 2942, 3730,
 /*   210 */  3892, 4182, 1939, 3018,  512,  670, -172, -174,  514,  200,
 /*   220 */   638,  822,  954,  989,  431, 1379,  495, -188, -170,  825,
 /*   230 */   964,  985,  -92,  513,  460, 1431, 1436,  671,  827, 1437,
 /*   240 */  1724, 1725, 1746, 1906, 1907, 1913, 2199, 2214, -116,  654,
 /*   250 */   965,  970,   73,  321,  346,  505,  625,  820,   81,  -78,
 /*   260 */   -38,   43,  343,  620,  156,  170,  819,  977,  984,  522,
 /*   270 */  1111, 1137, 1143, 1145, 1146,  141,  320,  356,  730,  640,
 /*   280 */   781,  862,  886,  310,  441, 1017, -257, -250, -150,  -20,
 /*   290 */   -82,  131,  205,  297,  285,  374,  380,  454,  433,  432,
 /*   300 */   453,  590,  297,  612,  649,  676,  416,  746,  673,  687,
 /*   310 */   697,  743,  747,  769,  910,  953,  949,  949,  949,  949,
 /*   320 */   949,  949, 1011, 1014, 1079, 1101, 1124, 1134, 1114, 1132,
 /*   330 */  1290, 1317, 1295, 1298, 1223, 1235, 1340, 1342, 1341, 1353,
 /*   340 */  1358, 1439, 1452, 1453, 1548, 1556, 1499, 1573, 1574, 1549,
 /*   350 */  1607, 1607, 1594, 1596, 1678, 1693, 1686, 1686, 1697, 1702,
 /*   360 */  1736, 1737, 1738, 1740, 1706, 1754, 1761, 1712, 1763, 1766,
 /*   370 */  1769, 1774, 1779, 1780, 1771, 1773, 1775, 1787, 1831,
);
static $yy_default = array(
 /*     0 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    10 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    20 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    30 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    40 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    50 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    60 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    70 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    80 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*    90 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   100 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   110 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   120 */  1608, 1608, 1082, 1083, 1086, 1295, 1299, 1608, 1608, 1608,
 /*   130 */  1273, 1608, 1277, 1294, 1302, 1608, 1608, 1608, 1608, 1608,
 /*   140 */  1608, 1608, 1608, 1608, 1608, 1608, 1298, 1282, 1272, 1276,
 /*   150 */  1195, 1199, 1197, 1201, 1608, 1608, 1300, 1608, 1608, 1608,
 /*   160 */  1608, 1280, 1127, 1608, 1608, 1608, 1179, 1608, 1161, 1608,
 /*   170 */  1608, 1608, 1608, 1290, 1135, 1172, 1608, 1608, 1608, 1608,
 /*   180 */  1289, 1291, 1126, 1134, 1608, 1608, 1378, 1385, 1388, 1081,
 /*   190 */  1608, 1073, 1075, 1114, 1115, 1112, 1110, 1113, 1111, 1118,
 /*   200 */  1119, 1123, 1125, 1131, 1133, 1139, 1141, 1608, 1608, 1608,
 /*   210 */  1608, 1363, 1608, 1608, 1367, 1369, 1608, 1157, 1608, 1608,
 /*   220 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1151, 1158, 1608,
 /*   230 */  1608, 1608, 1469, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   240 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   250 */  1608, 1608, 1608, 1608, 1150, 1156, 1159, 1152, 1468, 1608,
 /*   260 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   270 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1065, 1608, 1608,
 /*   280 */  1608, 1608, 1608, 1063, 1064, 1268, 1459, 1608, 1608, 1608,
 /*   290 */  1402, 1608, 1608, 1494, 1608, 1472, 1487, 1608, 1608, 1608,
 /*   300 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1473, 1478,
 /*   310 */  1479, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   320 */  1608, 1608, 1053, 1054, 1055, 1056, 1190, 1191, 1451, 1455,
 /*   330 */  1608, 1080, 1608, 1608, 1381, 1373, 1365, 1394, 1398, 1390,
 /*   340 */  1382, 1608, 1608, 1608, 1608, 1608, 1344, 1608, 1608, 1200,
 /*   350 */  1061, 1062, 1608, 1608, 1608, 1608, 1267, 1269, 1608, 1608,
 /*   360 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   370 */  1608, 1608, 1608, 1608, 1057, 1058, 1059, 1060, 1202, 1608,
 /*   380 */  1583, 1608, 1608, 1470, 1486, 1608, 1608, 1608, 1608, 1608,
 /*   390 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1471, 1476, 1477,
 /*   400 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   410 */  1608, 1450, 1454, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   420 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   430 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   440 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   450 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   460 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   470 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   480 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   490 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   500 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   510 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   520 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   530 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   540 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   550 */  1608, 1608, 1608, 1608, 1608, 1608, 1608, 1303, 1301, 1379,
 /*   560 */  1372, 1364, 1608, 1393, 1397, 1608, 1389, 1380, 1608, 1608,
 /*   570 */  1608, 1608, 1343, 1608, 1608, 1608, 1608, 1608, 1608, 1608,
 /*   580 */  1608, 1608, 1283, 1281, 1608, 1608, 1608, 1196, 1608, 1608,
 /*   590 */  1071, 1608, 1069, 1220, 1221, 1608, 1608, 1608, 1608, 1608,
 /*   600 */  1608, 1608, 1608, 1608, 1608, 1198, 1045, 1194, 1320, 1321,
 /*   610 */  1322, 1324, 1337, 1338, 1339, 1340, 1341, 1581, 1582, 1602,
 /*   620 */  1603, 1604, 1605, 1584, 1585, 1586, 1587, 1588, 1589, 1590,
 /*   630 */  1591, 1592, 1593, 1594, 1595, 1596, 1597, 1598, 1599, 1600,
 /*   640 */  1601, 1323, 1325, 1326, 1333, 1334, 1335, 1336, 1331, 1442,
 /*   650 */  1443, 1332, 1327, 1329, 1328, 1330, 1046, 1047, 1048, 1072,
 /*   660 */  1146, 1188, 1193, 1189, 1192, 1149, 1180, 1182, 1350, 1351,
 /*   670 */  1356, 1452, 1456, 1458, 1460, 1482, 1488, 1483, 1489, 1493,
 /*   680 */  1495, 1496, 1497, 1498, 1499, 1500, 1501, 1502, 1503, 1490,
 /*   690 */  1491, 1505, 1506, 1507, 1508, 1509, 1510, 1512, 1513, 1514,
 /*   700 */  1515, 1516, 1358, 1357, 1518, 1519, 1520, 1521, 1522, 1523,
 /*   710 */  1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531, 1532, 1533,
 /*   720 */  1534, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542, 1543,
 /*   730 */  1544, 1360, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
 /*   740 */  1553, 1554, 1555, 1557, 1559, 1078, 1079, 1147, 1155, 1154,
 /*   750 */  1160, 1162, 1165, 1562, 1563, 1564, 1567, 1568, 1569, 1570,
 /*   760 */  1571, 1577, 1578, 1579, 1580, 1576, 1575, 1574, 1573, 1572,
 /*   770 */  1565, 1566, 1163, 1164, 1166, 1355, 1167, 1170, 1168, 1169,
 /*   780 */  1171, 1173, 1174, 1175, 1176, 1177, 1178, 1144, 1145, 1088,
 /*   790 */  1089, 1090, 1091, 1092, 1093, 1094, 1095, 1084, 1096, 1097,
 /*   800 */  1098, 1099, 1100, 1101, 1102, 1103, 1085, 1087, 1286, 1287,
 /*   810 */  1288, 1292, 1304, 1376, 1374, 1422, 1423, 1366, 1428, 1429,
 /*   820 */  1434, 1435, 1438, 1439, 1444, 1445, 1446, 1447, 1448, 1449,
 /*   830 */  1606, 1607, 1430, 1370, 1371, 1440, 1441, 1368, 1424, 1375,
 /*   840 */  1383, 1384, 1395, 1399, 1401, 1405, 1406, 1407, 1403, 1404,
 /*   850 */  1408, 1409, 1412, 1416, 1418, 1419, 1420, 1421, 1413, 1417,
 /*   860 */  1414, 1415, 1410, 1411, 1400, 1396, 1386, 1387, 1391, 1425,
 /*   870 */  1426, 1431, 1432, 1436, 1437, 1433, 1427, 1392, 1377, 1305,
 /*   880 */  1293, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314,
 /*   890 */  1315, 1316, 1317, 1318, 1319, 1342, 1345, 1346, 1347, 1348,
 /*   900 */  1349, 1296, 1297, 1561, 1560, 1558, 1556, 1359, 1517, 1511,
 /*   910 */  1504, 1484, 1485, 1492, 1474, 1475, 1480, 1481, 1461, 1462,
 /*   920 */  1463, 1464, 1465, 1466, 1467, 1457, 1453, 1353, 1352, 1354,
 /*   930 */  1183, 1184, 1185, 1186, 1187, 1181, 1148, 1153, 1076, 1142,
 /*   940 */  1143, 1074, 1077, 1106, 1107, 1284, 1361, 1362, 1285, 1104,
 /*   950 */  1108, 1105, 1109, 1116, 1117, 1120, 1122, 1121, 1124, 1136,
 /*   960 */  1128, 1130, 1129, 1132, 1137, 1138, 1140, 1066, 1070, 1067,
 /*   970 */  1068, 1203, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214,
 /*   980 */  1215, 1216, 1217, 1218, 1258, 1219, 1222, 1259, 1260, 1261,
 /*   990 */  1262, 1223, 1224, 1225, 1226, 1227, 1228, 1255, 1256, 1257,
 /*  1000 */  1229, 1230, 1231, 1232, 1233, 1234, 1265, 1266, 1270, 1271,
 /*  1010 */  1278, 1279, 1274, 1275, 1235, 1236, 1263, 1264, 1237, 1249,
 /*  1020 */  1253, 1254, 1240, 1250, 1238, 1241, 1252, 1239, 1242, 1251,
 /*  1030 */  1243, 1246, 1244, 1247, 1245, 1248, 1204, 1205, 1206, 1049,
 /*  1040 */  1050, 1051, 1052,
);

  /* fallback */

  private static $yyFallback = array(
  );

  private static $yyTokenName = array( 
  '$',             'PRAGMA',        'BASE',          'IRIREF',      
  'DOT',           'PREFIX',        'PNAME_NS',      'SELECT',      
  'DISTINCT',      'REDUCED',       'STAR',          'LPARENTHESE', 
  'AS',            'RPARENTHESE',   'CONSTRUCT',     'LBRACE',      
  'RBRACE',        'WHERE',         'DESCRIBE',      'ASK',         
  'FROM',          'NAMED',         'GROUP',         'BY',          
  'HAVING',        'ORDER',         'ASC',           'DESC',        
  'LIMIT',         'INTEGER',       'OFFSET',        'VALUES',      
  'SEMICOLON',     'LOAD',          'SILENT',        'INTO',        
  'CLEAR',         'DROP',          'CREATE',        'ADD',         
  'TO',            'MOVE',          'COPY',          'INSERTDATA',  
  'DELETEDATA',    'DELETEWHERE',   'WITH',          'DELETE',      
  'INSERT',        'USING',         'GRAPH',         'DEFAULT',     
  'ALL',           'OPTIONAL',      'SERVICE',       'BIND',        
  'NIL',           'UNDEF',         'SMINUS',        'UNION',       
  'FILTER',        'COMMA',         'A',             'VBAR',        
  'SLASH',         'HAT',           'PLUS',          'QUESTION',    
  'EXCLAMATION',   'LBRACKET',      'RBRACKET',      'VAR1',        
  'VAR2',          'OR',            'AND',           'EQUAL',       
  'NEQUAL',        'SMALLERTHEN',   'GREATERTHEN',   'SMALLERTHENQ',
  'GREATERTHENQ',  'IN',            'NOT',           'MINUS',       
  'STR',           'LANG',          'LANGMATCHES',   'DATATYPE',    
  'BOUND',         'URI',           'BNODE',         'RAND',        
  'ABS',           'CEIL',          'FLOOR',         'ROUND',       
  'CONCAT',        'STRLEN',        'UCASE',         'LCASE',       
  'ENCODE_FOR_URI',  'CONTAINS',      'STRSTARTS',     'STRENDS',     
  'STBEFORE',      'STRAFTER',      'YEAR',          'MONTH',       
  'DAY',           'HOURS',         'MINUTES',       'SECONDS',     
  'TIMEZONE',      'TZ',            'NOW',           'UUID',        
  'STRUUID',       'MD5',           'SHA1',          'SHA256',      
  'SHA384',        'SHA512',        'COALESCE',      'IF',          
  'STRLANG',       'STRDT',         'SAMETERM',      'ISIRI',       
  'ISURI',         'ISBLANK',       'ISLITERAL',     'ISNUMERIC',   
  'REGEX',         'SUBSTR',        'REPLACE',       'EXISTS',      
  'COUNT',         'SUM',           'MIN',           'MAX',         
  'AVG',           'SAMPLE',        'GROUP_CONCAT',  'SEPARATOR',   
  'LANGTAG',       'DHAT',          'DECIMAL',       'DOUBLE',      
  'INTEGER_POSITIVE',  'DECIMAL_POSITIVE',  'DOUBLE_POSITIVE',  'INTEGER_NEGATIVE',
  'DECIMAL_NEGATIVE',  'DOUBLE_NEGATIVE',  'TRUE',          'FALSE',       
  'STRING_LITERAL1',  'STRING_LITERAL2',  'STRING_LITERAL_LONG1',  'STRING_LITERAL_LONG2',
  'PNAME_LN',      'BLANK_NODE_LABEL',  'ANON',          'error',       
  'start',         'query',         'update',        'prologue',    
  'selectQuery',   'valuesClause',  'constructQuery',  'describeQuery',
  'askQuery',      'prefixDeclX',   'baseDecl',      'prefixDecl',  
  'selectClause',  'datasetClauseX',  'whereclause',   'solutionModifier',
  'datasetClause',  'subSelect',     'selectClauseX',  'expression',  
  'var',           'builtInCall',   'rdfLiteral',    'numericLiteral',
  'booleanLiteral',  'functionCall',  'triplesTemplate',  'varOrIriX',   
  'varOrIri',      'iri',           'groupGraphPattern',  'groupClause', 
  'havingClause',  'orderClause',   'limitOffsetClauses',  'groupConditionX',
  'constraintX',   'orderConditionX',  'orderCondition',  'limitClause', 
  'offsetClause',  'dataBlock',     'update1',       'updateX',     
  'load',          'clear',         'drop',          'add',         
  'move',          'copy',          'create',        'insertData',  
  'deleteData',    'deletewhere',   'modify',        'graphRef',    
  'graphRefAll',   'graphOrDefault',  'quadData',      'quadPattern', 
  'deleteClause',  'insertClause',  'usingClauseX',  'usingClause', 
  'quads',         'quadsX',        'quadsNotTriples',  'triplesSameSubject',
  'triplesTemplateX',  'groupGraphPatternSub',  'triplesBlock',  'groupGraphPatternSubX',
  'graphPatternNotTriples',  'triplesSameSubjectPath',  'triplesBlockX',  'groupOrUnionGraphPattern',
  'optionalGraphPattern',  'minusGraphPattern',  'graphGraphPattern',  'serviceGraphPattern',
  'filter',        'bind',          'inlineData',    'inlineDataOneVar',
  'inlineDataFull',  'dataBlockValueX',  'dataBlockValue',  'varX',        
  'inlineDataFullX',  'nilX',          'groupOrUnionGraphPatternX',  'argList',     
  'argListX',      'expressionList',  'varOrTerm',     'propertyListNotEmpty',
  'triplesNode',   'verb',          'objectList',    'propertyListNotEmptyX',
  'graphNode',     'objectListX',   'propertyListPathNotEmpty',  'triplesNodePath',
  'pathAlternative',  'objectListPath',  'propertyListPathNotEmptyX',  'graphNodePath',
  'objectListPathX',  'pathSequence',  'pathAlternativeX',  'pathEltOrInverse',
  'pathSequenceX',  'pathElt',       'pathPrimary',   'pathMod',     
  'pathNegatedPropertySet',  'pathOneInPropertySet',  'pathNegatedPropertySetX',  'collection',  
  'blankNodePropertyList',  'collectionPath',  'blankNodePropertyListPath',  'graphNodeX',  
  'graphNodePathX',  'graphTerm',     'blankNode',     'conditionalAndExpression',
  'conditionalOrExpressionX',  'relationalExpression',  'conditionalAndExpressionX',  'additiveExpression',
  'relationalExpressionX',  'multiplicativeExpression',  'additiveExpressionX',  'numericLiteralPositive',
  'additiveExpressionY',  'numericLiteralNegative',  'unaryExpression',  'primaryExpression',
  'aggregate',     'regexExpression',  'existsFunc',    'notExistsFunc',
  'subStringExpression',  'strReplaceExpression',  'string',        'numericLiteralUnsigned',
  'prefixedName',
  );

  private static $yyRuleName = array(
 /*   0 */ "start ::= query",
 /*   1 */ "start ::= update",
 /*   2 */ "query ::= prologue selectQuery valuesClause",
 /*   3 */ "query ::= prologue constructQuery valuesClause",
 /*   4 */ "query ::= prologue describeQuery valuesClause",
 /*   5 */ "query ::= prologue askQuery valuesClause",
 /*   6 */ "query ::= selectQuery valuesClause",
 /*   7 */ "query ::= constructQuery valuesClause",
 /*   8 */ "query ::= describeQuery valuesClause",
 /*   9 */ "query ::= askQuery valuesClause",
 /*  10 */ "query ::= prologue selectQuery",
 /*  11 */ "query ::= prologue constructQuery",
 /*  12 */ "query ::= prologue describeQuery",
 /*  13 */ "query ::= prologue askQuery",
 /*  14 */ "query ::= selectQuery",
 /*  15 */ "query ::= constructQuery",
 /*  16 */ "query ::= describeQuery",
 /*  17 */ "query ::= askQuery",
 /*  18 */ "prologue ::= prefixDeclX baseDecl prefixDeclX",
 /*  19 */ "prologue ::= baseDecl prefixDeclX",
 /*  20 */ "prologue ::= prefixDeclX baseDecl",
 /*  21 */ "prologue ::= baseDecl",
 /*  22 */ "prologue ::= prefixDeclX",
 /*  23 */ "prefixDeclX ::= prefixDeclX prefixDecl",
 /*  24 */ "prefixDeclX ::= prefixDecl",
 /*  25 */ "baseDecl ::= BASE IRIREF DOT",
 /*  26 */ "baseDecl ::= BASE IRIREF",
 /*  27 */ "prefixDecl ::= PREFIX PNAME_NS IRIREF DOT",
 /*  28 */ "prefixDecl ::= PREFIX PNAME_NS IRIREF",
 /*  29 */ "selectQuery ::= selectClause datasetClauseX whereclause solutionModifier",
 /*  30 */ "selectQuery ::= selectClause datasetClauseX whereclause",
 /*  31 */ "selectQuery ::= selectClause whereclause solutionModifier",
 /*  32 */ "selectQuery ::= selectClause whereclause",
 /*  33 */ "datasetClauseX ::= datasetClauseX datasetClause",
 /*  34 */ "datasetClauseX ::= datasetClause",
 /*  35 */ "subSelect ::= selectClause whereclause solutionModifier valuesClause",
 /*  36 */ "subSelect ::= selectClause whereclause valuesClause",
 /*  37 */ "subSelect ::= selectClause whereclause solutionModifier",
 /*  38 */ "subSelect ::= selectClause whereclause",
 /*  39 */ "selectClause ::= SELECT DISTINCT selectClauseX",
 /*  40 */ "selectClause ::= SELECT REDUCED selectClauseX",
 /*  41 */ "selectClause ::= SELECT DISTINCT STAR",
 /*  42 */ "selectClause ::= SELECT REDUCED STAR",
 /*  43 */ "selectClause ::= SELECT selectClauseX",
 /*  44 */ "selectClause ::= SELECT STAR",
 /*  45 */ "selectClauseX ::= selectClauseX LPARENTHESE expression AS var RPARENTHESE",
 /*  46 */ "selectClauseX ::= selectClauseX LPARENTHESE expression RPARENTHESE",
 /*  47 */ "selectClauseX ::= selectClauseX builtInCall",
 /*  48 */ "selectClauseX ::= selectClauseX rdfLiteral",
 /*  49 */ "selectClauseX ::= selectClauseX numericLiteral",
 /*  50 */ "selectClauseX ::= selectClauseX booleanLiteral",
 /*  51 */ "selectClauseX ::= selectClauseX var",
 /*  52 */ "selectClauseX ::= selectClauseX functionCall",
 /*  53 */ "selectClauseX ::= LPARENTHESE expression AS var RPARENTHESE",
 /*  54 */ "selectClauseX ::= LPARENTHESE expression RPARENTHESE",
 /*  55 */ "selectClauseX ::= builtInCall",
 /*  56 */ "selectClauseX ::= rdfLiteral",
 /*  57 */ "selectClauseX ::= numericLiteral",
 /*  58 */ "selectClauseX ::= booleanLiteral",
 /*  59 */ "selectClauseX ::= var",
 /*  60 */ "selectClauseX ::= functionCall",
 /*  61 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause solutionModifier",
 /*  62 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause solutionModifier",
 /*  63 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE solutionModifier",
 /*  64 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE solutionModifier",
 /*  65 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause solutionModifier",
 /*  66 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause solutionModifier",
 /*  67 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause",
 /*  68 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause",
 /*  69 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause",
 /*  70 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause",
 /*  71 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE",
 /*  72 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE",
 /*  73 */ "constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE solutionModifier",
 /*  74 */ "constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE solutionModifier",
 /*  75 */ "constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE",
 /*  76 */ "constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE",
 /*  77 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause solutionModifier",
 /*  78 */ "describeQuery ::= DESCRIBE varOrIriX whereclause solutionModifier",
 /*  79 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX solutionModifier",
 /*  80 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause",
 /*  81 */ "describeQuery ::= DESCRIBE varOrIriX solutionModifier",
 /*  82 */ "describeQuery ::= DESCRIBE varOrIriX whereclause",
 /*  83 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX",
 /*  84 */ "describeQuery ::= DESCRIBE varOrIriX",
 /*  85 */ "describeQuery ::= DESCRIBE STAR datasetClauseX whereclause solutionModifier",
 /*  86 */ "describeQuery ::= DESCRIBE STAR whereclause solutionModifier",
 /*  87 */ "describeQuery ::= DESCRIBE STAR datasetClauseX solutionModifier",
 /*  88 */ "describeQuery ::= DESCRIBE STAR datasetClauseX whereclause",
 /*  89 */ "describeQuery ::= DESCRIBE STAR solutionModifier",
 /*  90 */ "describeQuery ::= DESCRIBE STAR whereclause",
 /*  91 */ "describeQuery ::= DESCRIBE STAR datasetClauseX",
 /*  92 */ "describeQuery ::= DESCRIBE STAR",
 /*  93 */ "varOrIriX ::= varOrIriX varOrIri",
 /*  94 */ "varOrIriX ::= varOrIri",
 /*  95 */ "askQuery ::= ASK datasetClauseX whereclause solutionModifier",
 /*  96 */ "askQuery ::= ASK datasetClauseX whereclause",
 /*  97 */ "askQuery ::= ASK whereclause solutionModifier",
 /*  98 */ "askQuery ::= ASK whereclause",
 /*  99 */ "datasetClause ::= FROM NAMED iri",
 /* 100 */ "datasetClause ::= FROM iri",
 /* 101 */ "whereclause ::= WHERE groupGraphPattern",
 /* 102 */ "whereclause ::= groupGraphPattern",
 /* 103 */ "solutionModifier ::= groupClause havingClause orderClause limitOffsetClauses",
 /* 104 */ "solutionModifier ::= havingClause orderClause limitOffsetClauses",
 /* 105 */ "solutionModifier ::= groupClause orderClause limitOffsetClauses",
 /* 106 */ "solutionModifier ::= groupClause havingClause limitOffsetClauses",
 /* 107 */ "solutionModifier ::= groupClause havingClause orderClause",
 /* 108 */ "solutionModifier ::= groupClause havingClause",
 /* 109 */ "solutionModifier ::= groupClause orderClause",
 /* 110 */ "solutionModifier ::= groupClause limitOffsetClauses",
 /* 111 */ "solutionModifier ::= orderClause limitOffsetClauses",
 /* 112 */ "solutionModifier ::= havingClause limitOffsetClauses",
 /* 113 */ "solutionModifier ::= havingClause orderClause",
 /* 114 */ "solutionModifier ::= groupClause",
 /* 115 */ "solutionModifier ::= havingClause",
 /* 116 */ "solutionModifier ::= orderClause",
 /* 117 */ "solutionModifier ::= limitOffsetClauses",
 /* 118 */ "groupClause ::= GROUP BY groupConditionX",
 /* 119 */ "groupConditionX ::= groupConditionX LPARENTHESE expression AS var RPARENTHESE",
 /* 120 */ "groupConditionX ::= groupConditionX builtInCall",
 /* 121 */ "groupConditionX ::= groupConditionX functionCall",
 /* 122 */ "groupConditionX ::= groupConditionX LPARENTHESE expression RPARENTHESE",
 /* 123 */ "groupConditionX ::= groupConditionX var",
 /* 124 */ "groupConditionX ::= LPARENTHESE expression AS var RPARENTHESE",
 /* 125 */ "groupConditionX ::= builtInCall",
 /* 126 */ "groupConditionX ::= functionCall",
 /* 127 */ "groupConditionX ::= LPARENTHESE expression RPARENTHESE",
 /* 128 */ "groupConditionX ::= var",
 /* 129 */ "havingClause ::= HAVING constraintX",
 /* 130 */ "constraintX ::= constraintX LPARENTHESE expression RPARENTHESE",
 /* 131 */ "constraintX ::= constraintX builtInCall",
 /* 132 */ "constraintX ::= constraintX functionCall",
 /* 133 */ "constraintX ::= LPARENTHESE expression RPARENTHESE",
 /* 134 */ "constraintX ::= builtInCall",
 /* 135 */ "constraintX ::= functionCall",
 /* 136 */ "orderClause ::= ORDER BY orderConditionX",
 /* 137 */ "orderConditionX ::= orderConditionX orderCondition",
 /* 138 */ "orderConditionX ::= orderCondition",
 /* 139 */ "orderCondition ::= ASC LPARENTHESE expression RPARENTHESE",
 /* 140 */ "orderCondition ::= DESC LPARENTHESE expression RPARENTHESE",
 /* 141 */ "orderCondition ::= LPARENTHESE expression RPARENTHESE",
 /* 142 */ "orderCondition ::= builtInCall",
 /* 143 */ "orderCondition ::= functionCall",
 /* 144 */ "orderCondition ::= var",
 /* 145 */ "limitOffsetClauses ::= limitClause offsetClause",
 /* 146 */ "limitOffsetClauses ::= offsetClause limitClause",
 /* 147 */ "limitOffsetClauses ::= limitClause",
 /* 148 */ "limitOffsetClauses ::= offsetClause",
 /* 149 */ "limitClause ::= LIMIT INTEGER",
 /* 150 */ "offsetClause ::= OFFSET INTEGER",
 /* 151 */ "valuesClause ::= VALUES dataBlock",
 /* 152 */ "update ::= prologue update1 updateX SEMICOLON",
 /* 153 */ "update ::= prologue update1 updateX",
 /* 154 */ "update ::= update1 updateX SEMICOLON",
 /* 155 */ "update ::= update1 updateX",
 /* 156 */ "update ::= prologue update1 SEMICOLON",
 /* 157 */ "update ::= prologue update1",
 /* 158 */ "update ::= update1 SEMICOLON",
 /* 159 */ "update ::= update1",
 /* 160 */ "updateX ::= updateX SEMICOLON prologue update1",
 /* 161 */ "updateX ::= updateX SEMICOLON update1",
 /* 162 */ "updateX ::= SEMICOLON prologue update1",
 /* 163 */ "updateX ::= SEMICOLON update1",
 /* 164 */ "update1 ::= load",
 /* 165 */ "update1 ::= clear",
 /* 166 */ "update1 ::= drop",
 /* 167 */ "update1 ::= add",
 /* 168 */ "update1 ::= move",
 /* 169 */ "update1 ::= copy",
 /* 170 */ "update1 ::= create",
 /* 171 */ "update1 ::= insertData",
 /* 172 */ "update1 ::= deleteData",
 /* 173 */ "update1 ::= deletewhere",
 /* 174 */ "update1 ::= modify",
 /* 175 */ "load ::= LOAD SILENT iri INTO graphRef",
 /* 176 */ "load ::= LOAD iri INTO graphRef",
 /* 177 */ "load ::= LOAD SILENT iri",
 /* 178 */ "load ::= LOAD iri",
 /* 179 */ "clear ::= CLEAR SILENT graphRefAll",
 /* 180 */ "clear ::= CLEAR graphRefAll",
 /* 181 */ "drop ::= DROP SILENT graphRefAll",
 /* 182 */ "drop ::= DROP graphRefAll",
 /* 183 */ "create ::= CREATE SILENT graphRef",
 /* 184 */ "create ::= CREATE graphRef",
 /* 185 */ "add ::= ADD SILENT graphOrDefault TO graphOrDefault",
 /* 186 */ "add ::= ADD graphOrDefault TO graphOrDefault",
 /* 187 */ "move ::= MOVE SILENT graphOrDefault TO graphOrDefault",
 /* 188 */ "move ::= MOVE graphOrDefault TO graphOrDefault",
 /* 189 */ "copy ::= COPY SILENT graphOrDefault TO graphOrDefault",
 /* 190 */ "copy ::= COPY graphOrDefault TO graphOrDefault",
 /* 191 */ "insertData ::= INSERTDATA quadData",
 /* 192 */ "deleteData ::= DELETEDATA quadData",
 /* 193 */ "deletewhere ::= DELETEWHERE quadPattern",
 /* 194 */ "modify ::= WITH iri deleteClause insertClause usingClauseX WHERE groupGraphPattern",
 /* 195 */ "modify ::= WITH iri deleteClause usingClauseX WHERE groupGraphPattern",
 /* 196 */ "modify ::= WITH iri insertClause usingClauseX WHERE groupGraphPattern",
 /* 197 */ "modify ::= WITH iri deleteClause insertClause WHERE groupGraphPattern",
 /* 198 */ "modify ::= WITH iri deleteClause WHERE groupGraphPattern",
 /* 199 */ "modify ::= WITH iri insertClause WHERE groupGraphPattern",
 /* 200 */ "modify ::= deleteClause insertClause usingClauseX WHERE groupGraphPattern",
 /* 201 */ "modify ::= deleteClause usingClauseX WHERE groupGraphPattern",
 /* 202 */ "modify ::= insertClause usingClauseX WHERE groupGraphPattern",
 /* 203 */ "modify ::= deleteClause insertClause WHERE groupGraphPattern",
 /* 204 */ "modify ::= deleteClause WHERE groupGraphPattern",
 /* 205 */ "modify ::= insertClause WHERE groupGraphPattern",
 /* 206 */ "usingClauseX ::= usingClauseX usingClause",
 /* 207 */ "usingClauseX ::= usingClause",
 /* 208 */ "deleteClause ::= DELETE quadPattern",
 /* 209 */ "insertClause ::= INSERT quadPattern",
 /* 210 */ "usingClause ::= USING NAMED iri",
 /* 211 */ "usingClause ::= USING iri",
 /* 212 */ "graphOrDefault ::= GRAPH iri",
 /* 213 */ "graphOrDefault ::= DEFAULT",
 /* 214 */ "graphOrDefault ::= iri",
 /* 215 */ "graphRef ::= GRAPH iri",
 /* 216 */ "graphRefAll ::= graphRef",
 /* 217 */ "graphRefAll ::= DEFAULT",
 /* 218 */ "graphRefAll ::= NAMED",
 /* 219 */ "graphRefAll ::= ALL",
 /* 220 */ "quadPattern ::= LBRACE quads RBRACE",
 /* 221 */ "quadPattern ::= LBRACE RBRACE",
 /* 222 */ "quadData ::= LBRACE quads RBRACE",
 /* 223 */ "quadData ::= LBRACE RBRACE",
 /* 224 */ "quads ::= triplesTemplate quadsX",
 /* 225 */ "quads ::= triplesTemplate",
 /* 226 */ "quads ::= quadsX",
 /* 227 */ "quadsX ::= quadsX quadsNotTriples DOT triplesTemplate",
 /* 228 */ "quadsX ::= quadsX quadsNotTriples triplesTemplate",
 /* 229 */ "quadsX ::= quadsX quadsNotTriples DOT",
 /* 230 */ "quadsX ::= quadsX quadsNotTriples",
 /* 231 */ "quadsX ::= quadsNotTriples DOT triplesTemplate",
 /* 232 */ "quadsX ::= quadsNotTriples triplesTemplate",
 /* 233 */ "quadsX ::= quadsNotTriples DOT",
 /* 234 */ "quadsX ::= quadsNotTriples",
 /* 235 */ "quadsNotTriples ::= GRAPH varOrIri LBRACE triplesTemplate RBRACE",
 /* 236 */ "quadsNotTriples ::= GRAPH varOrIri LBRACE RBRACE",
 /* 237 */ "triplesTemplate ::= triplesSameSubject DOT triplesTemplateX DOT",
 /* 238 */ "triplesTemplate ::= triplesSameSubject DOT triplesTemplateX",
 /* 239 */ "triplesTemplate ::= triplesSameSubject DOT",
 /* 240 */ "triplesTemplate ::= triplesSameSubject",
 /* 241 */ "triplesTemplateX ::= triplesTemplateX DOT triplesSameSubject",
 /* 242 */ "triplesTemplateX ::= triplesSameSubject",
 /* 243 */ "groupGraphPattern ::= LBRACE groupGraphPatternSub RBRACE",
 /* 244 */ "groupGraphPattern ::= LBRACE subSelect RBRACE",
 /* 245 */ "groupGraphPattern ::= LBRACE RBRACE",
 /* 246 */ "groupGraphPatternSub ::= triplesBlock groupGraphPatternSubX",
 /* 247 */ "groupGraphPatternSub ::= triplesBlock",
 /* 248 */ "groupGraphPatternSub ::= groupGraphPatternSubX",
 /* 249 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT triplesBlock",
 /* 250 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples triplesBlock",
 /* 251 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT",
 /* 252 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples",
 /* 253 */ "groupGraphPatternSubX ::= graphPatternNotTriples DOT triplesBlock",
 /* 254 */ "groupGraphPatternSubX ::= graphPatternNotTriples triplesBlock",
 /* 255 */ "groupGraphPatternSubX ::= graphPatternNotTriples DOT",
 /* 256 */ "groupGraphPatternSubX ::= graphPatternNotTriples",
 /* 257 */ "triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX DOT",
 /* 258 */ "triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX",
 /* 259 */ "triplesBlock ::= triplesSameSubjectPath DOT",
 /* 260 */ "triplesBlock ::= triplesSameSubjectPath",
 /* 261 */ "triplesBlockX ::= triplesBlockX DOT triplesSameSubjectPath",
 /* 262 */ "triplesBlockX ::= triplesSameSubjectPath",
 /* 263 */ "graphPatternNotTriples ::= groupOrUnionGraphPattern",
 /* 264 */ "graphPatternNotTriples ::= optionalGraphPattern",
 /* 265 */ "graphPatternNotTriples ::= minusGraphPattern",
 /* 266 */ "graphPatternNotTriples ::= graphGraphPattern",
 /* 267 */ "graphPatternNotTriples ::= serviceGraphPattern",
 /* 268 */ "graphPatternNotTriples ::= filter",
 /* 269 */ "graphPatternNotTriples ::= bind",
 /* 270 */ "graphPatternNotTriples ::= inlineData",
 /* 271 */ "optionalGraphPattern ::= OPTIONAL groupGraphPattern",
 /* 272 */ "graphGraphPattern ::= GRAPH varOrIri groupGraphPattern",
 /* 273 */ "serviceGraphPattern ::= SERVICE SILENT varOrIri groupGraphPattern",
 /* 274 */ "serviceGraphPattern ::= SERVICE varOrIri groupGraphPattern",
 /* 275 */ "bind ::= BIND LPARENTHESE expression AS var RPARENTHESE",
 /* 276 */ "inlineData ::= VALUES dataBlock",
 /* 277 */ "dataBlock ::= inlineDataOneVar",
 /* 278 */ "dataBlock ::= inlineDataFull",
 /* 279 */ "inlineDataOneVar ::= var LBRACE dataBlockValueX RBRACE",
 /* 280 */ "inlineDataOneVar ::= var LBRACE RBRACE",
 /* 281 */ "dataBlockValueX ::= dataBlockValueX dataBlockValue",
 /* 282 */ "dataBlockValueX ::= dataBlockValue",
 /* 283 */ "inlineDataFull ::= LPARENTHESE varX RPARENTHESE LBRACE inlineDataFullX RBRACE",
 /* 284 */ "inlineDataFull ::= NIL LBRACE nilX RBRACE",
 /* 285 */ "inlineDataFull ::= NIL LBRACE RBRACE",
 /* 286 */ "nilX ::= nilX NIL",
 /* 287 */ "nilX ::= NIL",
 /* 288 */ "varX ::= varX var",
 /* 289 */ "varX ::= var",
 /* 290 */ "inlineDataFullX ::= inlineDataFullX LPARENTHESE dataBlockValueX RPARENTHESE",
 /* 291 */ "inlineDataFullX ::= inlineDataFullX NIL",
 /* 292 */ "inlineDataFullX ::= LPARENTHESE dataBlockValueX RPARENTHESE",
 /* 293 */ "inlineDataFullX ::= NIL",
 /* 294 */ "dataBlockValue ::= iri",
 /* 295 */ "dataBlockValue ::= rdfLiteral",
 /* 296 */ "dataBlockValue ::= numericLiteral",
 /* 297 */ "dataBlockValue ::= booleanLiteral",
 /* 298 */ "dataBlockValue ::= UNDEF",
 /* 299 */ "minusGraphPattern ::= SMINUS groupGraphPattern",
 /* 300 */ "groupOrUnionGraphPattern ::= groupGraphPattern groupOrUnionGraphPatternX",
 /* 301 */ "groupOrUnionGraphPattern ::= groupGraphPattern",
 /* 302 */ "groupOrUnionGraphPatternX ::= groupOrUnionGraphPatternX UNION groupGraphPattern",
 /* 303 */ "groupOrUnionGraphPatternX ::= UNION groupGraphPattern",
 /* 304 */ "filter ::= FILTER LPARENTHESE expression RPARENTHESE",
 /* 305 */ "filter ::= FILTER builtInCall",
 /* 306 */ "filter ::= FILTER functionCall",
 /* 307 */ "functionCall ::= iri argList",
 /* 308 */ "argList ::= LPARENTHESE DISTINCT expression argListX RPARENTHESE",
 /* 309 */ "argList ::= LPARENTHESE expression argListX RPARENTHESE",
 /* 310 */ "argList ::= LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 311 */ "argList ::= LPARENTHESE expression RPARENTHESE",
 /* 312 */ "argList ::= NIL",
 /* 313 */ "argListX ::= argListX COMMA expression",
 /* 314 */ "argListX ::= COMMA expression",
 /* 315 */ "expressionList ::= LPARENTHESE expression argListX RPARENTHESE",
 /* 316 */ "expressionList ::= LPARENTHESE expression RPARENTHESE",
 /* 317 */ "expressionList ::= NIL",
 /* 318 */ "triplesSameSubject ::= varOrTerm propertyListNotEmpty",
 /* 319 */ "triplesSameSubject ::= triplesNode propertyListNotEmpty",
 /* 320 */ "triplesSameSubject ::= triplesNode",
 /* 321 */ "propertyListNotEmpty ::= verb objectList propertyListNotEmptyX",
 /* 322 */ "propertyListNotEmpty ::= verb objectList",
 /* 323 */ "propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON verb objectList",
 /* 324 */ "propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON",
 /* 325 */ "propertyListNotEmptyX ::= SEMICOLON verb objectList",
 /* 326 */ "propertyListNotEmptyX ::= SEMICOLON",
 /* 327 */ "verb ::= varOrIri",
 /* 328 */ "verb ::= A",
 /* 329 */ "objectList ::= graphNode objectListX",
 /* 330 */ "objectList ::= graphNode",
 /* 331 */ "objectListX ::= objectListX COMMA graphNode",
 /* 332 */ "objectListX ::= COMMA graphNode",
 /* 333 */ "triplesSameSubjectPath ::= varOrTerm propertyListPathNotEmpty",
 /* 334 */ "triplesSameSubjectPath ::= triplesNodePath propertyListPathNotEmpty",
 /* 335 */ "triplesSameSubjectPath ::= triplesNodePath",
 /* 336 */ "propertyListPathNotEmpty ::= pathAlternative objectListPath propertyListPathNotEmptyX",
 /* 337 */ "propertyListPathNotEmpty ::= var objectListPath propertyListPathNotEmptyX",
 /* 338 */ "propertyListPathNotEmpty ::= pathAlternative objectListPath",
 /* 339 */ "propertyListPathNotEmpty ::= var objectListPath",
 /* 340 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON pathAlternative objectList",
 /* 341 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON var objectList",
 /* 342 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON",
 /* 343 */ "propertyListPathNotEmptyX ::= SEMICOLON pathAlternative objectList",
 /* 344 */ "propertyListPathNotEmptyX ::= SEMICOLON var objectList",
 /* 345 */ "propertyListPathNotEmptyX ::= SEMICOLON",
 /* 346 */ "objectListPath ::= graphNodePath objectListPathX",
 /* 347 */ "objectListPath ::= graphNodePath",
 /* 348 */ "objectListPathX ::= objectListPathX COMMA graphNodePath",
 /* 349 */ "objectListPathX ::= COMMA graphNodePath",
 /* 350 */ "pathAlternative ::= pathSequence pathAlternativeX",
 /* 351 */ "pathAlternative ::= pathSequence",
 /* 352 */ "pathAlternativeX ::= pathAlternativeX VBAR pathSequence",
 /* 353 */ "pathAlternativeX ::= VBAR pathSequence",
 /* 354 */ "pathSequence ::= pathEltOrInverse pathSequenceX",
 /* 355 */ "pathSequence ::= pathEltOrInverse",
 /* 356 */ "pathSequenceX ::= pathSequenceX SLASH pathEltOrInverse",
 /* 357 */ "pathSequenceX ::= SLASH pathEltOrInverse",
 /* 358 */ "pathElt ::= pathPrimary pathMod",
 /* 359 */ "pathElt ::= pathPrimary",
 /* 360 */ "pathEltOrInverse ::= HAT pathElt",
 /* 361 */ "pathEltOrInverse ::= pathElt",
 /* 362 */ "pathMod ::= STAR",
 /* 363 */ "pathMod ::= PLUS",
 /* 364 */ "pathMod ::= QUESTION",
 /* 365 */ "pathPrimary ::= LPARENTHESE pathAlternative RPARENTHESE",
 /* 366 */ "pathPrimary ::= EXCLAMATION pathNegatedPropertySet",
 /* 367 */ "pathPrimary ::= A",
 /* 368 */ "pathPrimary ::= iri",
 /* 369 */ "pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet pathNegatedPropertySetX RPARENTHESE",
 /* 370 */ "pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet RPARENTHESE",
 /* 371 */ "pathNegatedPropertySet ::= LPARENTHESE RPARENTHESE",
 /* 372 */ "pathNegatedPropertySet ::= pathOneInPropertySet",
 /* 373 */ "pathNegatedPropertySetX ::= pathNegatedPropertySetX VBAR pathOneInPropertySet",
 /* 374 */ "pathNegatedPropertySetX ::= VBAR pathOneInPropertySet",
 /* 375 */ "pathOneInPropertySet ::= HAT iri",
 /* 376 */ "pathOneInPropertySet ::= HAT A",
 /* 377 */ "pathOneInPropertySet ::= A",
 /* 378 */ "pathOneInPropertySet ::= iri",
 /* 379 */ "triplesNode ::= collection",
 /* 380 */ "triplesNode ::= blankNodePropertyList",
 /* 381 */ "blankNodePropertyList ::= LBRACKET propertyListNotEmpty RBRACKET",
 /* 382 */ "triplesNodePath ::= collectionPath",
 /* 383 */ "triplesNodePath ::= blankNodePropertyListPath",
 /* 384 */ "blankNodePropertyListPath ::= LBRACKET propertyListPathNotEmpty RBRACKET",
 /* 385 */ "collection ::= LPARENTHESE graphNodeX RPARENTHESE",
 /* 386 */ "graphNodeX ::= graphNodeX graphNode",
 /* 387 */ "graphNodeX ::= graphNode",
 /* 388 */ "collectionPath ::= LPARENTHESE graphNodePathX RPARENTHESE",
 /* 389 */ "graphNodePathX ::= graphNodePathX graphNodePath",
 /* 390 */ "graphNodePathX ::= graphNodePath",
 /* 391 */ "graphNode ::= varOrTerm",
 /* 392 */ "graphNode ::= triplesNode",
 /* 393 */ "graphNodePath ::= varOrTerm",
 /* 394 */ "graphNodePath ::= triplesNodePath",
 /* 395 */ "varOrTerm ::= var",
 /* 396 */ "varOrTerm ::= graphTerm",
 /* 397 */ "varOrIri ::= var",
 /* 398 */ "varOrIri ::= iri",
 /* 399 */ "var ::= VAR1",
 /* 400 */ "var ::= VAR2",
 /* 401 */ "graphTerm ::= iri",
 /* 402 */ "graphTerm ::= rdfLiteral",
 /* 403 */ "graphTerm ::= numericLiteral",
 /* 404 */ "graphTerm ::= booleanLiteral",
 /* 405 */ "graphTerm ::= blankNode",
 /* 406 */ "graphTerm ::= NIL",
 /* 407 */ "expression ::= conditionalAndExpression conditionalOrExpressionX",
 /* 408 */ "expression ::= conditionalAndExpression",
 /* 409 */ "conditionalOrExpressionX ::= conditionalOrExpressionX OR conditionalAndExpression",
 /* 410 */ "conditionalOrExpressionX ::= OR conditionalAndExpression",
 /* 411 */ "conditionalAndExpression ::= relationalExpression conditionalAndExpressionX",
 /* 412 */ "conditionalAndExpression ::= relationalExpression",
 /* 413 */ "conditionalAndExpressionX ::= conditionalAndExpressionX AND relationalExpression",
 /* 414 */ "conditionalAndExpressionX ::= AND relationalExpression",
 /* 415 */ "relationalExpression ::= additiveExpression relationalExpressionX",
 /* 416 */ "relationalExpression ::= additiveExpression",
 /* 417 */ "relationalExpressionX ::= EQUAL additiveExpression",
 /* 418 */ "relationalExpressionX ::= NEQUAL additiveExpression",
 /* 419 */ "relationalExpressionX ::= SMALLERTHEN additiveExpression",
 /* 420 */ "relationalExpressionX ::= GREATERTHEN additiveExpression",
 /* 421 */ "relationalExpressionX ::= SMALLERTHENQ additiveExpression",
 /* 422 */ "relationalExpressionX ::= GREATERTHENQ additiveExpression",
 /* 423 */ "relationalExpressionX ::= IN expressionList",
 /* 424 */ "relationalExpressionX ::= NOT IN expressionList",
 /* 425 */ "additiveExpression ::= multiplicativeExpression additiveExpressionX",
 /* 426 */ "additiveExpression ::= multiplicativeExpression",
 /* 427 */ "additiveExpressionX ::= additiveExpressionX numericLiteralPositive additiveExpressionY",
 /* 428 */ "additiveExpressionX ::= additiveExpressionX numericLiteralNegative additiveExpressionY",
 /* 429 */ "additiveExpressionX ::= additiveExpressionX numericLiteralPositive",
 /* 430 */ "additiveExpressionX ::= additiveExpressionX numericLiteralNegative",
 /* 431 */ "additiveExpressionX ::= additiveExpressionX PLUS multiplicativeExpression",
 /* 432 */ "additiveExpressionX ::= additiveExpressionX MINUS multiplicativeExpression",
 /* 433 */ "additiveExpressionX ::= numericLiteralPositive additiveExpressionY",
 /* 434 */ "additiveExpressionX ::= numericLiteralNegative additiveExpressionY",
 /* 435 */ "additiveExpressionX ::= numericLiteralPositive",
 /* 436 */ "additiveExpressionX ::= numericLiteralNegative",
 /* 437 */ "additiveExpressionX ::= PLUS multiplicativeExpression",
 /* 438 */ "additiveExpressionX ::= MINUS multiplicativeExpression",
 /* 439 */ "additiveExpressionY ::= additiveExpressionY STAR unaryExpression",
 /* 440 */ "additiveExpressionY ::= additiveExpressionY SLASH unaryExpression",
 /* 441 */ "additiveExpressionY ::= STAR unaryExpression",
 /* 442 */ "additiveExpressionY ::= SLASH unaryExpression",
 /* 443 */ "multiplicativeExpression ::= unaryExpression additiveExpressionY",
 /* 444 */ "multiplicativeExpression ::= unaryExpression",
 /* 445 */ "unaryExpression ::= EXCLAMATION primaryExpression",
 /* 446 */ "unaryExpression ::= PLUS primaryExpression",
 /* 447 */ "unaryExpression ::= MINUS primaryExpression",
 /* 448 */ "unaryExpression ::= primaryExpression",
 /* 449 */ "primaryExpression ::= LPARENTHESE expression RPARENTHESE",
 /* 450 */ "primaryExpression ::= builtInCall",
 /* 451 */ "primaryExpression ::= iri",
 /* 452 */ "primaryExpression ::= functionCall",
 /* 453 */ "primaryExpression ::= rdfLiteral",
 /* 454 */ "primaryExpression ::= numericLiteral",
 /* 455 */ "primaryExpression ::= booleanLiteral",
 /* 456 */ "primaryExpression ::= var",
 /* 457 */ "builtInCall ::= aggregate",
 /* 458 */ "builtInCall ::= regexExpression",
 /* 459 */ "builtInCall ::= existsFunc",
 /* 460 */ "builtInCall ::= notExistsFunc",
 /* 461 */ "builtInCall ::= STR LPARENTHESE expression RPARENTHESE",
 /* 462 */ "builtInCall ::= LANG LPARENTHESE expression RPARENTHESE",
 /* 463 */ "builtInCall ::= LANGMATCHES LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 464 */ "builtInCall ::= DATATYPE LPARENTHESE expression RPARENTHESE",
 /* 465 */ "builtInCall ::= BOUND LPARENTHESE var RPARENTHESE",
 /* 466 */ "builtInCall ::= URI LPARENTHESE expression RPARENTHESE",
 /* 467 */ "builtInCall ::= BNODE LPARENTHESE expression RPARENTHESE",
 /* 468 */ "builtInCall ::= BNODE NIL",
 /* 469 */ "builtInCall ::= RAND NIL",
 /* 470 */ "builtInCall ::= ABS LPARENTHESE expression RPARENTHESE",
 /* 471 */ "builtInCall ::= CEIL LPARENTHESE expression RPARENTHESE",
 /* 472 */ "builtInCall ::= FLOOR LPARENTHESE expression RPARENTHESE",
 /* 473 */ "builtInCall ::= ROUND LPARENTHESE expression RPARENTHESE",
 /* 474 */ "builtInCall ::= CONCAT expressionList",
 /* 475 */ "builtInCall ::= subStringExpression",
 /* 476 */ "builtInCall ::= STRLEN LPARENTHESE expression RPARENTHESE",
 /* 477 */ "builtInCall ::= strReplaceExpression",
 /* 478 */ "builtInCall ::= UCASE LPARENTHESE expression RPARENTHESE",
 /* 479 */ "builtInCall ::= LCASE LPARENTHESE expression RPARENTHESE",
 /* 480 */ "builtInCall ::= ENCODE_FOR_URI LPARENTHESE expression RPARENTHESE",
 /* 481 */ "builtInCall ::= CONTAINS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 482 */ "builtInCall ::= STRSTARTS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 483 */ "builtInCall ::= STRENDS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 484 */ "builtInCall ::= STBEFORE LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 485 */ "builtInCall ::= STRAFTER LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 486 */ "builtInCall ::= YEAR LPARENTHESE expression RPARENTHESE",
 /* 487 */ "builtInCall ::= MONTH LPARENTHESE expression RPARENTHESE",
 /* 488 */ "builtInCall ::= DAY LPARENTHESE expression RPARENTHESE",
 /* 489 */ "builtInCall ::= HOURS LPARENTHESE expression RPARENTHESE",
 /* 490 */ "builtInCall ::= MINUTES LPARENTHESE expression RPARENTHESE",
 /* 491 */ "builtInCall ::= SECONDS LPARENTHESE expression RPARENTHESE",
 /* 492 */ "builtInCall ::= TIMEZONE LPARENTHESE expression RPARENTHESE",
 /* 493 */ "builtInCall ::= TZ LPARENTHESE expression RPARENTHESE",
 /* 494 */ "builtInCall ::= NOW NIL",
 /* 495 */ "builtInCall ::= UUID NIL",
 /* 496 */ "builtInCall ::= STRUUID NIL",
 /* 497 */ "builtInCall ::= MD5 LPARENTHESE expression RPARENTHESE",
 /* 498 */ "builtInCall ::= SHA1 LPARENTHESE expression RPARENTHESE",
 /* 499 */ "builtInCall ::= SHA256 LPARENTHESE expression RPARENTHESE",
 /* 500 */ "builtInCall ::= SHA384 LPARENTHESE expression RPARENTHESE",
 /* 501 */ "builtInCall ::= SHA512 LPARENTHESE expression RPARENTHESE",
 /* 502 */ "builtInCall ::= COALESCE expressionList",
 /* 503 */ "builtInCall ::= IF LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 504 */ "builtInCall ::= STRLANG LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 505 */ "builtInCall ::= STRDT LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 506 */ "builtInCall ::= SAMETERM LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 507 */ "builtInCall ::= ISIRI LPARENTHESE expression RPARENTHESE",
 /* 508 */ "builtInCall ::= ISURI LPARENTHESE expression RPARENTHESE",
 /* 509 */ "builtInCall ::= ISBLANK LPARENTHESE expression RPARENTHESE",
 /* 510 */ "builtInCall ::= ISLITERAL LPARENTHESE expression RPARENTHESE",
 /* 511 */ "builtInCall ::= ISNUMERIC LPARENTHESE expression RPARENTHESE",
 /* 512 */ "regexExpression ::= REGEX LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 513 */ "regexExpression ::= REGEX LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 514 */ "subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 515 */ "subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 516 */ "strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression COMMA expression RPARENTHESE",
 /* 517 */ "strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 518 */ "existsFunc ::= EXISTS groupGraphPattern",
 /* 519 */ "notExistsFunc ::= NOT EXISTS groupGraphPattern",
 /* 520 */ "aggregate ::= COUNT LPARENTHESE DISTINCT STAR RPARENTHESE",
 /* 521 */ "aggregate ::= COUNT LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 522 */ "aggregate ::= COUNT LPARENTHESE STAR RPARENTHESE",
 /* 523 */ "aggregate ::= COUNT LPARENTHESE expression RPARENTHESE",
 /* 524 */ "aggregate ::= SUM LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 525 */ "aggregate ::= MIN LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 526 */ "aggregate ::= MAX LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 527 */ "aggregate ::= AVG LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 528 */ "aggregate ::= SAMPLE LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 529 */ "aggregate ::= SUM LPARENTHESE expression RPARENTHESE",
 /* 530 */ "aggregate ::= MIN LPARENTHESE expression RPARENTHESE",
 /* 531 */ "aggregate ::= MAX LPARENTHESE expression RPARENTHESE",
 /* 532 */ "aggregate ::= AVG LPARENTHESE expression RPARENTHESE",
 /* 533 */ "aggregate ::= SAMPLE LPARENTHESE expression RPARENTHESE",
 /* 534 */ "aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE",
 /* 535 */ "aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 536 */ "aggregate ::= GROUP_CONCAT LPARENTHESE expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE",
 /* 537 */ "aggregate ::= GROUP_CONCAT LPARENTHESE expression RPARENTHESE",
 /* 538 */ "rdfLiteral ::= string LANGTAG",
 /* 539 */ "rdfLiteral ::= string DHAT iri",
 /* 540 */ "rdfLiteral ::= string",
 /* 541 */ "numericLiteral ::= numericLiteralUnsigned",
 /* 542 */ "numericLiteral ::= numericLiteralPositive",
 /* 543 */ "numericLiteral ::= numericLiteralNegative",
 /* 544 */ "numericLiteralUnsigned ::= INTEGER",
 /* 545 */ "numericLiteralUnsigned ::= DECIMAL",
 /* 546 */ "numericLiteralUnsigned ::= DOUBLE",
 /* 547 */ "numericLiteralPositive ::= INTEGER_POSITIVE",
 /* 548 */ "numericLiteralPositive ::= DECIMAL_POSITIVE",
 /* 549 */ "numericLiteralPositive ::= DOUBLE_POSITIVE",
 /* 550 */ "numericLiteralNegative ::= INTEGER_NEGATIVE",
 /* 551 */ "numericLiteralNegative ::= DECIMAL_NEGATIVE",
 /* 552 */ "numericLiteralNegative ::= DOUBLE_NEGATIVE",
 /* 553 */ "booleanLiteral ::= TRUE",
 /* 554 */ "booleanLiteral ::= FALSE",
 /* 555 */ "string ::= STRING_LITERAL1",
 /* 556 */ "string ::= STRING_LITERAL2",
 /* 557 */ "string ::= STRING_LITERAL_LONG1",
 /* 558 */ "string ::= STRING_LITERAL_LONG2",
 /* 559 */ "iri ::= IRIREF",
 /* 560 */ "iri ::= prefixedName",
 /* 561 */ "prefixedName ::= PNAME_LN",
 /* 562 */ "prefixedName ::= PNAME_NS",
 /* 563 */ "blankNode ::= BLANK_NODE_LABEL",
 /* 564 */ "blankNode ::= ANON",
  );

  public function trace($yyTraceFILE, $yyTracePrompt)
  {
    $this->yyTraceFILE = $yyTraceFILE;
    $this->yyTracePrompt = $yyTracePrompt;

    if ($yyTraceFILE === null)
      $this->yyTracePrompt = null;
    else if ($yyTracePrompt === null)
      $this->yyTraceFILE = null;
  }

  public function yy_token_name($tokenType)
  {
    if (isset(self::$yyTokenName[$tokenType]))
      return self::$yyTokenName[$tokenType];

    return "Unknown";
  }

  private function yy_destructor($yymajor, $yypminor)
  {
    switch ($yymajor)
    {
      default:  
        break;
    }
  }

  private function yy_pop_parser_stack() 
  {
    if ($this->yyidx < 0) 
      return 0;

    $yytos = $this->yystack[$this->yyidx];

    if ($this->yyTraceFILE) 
      fprintf($this->yyTraceFILE,"%sPopping %s\n", $this->yyTracePrompt, self::$yyTokenName[$yytos->major]);

    $this->yy_destructor( $yytos->major, $yytos->minor);
    unset($this->yystack[$this->yyidx]);
    $this->yyidx--;

    return $yytos->major;
  }

  public function __destruct()
  {
    while($this->yyidx >= 0)
      $this->yy_pop_parser_stack();
  }

  private function yy_find_shift_action($iLookAhead) 
  {
    $i = 0;
    $stateno = $this->yystack[$this->yyidx]->stateno;

    if ($stateno > self::YY_SHIFT_MAX || ($i = self::$yy_shift_ofst[$stateno]) == self::YY_SHIFT_USE_DFLT)
      return self::$yy_default[$stateno];

    if ($iLookAhead == self::YYNOCODE)
      return $this->YY_NO_ACTION;

    $i += $iLookAhead;
    if ($i < 0 || $i >= count(self::$yy_action) || self::$yy_lookahead[$i] != $iLookAhead)
    {
      if ($iLookAhead > 0)
      {
        if (isset(self::$yyFallback[$iLookAhead]) && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) 
        {
          if ($this->yyTraceFILE) 
            fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n", $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], self::$yyTokenName[$iFallback]);

          return $this->yy_find_shift_action($iFallback);
        }
        if (defined('ASPPisParser::YYWILDCARD'))
        {
          $j = $i - $iLookAhead + self::YYWILDCARD;
          if ($j >= 0 && $j < count(self::$yy_action) && self::$yy_lookahead[$j] == self::YYWILDCARD)
          {
            if ($this->yyTraceFILE) 
              fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n", $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], self::$yyTokenName[self::YYWILDCARD]);

            return self::$yy_action[$j];
          }
        }
      }

      return self::$yy_default[$stateno];
    }
    else
      return self::$yy_action[$i];
  }

  private function yy_find_reduce_action($stateno, $iLookAhead)
  {
    $i = 0;

    if ($stateno > self::YY_REDUCE_MAX || ($i = self::$yy_reduce_ofst[$stateno]) == self::YY_REDUCE_USE_DFLT)
      return self::$yy_default[$stateno];

    if ($iLookAhead == self::YYNOCODE)
      return $this->YY_NO_ACTION;

    $i += $iLookAhead;
    if ($i < 0 || $i >= count(self::$yy_action) || self::$yy_lookahead[$i] != $iLookAhead)
      return self::$yy_default[$stateno];

    return self::$yy_action[$i];
  }

  private function yy_shift($yyNewState, $yyMajor, $yypMinor)
  {
    $this->yyidx++;

    if (isset($this->yystack[$this->yyidx])) 
    {
      $yytos = $this->yystack[$this->yyidx];
    } 
    else 
    {
      $yytos = new stdClass;
      $this->yystack[$this->yyidx] = $yytos;
    }

    $yytos->stateno = $yyNewState;
    $yytos->major = $yyMajor;
    $yytos->minor = $yypMinor;

    if ($this->yyTraceFILE) 
    {
      fprintf($this->yyTraceFILE,"%sShift %d\n", $this->yyTracePrompt, $yyNewState);
      fprintf($this->yyTraceFILE,"%sStack:", $this->yyTracePrompt);

      for ($i = 1; $i <= $this->yyidx; $i++) 
      {
        $ent = $this->yystack[$i];
        fprintf($this->yyTraceFILE, " %s", self::$yyTokenName[$ent->major]);
      }

      fprintf($this->yyTraceFILE, "\n");
    }
  }

  private function __overflow_dead_code() 
  {
  }

  private static $yyRuleInfo = array(
  164, 1,
  164, 1,
  165, 3,
  165, 3,
  165, 3,
  165, 3,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 1,
  165, 1,
  165, 1,
  165, 1,
  167, 3,
  167, 2,
  167, 2,
  167, 1,
  167, 1,
  173, 2,
  173, 1,
  174, 3,
  174, 2,
  175, 4,
  175, 3,
  168, 4,
  168, 3,
  168, 3,
  168, 2,
  177, 2,
  177, 1,
  181, 4,
  181, 3,
  181, 3,
  181, 2,
  176, 3,
  176, 3,
  176, 3,
  176, 3,
  176, 2,
  176, 2,
  182, 6,
  182, 4,
  182, 2,
  182, 2,
  182, 2,
  182, 2,
  182, 2,
  182, 2,
  182, 5,
  182, 3,
  182, 1,
  182, 1,
  182, 1,
  182, 1,
  182, 1,
  182, 1,
  170, 7,
  170, 6,
  170, 7,
  170, 6,
  170, 6,
  170, 5,
  170, 5,
  170, 4,
  170, 6,
  170, 5,
  170, 6,
  170, 5,
  170, 6,
  170, 5,
  170, 5,
  170, 4,
  171, 5,
  171, 4,
  171, 4,
  171, 4,
  171, 3,
  171, 3,
  171, 3,
  171, 2,
  171, 5,
  171, 4,
  171, 4,
  171, 4,
  171, 3,
  171, 3,
  171, 3,
  171, 2,
  191, 2,
  191, 1,
  172, 4,
  172, 3,
  172, 3,
  172, 2,
  180, 3,
  180, 2,
  178, 2,
  178, 1,
  179, 4,
  179, 3,
  179, 3,
  179, 3,
  179, 3,
  179, 2,
  179, 2,
  179, 2,
  179, 2,
  179, 2,
  179, 2,
  179, 1,
  179, 1,
  179, 1,
  179, 1,
  195, 3,
  199, 6,
  199, 2,
  199, 2,
  199, 4,
  199, 2,
  199, 5,
  199, 1,
  199, 1,
  199, 3,
  199, 1,
  196, 2,
  200, 4,
  200, 2,
  200, 2,
  200, 3,
  200, 1,
  200, 1,
  197, 3,
  201, 2,
  201, 1,
  202, 4,
  202, 4,
  202, 3,
  202, 1,
  202, 1,
  202, 1,
  198, 2,
  198, 2,
  198, 1,
  198, 1,
  203, 2,
  204, 2,
  169, 2,
  166, 4,
  166, 3,
  166, 3,
  166, 2,
  166, 3,
  166, 2,
  166, 2,
  166, 1,
  207, 4,
  207, 3,
  207, 3,
  207, 2,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  206, 1,
  208, 5,
  208, 4,
  208, 3,
  208, 2,
  209, 3,
  209, 2,
  210, 3,
  210, 2,
  214, 3,
  214, 2,
  211, 5,
  211, 4,
  212, 5,
  212, 4,
  213, 5,
  213, 4,
  215, 2,
  216, 2,
  217, 2,
  218, 7,
  218, 6,
  218, 6,
  218, 6,
  218, 5,
  218, 5,
  218, 5,
  218, 4,
  218, 4,
  218, 4,
  218, 3,
  218, 3,
  226, 2,
  226, 1,
  224, 2,
  225, 2,
  227, 3,
  227, 2,
  221, 2,
  221, 1,
  221, 1,
  219, 2,
  220, 1,
  220, 1,
  220, 1,
  220, 1,
  223, 3,
  223, 2,
  222, 3,
  222, 2,
  228, 2,
  228, 1,
  228, 1,
  229, 4,
  229, 3,
  229, 3,
  229, 2,
  229, 3,
  229, 2,
  229, 2,
  229, 1,
  230, 5,
  230, 4,
  190, 4,
  190, 3,
  190, 2,
  190, 1,
  232, 3,
  232, 1,
  194, 3,
  194, 3,
  194, 2,
  233, 2,
  233, 1,
  233, 1,
  235, 4,
  235, 3,
  235, 3,
  235, 2,
  235, 3,
  235, 2,
  235, 2,
  235, 1,
  234, 4,
  234, 3,
  234, 2,
  234, 1,
  238, 3,
  238, 1,
  236, 1,
  236, 1,
  236, 1,
  236, 1,
  236, 1,
  236, 1,
  236, 1,
  236, 1,
  240, 2,
  242, 3,
  243, 4,
  243, 3,
  245, 6,
  246, 2,
  205, 1,
  205, 1,
  247, 4,
  247, 3,
  249, 2,
  249, 1,
  248, 6,
  248, 4,
  248, 3,
  253, 2,
  253, 1,
  251, 2,
  251, 1,
  252, 4,
  252, 2,
  252, 3,
  252, 1,
  250, 1,
  250, 1,
  250, 1,
  250, 1,
  250, 1,
  241, 2,
  239, 2,
  239, 1,
  254, 3,
  254, 2,
  244, 4,
  244, 2,
  244, 2,
  189, 2,
  255, 5,
  255, 4,
  255, 4,
  255, 3,
  255, 1,
  256, 3,
  256, 2,
  257, 4,
  257, 3,
  257, 1,
  231, 2,
  231, 2,
  231, 1,
  259, 3,
  259, 2,
  263, 4,
  263, 2,
  263, 3,
  263, 1,
  261, 1,
  261, 1,
  262, 2,
  262, 1,
  265, 3,
  265, 2,
  237, 2,
  237, 2,
  237, 1,
  266, 3,
  266, 3,
  266, 2,
  266, 2,
  270, 4,
  270, 4,
  270, 2,
  270, 3,
  270, 3,
  270, 1,
  269, 2,
  269, 1,
  272, 3,
  272, 2,
  268, 2,
  268, 1,
  274, 3,
  274, 2,
  273, 2,
  273, 1,
  276, 3,
  276, 2,
  277, 2,
  277, 1,
  275, 2,
  275, 1,
  279, 1,
  279, 1,
  279, 1,
  278, 3,
  278, 2,
  278, 1,
  278, 1,
  280, 4,
  280, 3,
  280, 2,
  280, 1,
  282, 3,
  282, 2,
  281, 2,
  281, 2,
  281, 1,
  281, 1,
  260, 1,
  260, 1,
  284, 3,
  267, 1,
  267, 1,
  286, 3,
  283, 3,
  287, 2,
  287, 1,
  285, 3,
  288, 2,
  288, 1,
  264, 1,
  264, 1,
  271, 1,
  271, 1,
  258, 1,
  258, 1,
  192, 1,
  192, 1,
  184, 1,
  184, 1,
  289, 1,
  289, 1,
  289, 1,
  289, 1,
  289, 1,
  289, 1,
  183, 2,
  183, 1,
  292, 3,
  292, 2,
  291, 2,
  291, 1,
  294, 3,
  294, 2,
  293, 2,
  293, 1,
  296, 2,
  296, 2,
  296, 2,
  296, 2,
  296, 2,
  296, 2,
  296, 2,
  296, 3,
  295, 2,
  295, 1,
  298, 3,
  298, 3,
  298, 2,
  298, 2,
  298, 3,
  298, 3,
  298, 2,
  298, 2,
  298, 1,
  298, 1,
  298, 2,
  298, 2,
  300, 3,
  300, 3,
  300, 2,
  300, 2,
  297, 2,
  297, 1,
  302, 2,
  302, 2,
  302, 2,
  302, 1,
  303, 3,
  303, 1,
  303, 1,
  303, 1,
  303, 1,
  303, 1,
  303, 1,
  303, 1,
  185, 1,
  185, 1,
  185, 1,
  185, 1,
  185, 4,
  185, 4,
  185, 6,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 2,
  185, 2,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 2,
  185, 1,
  185, 4,
  185, 1,
  185, 4,
  185, 4,
  185, 4,
  185, 6,
  185, 6,
  185, 6,
  185, 6,
  185, 6,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 2,
  185, 2,
  185, 2,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 2,
  185, 8,
  185, 6,
  185, 6,
  185, 6,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  185, 4,
  305, 8,
  305, 6,
  308, 8,
  308, 6,
  309, 10,
  309, 8,
  306, 2,
  307, 3,
  304, 5,
  304, 5,
  304, 4,
  304, 4,
  304, 5,
  304, 5,
  304, 5,
  304, 5,
  304, 5,
  304, 4,
  304, 4,
  304, 4,
  304, 4,
  304, 4,
  304, 9,
  304, 5,
  304, 8,
  304, 4,
  186, 2,
  186, 3,
  186, 1,
  187, 1,
  187, 1,
  187, 1,
  311, 1,
  311, 1,
  311, 1,
  299, 1,
  299, 1,
  299, 1,
  301, 1,
  301, 1,
  301, 1,
  188, 1,
  188, 1,
  310, 1,
  310, 1,
  310, 1,
  310, 1,
  193, 1,
  193, 1,
  312, 1,
  312, 1,
  290, 1,
  290, 1,
  );

  private function yy_reduce($yyruleno)
  {
    $yygoto = 0;              /* The next state */
    $yyact = 0;               /* The next action */
    $yygotominor = null;      /* The LHS of the rule reduced */
    $yymsp = null;            /* The top of the parser's stack */
    $yysize = 0;              /* Amount to pop the stack */

    $yymsp = $this->yystack[$this->yyidx];

    if ($this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno]))
      fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt, self::$yyRuleName[$yyruleno]);

    switch($yyruleno)
    {
      case 0: /* start ::= query */
      case 1: /* start ::= update */
#line 151 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $this->main->root = $this->yystack[$this->yyidx + 0]->minor; }
#line 3769 "resource/ASPPisParser.php"
        break;
      case 2: /* query ::= prologue selectQuery valuesClause */
      case 3: /* query ::= prologue constructQuery valuesClause */
      case 4: /* query ::= prologue describeQuery valuesClause */
      case 5: /* query ::= prologue askQuery valuesClause */
#line 154 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 500; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3777 "resource/ASPPisParser.php"
        break;
      case 6: /* query ::= selectQuery valuesClause */
      case 7: /* query ::= constructQuery valuesClause */
      case 8: /* query ::= describeQuery valuesClause */
      case 9: /* query ::= askQuery valuesClause */
      case 10: /* query ::= prologue selectQuery */
      case 11: /* query ::= prologue constructQuery */
      case 12: /* query ::= prologue describeQuery */
      case 13: /* query ::= prologue askQuery */
#line 158 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 500; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3789 "resource/ASPPisParser.php"
        break;
      case 14: /* query ::= selectQuery */
      case 15: /* query ::= constructQuery */
      case 16: /* query ::= describeQuery */
      case 17: /* query ::= askQuery */
#line 166 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor;  $yygotominor->type = 500; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3797 "resource/ASPPisParser.php"
        break;
      case 18: /* prologue ::= prefixDeclX baseDecl prefixDeclX */
#line 171 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3802 "resource/ASPPisParser.php"
        break;
      case 19: /* prologue ::= baseDecl prefixDeclX */
      case 20: /* prologue ::= prefixDeclX baseDecl */
#line 172 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3808 "resource/ASPPisParser.php"
        break;
      case 21: /* prologue ::= baseDecl */
      case 22: /* prologue ::= prefixDeclX */
#line 174 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3814 "resource/ASPPisParser.php"
        break;
      case 23: /* prefixDeclX ::= prefixDeclX prefixDecl */
#line 176 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 502; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3819 "resource/ASPPisParser.php"
        break;
      case 24: /* prefixDeclX ::= prefixDecl */
#line 177 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 502; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3824 "resource/ASPPisParser.php"
        break;
      case 25: /* baseDecl ::= BASE IRIREF DOT */
#line 179 "resource/ASPPisParser.y"
{ $this->base = $this->yystack[$this->yyidx + -1]->minor->value; $yygotominor = new NTToken(); $yygotominor->type = 503; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -2]->minor->value) . ' ' . $this->yystack[$this->yyidx + -1]->minor->value . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3829 "resource/ASPPisParser.php"
        break;
      case 26: /* baseDecl ::= BASE IRIREF */
#line 180 "resource/ASPPisParser.y"
{ $this->base = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor = new NTToken(); $yygotominor->type = 503; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -1]->minor->value) . ' ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3834 "resource/ASPPisParser.php"
        break;
      case 27: /* prefixDecl ::= PREFIX PNAME_NS IRIREF DOT */
#line 182 "resource/ASPPisParser.y"
{ $this->addNS($this->yystack[$this->yyidx + -2]->minor->value, $this->yystack[$this->yyidx + -1]->minor->value); $yygotominor = new NTToken(); $yygotominor->type = 504; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -3]->minor->value) . ' ' . $this->yystack[$this->yyidx + -2]->minor->value . $this->yystack[$this->yyidx + -1]->minor->value . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3839 "resource/ASPPisParser.php"
        break;
      case 28: /* prefixDecl ::= PREFIX PNAME_NS IRIREF */
#line 183 "resource/ASPPisParser.y"
{ $this->addNS($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value); $yygotominor = new NTToken(); $yygotominor->type = 504; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -2]->minor->value) . ' ' . $this->yystack[$this->yyidx + -1]->minor->value . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3844 "resource/ASPPisParser.php"
        break;
      case 29: /* selectQuery ::= selectClause datasetClauseX whereclause solutionModifier */
#line 185 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3849 "resource/ASPPisParser.php"
        break;
      case 30: /* selectQuery ::= selectClause datasetClauseX whereclause */
#line 186 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3854 "resource/ASPPisParser.php"
        break;
      case 31: /* selectQuery ::= selectClause whereclause solutionModifier */
#line 187 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3859 "resource/ASPPisParser.php"
        break;
      case 32: /* selectQuery ::= selectClause whereclause */
#line 188 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3864 "resource/ASPPisParser.php"
        break;
      case 33: /* datasetClauseX ::= datasetClauseX datasetClause */
#line 189 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 506; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3869 "resource/ASPPisParser.php"
        break;
      case 34: /* datasetClauseX ::= datasetClause */
#line 190 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor;  $yygotominor->type = 506;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3874 "resource/ASPPisParser.php"
        break;
      case 35: /* subSelect ::= selectClause whereclause solutionModifier valuesClause */
#line 193 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); if(!$this->yystack[$this->yyidx + -3]->minor->hasStar) {$yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -3]->minor->vars;} else {$yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars;} $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3879 "resource/ASPPisParser.php"
        break;
      case 36: /* subSelect ::= selectClause whereclause valuesClause */
      case 37: /* subSelect ::= selectClause whereclause solutionModifier */
#line 194 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); if(!$this->yystack[$this->yyidx + -2]->minor->hasStar) {$yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -2]->minor->vars;} else {$yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars;} $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3885 "resource/ASPPisParser.php"
        break;
      case 38: /* subSelect ::= selectClause whereclause */
#line 196 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); if(!$this->yystack[$this->yyidx + -1]->minor->hasStar) {$yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -1]->minor->vars;} else {$yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars;} $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3890 "resource/ASPPisParser.php"
        break;
      case 39: /* selectClause ::= SELECT DISTINCT selectClauseX */
#line 198 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->vars =  $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SELECT DISTINCT' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3895 "resource/ASPPisParser.php"
        break;
      case 40: /* selectClause ::= SELECT REDUCED selectClauseX */
#line 199 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->vars =  $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SELECT REDUCED' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3900 "resource/ASPPisParser.php"
        break;
      case 41: /* selectClause ::= SELECT DISTINCT STAR */
#line 200 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->hasStar = true; $yygotominor->query = 'SELECT DISTINCT *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3905 "resource/ASPPisParser.php"
        break;
      case 42: /* selectClause ::= SELECT REDUCED STAR */
#line 201 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->hasStar = true; $yygotominor->query = 'SELECT REDUCED *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3910 "resource/ASPPisParser.php"
        break;
      case 43: /* selectClause ::= SELECT selectClauseX */
#line 202 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SELECT ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3915 "resource/ASPPisParser.php"
        break;
      case 44: /* selectClause ::= SELECT STAR */
#line 203 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->hasStar = true; $yygotominor->query = 'SELECT *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3920 "resource/ASPPisParser.php"
        break;
      case 45: /* selectClauseX ::= selectClauseX LPARENTHESE expression AS var RPARENTHESE */
#line 204 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -5]->minor->ssVars + $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -5]->minor->query . '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3925 "resource/ASPPisParser.php"
        break;
      case 46: /* selectClauseX ::= selectClauseX LPARENTHESE expression RPARENTHESE */
#line 205 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3930 "resource/ASPPisParser.php"
        break;
      case 47: /* selectClauseX ::= selectClauseX builtInCall */
      case 48: /* selectClauseX ::= selectClauseX rdfLiteral */
      case 49: /* selectClauseX ::= selectClauseX numericLiteral */
      case 50: /* selectClauseX ::= selectClauseX booleanLiteral */
      case 52: /* selectClauseX ::= selectClauseX functionCall */
#line 206 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3939 "resource/ASPPisParser.php"
        break;
      case 51: /* selectClauseX ::= selectClauseX var */
#line 210 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3944 "resource/ASPPisParser.php"
        break;
      case 53: /* selectClauseX ::= LPARENTHESE expression AS var RPARENTHESE */
#line 212 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3949 "resource/ASPPisParser.php"
        break;
      case 54: /* selectClauseX ::= LPARENTHESE expression RPARENTHESE */
#line 213 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 509; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3954 "resource/ASPPisParser.php"
        break;
      case 55: /* selectClauseX ::= builtInCall */
      case 56: /* selectClauseX ::= rdfLiteral */
      case 57: /* selectClauseX ::= numericLiteral */
      case 58: /* selectClauseX ::= booleanLiteral */
      case 59: /* selectClauseX ::= var */
      case 60: /* selectClauseX ::= functionCall */
#line 214 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 509; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3964 "resource/ASPPisParser.php"
        break;
      case 61: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause solutionModifier */
#line 221 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -4]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . '{' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3969 "resource/ASPPisParser.php"
        break;
      case 62: /* constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause solutionModifier */
#line 222 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3974 "resource/ASPPisParser.php"
        break;
      case 63: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE solutionModifier */
#line 223 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -5]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . '{' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3979 "resource/ASPPisParser.php"
        break;
      case 64: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE solutionModifier */
#line 224 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . ' WHERE' . PHP_EOL . '{ }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3984 "resource/ASPPisParser.php"
        break;
      case 65: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause solutionModifier */
#line 225 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3989 "resource/ASPPisParser.php"
        break;
      case 66: /* constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause solutionModifier */
#line 226 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3994 "resource/ASPPisParser.php"
        break;
      case 67: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause */
#line 227 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3999 "resource/ASPPisParser.php"
        break;
      case 68: /* constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause */
#line 228 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4004 "resource/ASPPisParser.php"
        break;
      case 69: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause */
#line 229 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4009 "resource/ASPPisParser.php"
        break;
      case 70: /* constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause */
#line 230 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4014 "resource/ASPPisParser.php"
        break;
      case 71: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE */
#line 231 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . 'WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '}'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4019 "resource/ASPPisParser.php"
        break;
      case 72: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE */
#line 232 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -3]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . 'WHERE { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4024 "resource/ASPPisParser.php"
        break;
      case 73: /* constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE solutionModifier */
#line 233 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4029 "resource/ASPPisParser.php"
        break;
      case 74: /* constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE solutionModifier */
#line 234 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE { }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4034 "resource/ASPPisParser.php"
        break;
      case 75: /* constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE */
#line 235 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '}'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4039 "resource/ASPPisParser.php"
        break;
      case 76: /* constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE */
#line 236 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4044 "resource/ASPPisParser.php"
        break;
      case 77: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause solutionModifier */
#line 238 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4049 "resource/ASPPisParser.php"
        break;
      case 78: /* describeQuery ::= DESCRIBE varOrIriX whereclause solutionModifier */
#line 239 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4054 "resource/ASPPisParser.php"
        break;
      case 79: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX solutionModifier */
      case 80: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause */
#line 240 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4060 "resource/ASPPisParser.php"
        break;
      case 81: /* describeQuery ::= DESCRIBE varOrIriX solutionModifier */
      case 82: /* describeQuery ::= DESCRIBE varOrIriX whereclause */
#line 242 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4066 "resource/ASPPisParser.php"
        break;
      case 83: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX */
#line 244 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4071 "resource/ASPPisParser.php"
        break;
      case 84: /* describeQuery ::= DESCRIBE varOrIriX */
#line 245 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4076 "resource/ASPPisParser.php"
        break;
      case 85: /* describeQuery ::= DESCRIBE STAR datasetClauseX whereclause solutionModifier */
#line 246 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4081 "resource/ASPPisParser.php"
        break;
      case 86: /* describeQuery ::= DESCRIBE STAR whereclause solutionModifier */
      case 88: /* describeQuery ::= DESCRIBE STAR datasetClauseX whereclause */
#line 247 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4087 "resource/ASPPisParser.php"
        break;
      case 87: /* describeQuery ::= DESCRIBE STAR datasetClauseX solutionModifier */
#line 248 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4092 "resource/ASPPisParser.php"
        break;
      case 89: /* describeQuery ::= DESCRIBE STAR solutionModifier */
      case 90: /* describeQuery ::= DESCRIBE STAR whereclause */
      case 91: /* describeQuery ::= DESCRIBE STAR datasetClauseX */
#line 250 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4099 "resource/ASPPisParser.php"
        break;
      case 92: /* describeQuery ::= DESCRIBE STAR */
#line 253 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4104 "resource/ASPPisParser.php"
        break;
      case 93: /* varOrIriX ::= varOrIriX varOrIri */
#line 254 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 512; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4109 "resource/ASPPisParser.php"
        break;
      case 94: /* varOrIriX ::= varOrIri */
#line 255 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 512; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4114 "resource/ASPPisParser.php"
        break;
      case 95: /* askQuery ::= ASK datasetClauseX whereclause solutionModifier */
#line 257 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4119 "resource/ASPPisParser.php"
        break;
      case 96: /* askQuery ::= ASK datasetClauseX whereclause */
#line 258 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4124 "resource/ASPPisParser.php"
        break;
      case 97: /* askQuery ::= ASK whereclause solutionModifier */
#line 259 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4129 "resource/ASPPisParser.php"
        break;
      case 98: /* askQuery ::= ASK whereclause */
#line 260 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 513; $yygotominor->query = 'ASK ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4134 "resource/ASPPisParser.php"
        break;
      case 99: /* datasetClause ::= FROM NAMED iri */
#line 262 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 514; $yygotominor->query = 'FROM NAMED ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4139 "resource/ASPPisParser.php"
        break;
      case 100: /* datasetClause ::= FROM iri */
#line 263 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 514; $yygotominor->query = 'FROM ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4144 "resource/ASPPisParser.php"
        break;
      case 101: /* whereclause ::= WHERE groupGraphPattern */
#line 265 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 515; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->query = 'WHERE ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4149 "resource/ASPPisParser.php"
        break;
      case 102: /* whereclause ::= groupGraphPattern */
#line 266 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 515; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4154 "resource/ASPPisParser.php"
        break;
      case 103: /* solutionModifier ::= groupClause havingClause orderClause limitOffsetClauses */
#line 268 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4159 "resource/ASPPisParser.php"
        break;
      case 104: /* solutionModifier ::= havingClause orderClause limitOffsetClauses */
#line 269 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4164 "resource/ASPPisParser.php"
        break;
      case 105: /* solutionModifier ::= groupClause orderClause limitOffsetClauses */
      case 106: /* solutionModifier ::= groupClause havingClause limitOffsetClauses */
#line 270 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4170 "resource/ASPPisParser.php"
        break;
      case 107: /* solutionModifier ::= groupClause havingClause orderClause */
#line 272 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor); }
#line 4175 "resource/ASPPisParser.php"
        break;
      case 108: /* solutionModifier ::= groupClause havingClause */
      case 109: /* solutionModifier ::= groupClause orderClause */
      case 110: /* solutionModifier ::= groupClause limitOffsetClauses */
#line 273 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4182 "resource/ASPPisParser.php"
        break;
      case 111: /* solutionModifier ::= orderClause limitOffsetClauses */
      case 112: /* solutionModifier ::= havingClause limitOffsetClauses */
      case 113: /* solutionModifier ::= havingClause orderClause */
#line 276 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4189 "resource/ASPPisParser.php"
        break;
      case 114: /* solutionModifier ::= groupClause */
      case 115: /* solutionModifier ::= havingClause */
      case 116: /* solutionModifier ::= orderClause */
      case 117: /* solutionModifier ::= limitOffsetClauses */
#line 279 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 516; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4197 "resource/ASPPisParser.php"
        break;
      case 118: /* groupClause ::= GROUP BY groupConditionX */
#line 284 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 517; $yygotominor->query = 'GROUP BY ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4202 "resource/ASPPisParser.php"
        break;
      case 119: /* groupConditionX ::= groupConditionX LPARENTHESE expression AS var RPARENTHESE */
#line 285 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -5]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -5]->minor->query . ' (' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4207 "resource/ASPPisParser.php"
        break;
      case 120: /* groupConditionX ::= groupConditionX builtInCall */
      case 123: /* groupConditionX ::= groupConditionX var */
#line 286 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4213 "resource/ASPPisParser.php"
        break;
      case 121: /* groupConditionX ::= groupConditionX functionCall */
#line 287 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->hasFNC = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4218 "resource/ASPPisParser.php"
        break;
      case 122: /* groupConditionX ::= groupConditionX LPARENTHESE expression RPARENTHESE */
#line 288 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4223 "resource/ASPPisParser.php"
        break;
      case 124: /* groupConditionX ::= LPARENTHESE expression AS var RPARENTHESE */
#line 290 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4228 "resource/ASPPisParser.php"
        break;
      case 125: /* groupConditionX ::= builtInCall */
      case 128: /* groupConditionX ::= var */
#line 291 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 518; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4234 "resource/ASPPisParser.php"
        break;
      case 126: /* groupConditionX ::= functionCall */
#line 292 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 518; $yygotominor->hasFNC = true; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4239 "resource/ASPPisParser.php"
        break;
      case 127: /* groupConditionX ::= LPARENTHESE expression RPARENTHESE */
#line 293 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 518; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4244 "resource/ASPPisParser.php"
        break;
      case 129: /* havingClause ::= HAVING constraintX */
#line 296 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 519; $yygotominor->query = 'HAVING ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4249 "resource/ASPPisParser.php"
        break;
      case 130: /* constraintX ::= constraintX LPARENTHESE expression RPARENTHESE */
#line 297 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' (' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4254 "resource/ASPPisParser.php"
        break;
      case 131: /* constraintX ::= constraintX builtInCall */
#line 298 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4259 "resource/ASPPisParser.php"
        break;
      case 132: /* constraintX ::= constraintX functionCall */
#line 299 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->hasFNC = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4264 "resource/ASPPisParser.php"
        break;
      case 133: /* constraintX ::= LPARENTHESE expression RPARENTHESE */
#line 300 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 520; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4269 "resource/ASPPisParser.php"
        break;
      case 134: /* constraintX ::= builtInCall */
#line 301 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 520; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4274 "resource/ASPPisParser.php"
        break;
      case 135: /* constraintX ::= functionCall */
#line 302 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 520; $yygotominor->hasFNC = true;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4279 "resource/ASPPisParser.php"
        break;
      case 136: /* orderClause ::= ORDER BY orderConditionX */
#line 304 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 521; $yygotominor->query = 'ORDER BY ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4284 "resource/ASPPisParser.php"
        break;
      case 137: /* orderConditionX ::= orderConditionX orderCondition */
#line 305 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 522; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4289 "resource/ASPPisParser.php"
        break;
      case 138: /* orderConditionX ::= orderCondition */
#line 306 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 522; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4294 "resource/ASPPisParser.php"
        break;
      case 139: /* orderCondition ::= ASC LPARENTHESE expression RPARENTHESE */
#line 308 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = 'ASC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4299 "resource/ASPPisParser.php"
        break;
      case 140: /* orderCondition ::= DESC LPARENTHESE expression RPARENTHESE */
#line 309 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = 'DESC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4304 "resource/ASPPisParser.php"
        break;
      case 141: /* orderCondition ::= LPARENTHESE expression RPARENTHESE */
#line 310 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4309 "resource/ASPPisParser.php"
        break;
      case 142: /* orderCondition ::= builtInCall */
      case 143: /* orderCondition ::= functionCall */
      case 144: /* orderCondition ::= var */
#line 311 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 523; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4316 "resource/ASPPisParser.php"
        break;
      case 145: /* limitOffsetClauses ::= limitClause offsetClause */
      case 146: /* limitOffsetClauses ::= offsetClause limitClause */
#line 315 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 524; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4322 "resource/ASPPisParser.php"
        break;
      case 147: /* limitOffsetClauses ::= limitClause */
      case 148: /* limitOffsetClauses ::= offsetClause */
#line 317 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 524; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4328 "resource/ASPPisParser.php"
        break;
      case 149: /* limitClause ::= LIMIT INTEGER */
#line 320 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 525; $yygotominor->query = 'LIMIT ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4333 "resource/ASPPisParser.php"
        break;
      case 150: /* offsetClause ::= OFFSET INTEGER */
#line 322 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 526; $yygotominor->query = 'OFFSET ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4338 "resource/ASPPisParser.php"
        break;
      case 151: /* valuesClause ::= VALUES dataBlock */
#line 324 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 527; $yygotominor->query = 'VALUES ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4343 "resource/ASPPisParser.php"
        break;
      case 152: /* update ::= prologue update1 updateX SEMICOLON */
#line 326 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ;'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4348 "resource/ASPPisParser.php"
        break;
      case 153: /* update ::= prologue update1 updateX */
#line 327 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4353 "resource/ASPPisParser.php"
        break;
      case 154: /* update ::= update1 updateX SEMICOLON */
#line 328 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ;'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4358 "resource/ASPPisParser.php"
        break;
      case 155: /* update ::= update1 updateX */
#line 329 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4363 "resource/ASPPisParser.php"
        break;
      case 156: /* update ::= prologue update1 SEMICOLON */
#line 330 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' ;'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4368 "resource/ASPPisParser.php"
        break;
      case 157: /* update ::= prologue update1 */
#line 331 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4373 "resource/ASPPisParser.php"
        break;
      case 158: /* update ::= update1 SEMICOLON */
#line 332 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 528; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ;'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4378 "resource/ASPPisParser.php"
        break;
      case 159: /* update ::= update1 */
#line 333 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 528; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4383 "resource/ASPPisParser.php"
        break;
      case 160: /* updateX ::= updateX SEMICOLON prologue update1 */
#line 334 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' ;' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4388 "resource/ASPPisParser.php"
        break;
      case 161: /* updateX ::= updateX SEMICOLON update1 */
#line 335 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ;' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4393 "resource/ASPPisParser.php"
        break;
      case 162: /* updateX ::= SEMICOLON prologue update1 */
#line 336 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ';' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4398 "resource/ASPPisParser.php"
        break;
      case 163: /* updateX ::= SEMICOLON update1 */
#line 337 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 529; $yygotominor->query = ';' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4403 "resource/ASPPisParser.php"
        break;
      case 164: /* update1 ::= load */
      case 165: /* update1 ::= clear */
      case 166: /* update1 ::= drop */
      case 167: /* update1 ::= add */
      case 168: /* update1 ::= move */
      case 169: /* update1 ::= copy */
      case 170: /* update1 ::= create */
      case 171: /* update1 ::= insertData */
      case 172: /* update1 ::= deleteData */
      case 173: /* update1 ::= deletewhere */
      case 174: /* update1 ::= modify */
#line 339 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 530; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4418 "resource/ASPPisParser.php"
        break;
      case 175: /* load ::= LOAD SILENT iri INTO graphRef */
#line 351 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 531; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'LOAD SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' INTO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4423 "resource/ASPPisParser.php"
        break;
      case 176: /* load ::= LOAD iri INTO graphRef */
#line 352 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 531; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'LOAD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' INTO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4428 "resource/ASPPisParser.php"
        break;
      case 177: /* load ::= LOAD SILENT iri */
#line 353 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 531; $yygotominor->query = 'LOAD SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4433 "resource/ASPPisParser.php"
        break;
      case 178: /* load ::= LOAD iri */
#line 354 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 531; $yygotominor->query = 'LOAD ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4438 "resource/ASPPisParser.php"
        break;
      case 179: /* clear ::= CLEAR SILENT graphRefAll */
#line 356 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 532; $yygotominor->query = 'CLEAR SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4443 "resource/ASPPisParser.php"
        break;
      case 180: /* clear ::= CLEAR graphRefAll */
#line 357 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 532; $yygotominor->query = 'CLEAR ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4448 "resource/ASPPisParser.php"
        break;
      case 181: /* drop ::= DROP SILENT graphRefAll */
#line 359 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 533; $yygotominor->query = 'DROP SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4453 "resource/ASPPisParser.php"
        break;
      case 182: /* drop ::= DROP graphRefAll */
#line 360 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 533; $yygotominor->query = 'DROP ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4458 "resource/ASPPisParser.php"
        break;
      case 183: /* create ::= CREATE SILENT graphRef */
#line 362 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 534; $yygotominor->query = 'CREATE SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4463 "resource/ASPPisParser.php"
        break;
      case 184: /* create ::= CREATE graphRef */
#line 363 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 534; $yygotominor->query = 'CREATE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4468 "resource/ASPPisParser.php"
        break;
      case 185: /* add ::= ADD SILENT graphOrDefault TO graphOrDefault */
#line 365 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 535; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ADD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4473 "resource/ASPPisParser.php"
        break;
      case 186: /* add ::= ADD graphOrDefault TO graphOrDefault */
#line 366 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 535; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ADD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4478 "resource/ASPPisParser.php"
        break;
      case 187: /* move ::= MOVE SILENT graphOrDefault TO graphOrDefault */
#line 368 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 536; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MOVE SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4483 "resource/ASPPisParser.php"
        break;
      case 188: /* move ::= MOVE graphOrDefault TO graphOrDefault */
#line 369 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 536; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MOVE ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4488 "resource/ASPPisParser.php"
        break;
      case 189: /* copy ::= COPY SILENT graphOrDefault TO graphOrDefault */
#line 371 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 537; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COPY SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4493 "resource/ASPPisParser.php"
        break;
      case 190: /* copy ::= COPY graphOrDefault TO graphOrDefault */
#line 372 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 537; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COPY ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4498 "resource/ASPPisParser.php"
        break;
      case 191: /* insertData ::= INSERTDATA quadData */
#line 374 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 538; $yygotominor->query = 'DELETE DATA ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4503 "resource/ASPPisParser.php"
        break;
      case 192: /* deleteData ::= DELETEDATA quadData */
#line 376 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){ throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE DATA" . $this->yystack[$this->yyidx + 0]->minor->query); } $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 539; $yygotominor->query = 'DELETE DATA ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4508 "resource/ASPPisParser.php"
        break;
      case 193: /* deletewhere ::= DELETEWHERE quadPattern */
#line 378 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE WHERE" . $this->yystack[$this->yyidx + 0]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 540; $yygotominor->query = 'DELETE WHERE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4513 "resource/ASPPisParser.php"
        break;
      case 194: /* modify ::= WITH iri deleteClause insertClause usingClauseX WHERE groupGraphPattern */
#line 380 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -5]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4518 "resource/ASPPisParser.php"
        break;
      case 195: /* modify ::= WITH iri deleteClause usingClauseX WHERE groupGraphPattern */
#line 381 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars  + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4523 "resource/ASPPisParser.php"
        break;
      case 196: /* modify ::= WITH iri insertClause usingClauseX WHERE groupGraphPattern */
      case 197: /* modify ::= WITH iri deleteClause insertClause WHERE groupGraphPattern */
#line 382 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4529 "resource/ASPPisParser.php"
        break;
      case 198: /* modify ::= WITH iri deleteClause WHERE groupGraphPattern */
      case 199: /* modify ::= WITH iri insertClause WHERE groupGraphPattern */
#line 384 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4535 "resource/ASPPisParser.php"
        break;
      case 200: /* modify ::= deleteClause insertClause usingClauseX WHERE groupGraphPattern */
#line 386 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4540 "resource/ASPPisParser.php"
        break;
      case 201: /* modify ::= deleteClause usingClauseX WHERE groupGraphPattern */
      case 202: /* modify ::= insertClause usingClauseX WHERE groupGraphPattern */
      case 203: /* modify ::= deleteClause insertClause WHERE groupGraphPattern */
#line 387 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4547 "resource/ASPPisParser.php"
        break;
      case 204: /* modify ::= deleteClause WHERE groupGraphPattern */
      case 205: /* modify ::= insertClause WHERE groupGraphPattern */
#line 390 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4553 "resource/ASPPisParser.php"
        break;
      case 206: /* usingClauseX ::= usingClauseX usingClause */
#line 392 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 542; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4558 "resource/ASPPisParser.php"
        break;
      case 207: /* usingClauseX ::= usingClause */
#line 393 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 542; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4563 "resource/ASPPisParser.php"
        break;
      case 208: /* deleteClause ::= DELETE quadPattern */
#line 395 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE" . $this->yystack[$this->yyidx + 0]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 543; $yygotominor->query = 'DELETE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4568 "resource/ASPPisParser.php"
        break;
      case 209: /* insertClause ::= INSERT quadPattern */
#line 397 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 544; $yygotominor->query = 'INSERT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4573 "resource/ASPPisParser.php"
        break;
      case 210: /* usingClause ::= USING NAMED iri */
#line 399 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 545; $yygotominor->query = 'USING NAMED ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4578 "resource/ASPPisParser.php"
        break;
      case 211: /* usingClause ::= USING iri */
#line 400 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 545; $yygotominor->query = 'USING ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4583 "resource/ASPPisParser.php"
        break;
      case 212: /* graphOrDefault ::= GRAPH iri */
#line 402 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 546; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4588 "resource/ASPPisParser.php"
        break;
      case 213: /* graphOrDefault ::= DEFAULT */
#line 403 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 546; $yygotominor->query = 'DEFAULT';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4593 "resource/ASPPisParser.php"
        break;
      case 214: /* graphOrDefault ::= iri */
#line 404 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 546;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4598 "resource/ASPPisParser.php"
        break;
      case 215: /* graphRef ::= GRAPH iri */
#line 406 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 547; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4603 "resource/ASPPisParser.php"
        break;
      case 216: /* graphRefAll ::= graphRef */
#line 408 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 548; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4608 "resource/ASPPisParser.php"
        break;
      case 217: /* graphRefAll ::= DEFAULT */
#line 409 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'DEFAULT';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4613 "resource/ASPPisParser.php"
        break;
      case 218: /* graphRefAll ::= NAMED */
#line 410 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'NAMED';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4618 "resource/ASPPisParser.php"
        break;
      case 219: /* graphRefAll ::= ALL */
#line 411 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'ALL';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4623 "resource/ASPPisParser.php"
        break;
      case 220: /* quadPattern ::= LBRACE quads RBRACE */
#line 413 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 549; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4628 "resource/ASPPisParser.php"
        break;
      case 221: /* quadPattern ::= LBRACE RBRACE */
#line 414 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 549; $yygotominor->query = '{ }';$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4633 "resource/ASPPisParser.php"
        break;
      case 222: /* quadData ::= LBRACE quads RBRACE */
#line 416 "resource/ASPPisParser.y"
{ if(!empty($this->yystack[$this->yyidx + -1]->minor->vars)){throw new Exception("QuadPattern arent allowed to contain variables: " . $this->yystack[$this->yyidx + -1]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 550; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4638 "resource/ASPPisParser.php"
        break;
      case 223: /* quadData ::= LBRACE RBRACE */
#line 417 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 550; $yygotominor->query = '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4643 "resource/ASPPisParser.php"
        break;
      case 224: /* quads ::= triplesTemplate quadsX */
#line 419 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 551; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4648 "resource/ASPPisParser.php"
        break;
      case 225: /* quads ::= triplesTemplate */
      case 226: /* quads ::= quadsX */
#line 420 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 551; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4654 "resource/ASPPisParser.php"
        break;
      case 227: /* quadsX ::= quadsX quadsNotTriples DOT triplesTemplate */
#line 422 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4659 "resource/ASPPisParser.php"
        break;
      case 228: /* quadsX ::= quadsX quadsNotTriples triplesTemplate */
#line 423 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4664 "resource/ASPPisParser.php"
        break;
      case 229: /* quadsX ::= quadsX quadsNotTriples DOT */
#line 424 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4669 "resource/ASPPisParser.php"
        break;
      case 230: /* quadsX ::= quadsX quadsNotTriples */
      case 232: /* quadsX ::= quadsNotTriples triplesTemplate */
#line 425 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4675 "resource/ASPPisParser.php"
        break;
      case 231: /* quadsX ::= quadsNotTriples DOT triplesTemplate */
#line 426 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4680 "resource/ASPPisParser.php"
        break;
      case 233: /* quadsX ::= quadsNotTriples DOT */
#line 428 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 552; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .';$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4685 "resource/ASPPisParser.php"
        break;
      case 234: /* quadsX ::= quadsNotTriples */
#line 429 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 552; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4690 "resource/ASPPisParser.php"
        break;
      case 235: /* quadsNotTriples ::= GRAPH varOrIri LBRACE triplesTemplate RBRACE */
#line 431 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 553; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . ' { ' .  PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4695 "resource/ASPPisParser.php"
        break;
      case 236: /* quadsNotTriples ::= GRAPH varOrIri LBRACE RBRACE */
#line 432 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 553; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -2]->minor->query . ' { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4700 "resource/ASPPisParser.php"
        break;
      case 237: /* triplesTemplate ::= triplesSameSubject DOT triplesTemplateX DOT */
#line 434 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4705 "resource/ASPPisParser.php"
        break;
      case 238: /* triplesTemplate ::= triplesSameSubject DOT triplesTemplateX */
#line 435 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4710 "resource/ASPPisParser.php"
        break;
      case 239: /* triplesTemplate ::= triplesSameSubject DOT */
#line 436 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4715 "resource/ASPPisParser.php"
        break;
      case 240: /* triplesTemplate ::= triplesSameSubject */
#line 437 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4720 "resource/ASPPisParser.php"
        break;
      case 241: /* triplesTemplateX ::= triplesTemplateX DOT triplesSameSubject */
#line 438 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 555; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4725 "resource/ASPPisParser.php"
        break;
      case 242: /* triplesTemplateX ::= triplesSameSubject */
#line 439 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 555; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4730 "resource/ASPPisParser.php"
        break;
      case 243: /* groupGraphPattern ::= LBRACE groupGraphPatternSub RBRACE */
      case 244: /* groupGraphPattern ::= LBRACE subSelect RBRACE */
#line 441 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 556; $yygotominor->bindVar = array(); $yygotominor->ssVars = array(); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->gGPssVars; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4736 "resource/ASPPisParser.php"
        break;
      case 245: /* groupGraphPattern ::= LBRACE RBRACE */
#line 443 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 556; $yygotominor->query = '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4741 "resource/ASPPisParser.php"
        break;
      case 246: /* groupGraphPatternSub ::= triplesBlock groupGraphPatternSubX */
#line 445 "resource/ASPPisParser.y"
{ if(!empty($this->yystack[$this->yyidx + 0]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->bindVar, $this->yystack[$this->yyidx + -1]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 557; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4746 "resource/ASPPisParser.php"
        break;
      case 247: /* groupGraphPatternSub ::= triplesBlock */
      case 248: /* groupGraphPatternSub ::= groupGraphPatternSubX */
#line 446 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 557;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4752 "resource/ASPPisParser.php"
        break;
      case 249: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT triplesBlock */
#line 448 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -3]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -3]->minor->gGPssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->gGPssVars, $this->yystack[$this->yyidx + -3]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} if(!empty($this->yystack[$this->yyidx + -2]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->bindVar, $this->yystack[$this->yyidx + -3]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -3]->minor->gGPssVars + $this->yystack[$this->yyidx + -2]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -3]->minor->bindVar + $this->yystack[$this->yyidx + -2]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4757 "resource/ASPPisParser.php"
        break;
      case 250: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples triplesBlock */
#line 449 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->gGPssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->gGPssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} if(!empty($this->yystack[$this->yyidx + -1]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->bindVar, $this->yystack[$this->yyidx + -2]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -2]->minor->gGPssVars + $this->yystack[$this->yyidx + -1]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -2]->minor->bindVar + $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4762 "resource/ASPPisParser.php"
        break;
      case 251: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT */
#line 450 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->gGPssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->gGPssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} if(!empty($this->yystack[$this->yyidx + -1]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->bindVar, $this->yystack[$this->yyidx + -2]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -2]->minor->gGPssVars + $this->yystack[$this->yyidx + -1]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -2]->minor->bindVar + $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4767 "resource/ASPPisParser.php"
        break;
      case 252: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples */
#line 451 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->gGPssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->gGPssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} if(!empty($this->yystack[$this->yyidx + 0]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->bindVar, $this->yystack[$this->yyidx + -1]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->gGPssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -1]->minor->bindVar + $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4772 "resource/ASPPisParser.php"
        break;
      case 253: /* groupGraphPatternSubX ::= graphPatternNotTriples DOT triplesBlock */
#line 452 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -2]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -2]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4777 "resource/ASPPisParser.php"
        break;
      case 254: /* groupGraphPatternSubX ::= graphPatternNotTriples triplesBlock */
#line 453 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->gGPssVars;  $yygotominor->bindVar = $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4782 "resource/ASPPisParser.php"
        break;
      case 255: /* groupGraphPatternSubX ::= graphPatternNotTriples DOT */
#line 454 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4787 "resource/ASPPisParser.php"
        break;
      case 256: /* groupGraphPatternSubX ::= graphPatternNotTriples */
#line 455 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4792 "resource/ASPPisParser.php"
        break;
      case 257: /* triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX DOT */
#line 457 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4797 "resource/ASPPisParser.php"
        break;
      case 258: /* triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX */
#line 458 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4802 "resource/ASPPisParser.php"
        break;
      case 259: /* triplesBlock ::= triplesSameSubjectPath DOT */
#line 459 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4807 "resource/ASPPisParser.php"
        break;
      case 260: /* triplesBlock ::= triplesSameSubjectPath */
#line 460 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4812 "resource/ASPPisParser.php"
        break;
      case 261: /* triplesBlockX ::= triplesBlockX DOT triplesSameSubjectPath */
#line 461 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 560; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4817 "resource/ASPPisParser.php"
        break;
      case 262: /* triplesBlockX ::= triplesSameSubjectPath */
#line 462 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 560; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4822 "resource/ASPPisParser.php"
        break;
      case 263: /* graphPatternNotTriples ::= groupOrUnionGraphPattern */
      case 264: /* graphPatternNotTriples ::= optionalGraphPattern */
      case 265: /* graphPatternNotTriples ::= minusGraphPattern */
      case 266: /* graphPatternNotTriples ::= graphGraphPattern */
      case 267: /* graphPatternNotTriples ::= serviceGraphPattern */
#line 464 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4831 "resource/ASPPisParser.php"
        break;
      case 268: /* graphPatternNotTriples ::= filter */
#line 469 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4836 "resource/ASPPisParser.php"
        break;
      case 269: /* graphPatternNotTriples ::= bind */
#line 470 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4841 "resource/ASPPisParser.php"
        break;
      case 270: /* graphPatternNotTriples ::= inlineData */
#line 471 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4846 "resource/ASPPisParser.php"
        break;
      case 271: /* optionalGraphPattern ::= OPTIONAL groupGraphPattern */
#line 473 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 562; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'OPTIONAL ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4851 "resource/ASPPisParser.php"
        break;
      case 272: /* graphGraphPattern ::= GRAPH varOrIri groupGraphPattern */
#line 475 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 563; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4856 "resource/ASPPisParser.php"
        break;
      case 273: /* serviceGraphPattern ::= SERVICE SILENT varOrIri groupGraphPattern */
#line 477 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 564; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SERVICE SILENT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4861 "resource/ASPPisParser.php"
        break;
      case 274: /* serviceGraphPattern ::= SERVICE varOrIri groupGraphPattern */
#line 478 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 564; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SERVICE ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4866 "resource/ASPPisParser.php"
        break;
      case 275: /* bind ::= BIND LPARENTHESE expression AS var RPARENTHESE */
#line 480 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 565; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->ssVars += $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->bindVar[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4871 "resource/ASPPisParser.php"
        break;
      case 276: /* inlineData ::= VALUES dataBlock */
#line 482 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 566; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4876 "resource/ASPPisParser.php"
        break;
      case 277: /* dataBlock ::= inlineDataOneVar */
      case 278: /* dataBlock ::= inlineDataFull */
#line 484 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 567; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4882 "resource/ASPPisParser.php"
        break;
      case 279: /* inlineDataOneVar ::= var LBRACE dataBlockValueX RBRACE */
#line 487 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 568; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' { ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4887 "resource/ASPPisParser.php"
        break;
      case 280: /* inlineDataOneVar ::= var LBRACE RBRACE */
#line 488 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 568; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4892 "resource/ASPPisParser.php"
        break;
      case 281: /* dataBlockValueX ::= dataBlockValueX dataBlockValue */
#line 489 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 569; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count + 1; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4897 "resource/ASPPisParser.php"
        break;
      case 282: /* dataBlockValueX ::= dataBlockValue */
#line 490 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 569; $yygotominor->count = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4902 "resource/ASPPisParser.php"
        break;
      case 283: /* inlineDataFull ::= LPARENTHESE varX RPARENTHESE LBRACE inlineDataFullX RBRACE */
#line 492 "resource/ASPPisParser.y"
{if($this->yystack[$this->yyidx + -1]->minor->count > 0 ){if($this->yystack[$this->yyidx + -4]->minor->count == $this->yystack[$this->yyidx + -1]->minor->count){ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -4]->minor->query . ' ) {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' }';}else{throw new Exception("Different Amount of Variables and Values for Value Clause : " . $this->yystack[$this->yyidx + -4]->minor->query . ' and ' . $this->yystack[$this->yyidx + -1]->minor->query);}}else{$yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -4]->minor->query . ' ) {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' }';}$yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4907 "resource/ASPPisParser.php"
        break;
      case 284: /* inlineDataFull ::= NIL LBRACE nilX RBRACE */
#line 493 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->query = '( ) { ' . $this->yystack[$this->yyidx + -1]->minor->query . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4912 "resource/ASPPisParser.php"
        break;
      case 285: /* inlineDataFull ::= NIL LBRACE RBRACE */
#line 494 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->query = '( ) { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4917 "resource/ASPPisParser.php"
        break;
      case 286: /* nilX ::= nilX NIL */
#line 495 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 571; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4922 "resource/ASPPisParser.php"
        break;
      case 287: /* nilX ::= NIL */
#line 496 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 571; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4927 "resource/ASPPisParser.php"
        break;
      case 288: /* varX ::= varX var */
#line 497 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 572; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count + 1; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4932 "resource/ASPPisParser.php"
        break;
      case 289: /* varX ::= var */
#line 498 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 572; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->count = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4937 "resource/ASPPisParser.php"
        break;
      case 290: /* inlineDataFullX ::= inlineDataFullX LPARENTHESE dataBlockValueX RPARENTHESE */
#line 499 "resource/ASPPisParser.y"
{if($this->yystack[$this->yyidx + -3]->minor->count > 0 ){if($this->yystack[$this->yyidx + -3]->minor->count == $this->yystack[$this->yyidx + -1]->minor->count){ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -3]->minor->count; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';}else{throw new Exception("Different Amount of Values for Value Clause : " . $this->yystack[$this->yyidx + -3]->minor->query . ' and ' . $this->yystack[$this->yyidx + -2]->minor->query);}}else{$yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';}$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4942 "resource/ASPPisParser.php"
        break;
      case 291: /* inlineDataFullX ::= inlineDataFullX NIL */
#line 500 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4947 "resource/ASPPisParser.php"
        break;
      case 292: /* inlineDataFullX ::= LPARENTHESE dataBlockValueX RPARENTHESE */
#line 501 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4952 "resource/ASPPisParser.php"
        break;
      case 293: /* inlineDataFullX ::= NIL */
#line 502 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4957 "resource/ASPPisParser.php"
        break;
      case 294: /* dataBlockValue ::= iri */
      case 295: /* dataBlockValue ::= rdfLiteral */
      case 296: /* dataBlockValue ::= numericLiteral */
      case 297: /* dataBlockValue ::= booleanLiteral */
#line 504 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 574; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4965 "resource/ASPPisParser.php"
        break;
      case 298: /* dataBlockValue ::= UNDEF */
#line 508 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 574; $yygotominor->query = 'UNDEF'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4970 "resource/ASPPisParser.php"
        break;
      case 299: /* minusGraphPattern ::= SMINUS groupGraphPattern */
#line 510 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 575; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MINUS ' . PHP_EOL .  $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4975 "resource/ASPPisParser.php"
        break;
      case 300: /* groupOrUnionGraphPattern ::= groupGraphPattern groupOrUnionGraphPatternX */
#line 512 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 576; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->gGPssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4980 "resource/ASPPisParser.php"
        break;
      case 301: /* groupOrUnionGraphPattern ::= groupGraphPattern */
#line 513 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 576; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4985 "resource/ASPPisParser.php"
        break;
      case 302: /* groupOrUnionGraphPatternX ::= groupOrUnionGraphPatternX UNION groupGraphPattern */
#line 514 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 577; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -2]->minor->gGPssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars;  $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . ' UNION ' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4990 "resource/ASPPisParser.php"
        break;
      case 303: /* groupOrUnionGraphPatternX ::= UNION groupGraphPattern */
#line 515 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 577; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars;  $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'UNION ' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4995 "resource/ASPPisParser.php"
        break;
      case 304: /* filter ::= FILTER LPARENTHESE expression RPARENTHESE */
#line 517 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 578; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'FILTER ( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5000 "resource/ASPPisParser.php"
        break;
      case 305: /* filter ::= FILTER builtInCall */
      case 306: /* filter ::= FILTER functionCall */
#line 518 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 578; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'FILTER ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5006 "resource/ASPPisParser.php"
        break;
      case 307: /* functionCall ::= iri argList */
#line 521 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 579; $yygotominor->hasFNC = true; $yygotominor->hasAGG = true; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5011 "resource/ASPPisParser.php"
        break;
      case 308: /* argList ::= LPARENTHESE DISTINCT expression argListX RPARENTHESE */
#line 523 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( DISTINCT' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5016 "resource/ASPPisParser.php"
        break;
      case 309: /* argList ::= LPARENTHESE expression argListX RPARENTHESE */
#line 524 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars +  $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5021 "resource/ASPPisParser.php"
        break;
      case 310: /* argList ::= LPARENTHESE DISTINCT expression RPARENTHESE */
#line 525 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 580; $yygotominor->query = '( DISTINCT' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5026 "resource/ASPPisParser.php"
        break;
      case 311: /* argList ::= LPARENTHESE expression RPARENTHESE */
#line 526 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 580; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5031 "resource/ASPPisParser.php"
        break;
      case 312: /* argList ::= NIL */
#line 527 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->query = '( )' . PHP_EOL; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5036 "resource/ASPPisParser.php"
        break;
      case 313: /* argListX ::= argListX COMMA expression */
#line 528 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 581; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5041 "resource/ASPPisParser.php"
        break;
      case 314: /* argListX ::= COMMA expression */
#line 529 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 581; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5046 "resource/ASPPisParser.php"
        break;
      case 315: /* expressionList ::= LPARENTHESE expression argListX RPARENTHESE */
#line 531 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 582; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5051 "resource/ASPPisParser.php"
        break;
      case 316: /* expressionList ::= LPARENTHESE expression RPARENTHESE */
#line 532 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 582; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5056 "resource/ASPPisParser.php"
        break;
      case 317: /* expressionList ::= NIL */
#line 533 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 582; $yygotominor->query = '( )' . PHP_EOL; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5061 "resource/ASPPisParser.php"
        break;
      case 318: /* triplesSameSubject ::= varOrTerm propertyListNotEmpty */
      case 319: /* triplesSameSubject ::= triplesNode propertyListNotEmpty */
#line 535 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 583; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5067 "resource/ASPPisParser.php"
        break;
      case 320: /* triplesSameSubject ::= triplesNode */
#line 537 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 583; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5072 "resource/ASPPisParser.php"
        break;
      case 321: /* propertyListNotEmpty ::= verb objectList propertyListNotEmptyX */
#line 539 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 584; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5077 "resource/ASPPisParser.php"
        break;
      case 322: /* propertyListNotEmpty ::= verb objectList */
#line 540 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 584; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5082 "resource/ASPPisParser.php"
        break;
      case 323: /* propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON verb objectList */
#line 541 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5087 "resource/ASPPisParser.php"
        break;
      case 324: /* propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON */
#line 542 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query. ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5092 "resource/ASPPisParser.php"
        break;
      case 325: /* propertyListNotEmptyX ::= SEMICOLON verb objectList */
#line 543 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5097 "resource/ASPPisParser.php"
        break;
      case 326: /* propertyListNotEmptyX ::= SEMICOLON */
#line 544 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->query = ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5102 "resource/ASPPisParser.php"
        break;
      case 327: /* verb ::= varOrIri */
#line 546 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 586; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5107 "resource/ASPPisParser.php"
        break;
      case 328: /* verb ::= A */
#line 547 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 586; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5112 "resource/ASPPisParser.php"
        break;
      case 329: /* objectList ::= graphNode objectListX */
#line 549 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 587; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5117 "resource/ASPPisParser.php"
        break;
      case 330: /* objectList ::= graphNode */
#line 550 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 587; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5122 "resource/ASPPisParser.php"
        break;
      case 331: /* objectListX ::= objectListX COMMA graphNode */
#line 551 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 588; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5127 "resource/ASPPisParser.php"
        break;
      case 332: /* objectListX ::= COMMA graphNode */
#line 552 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 588; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5132 "resource/ASPPisParser.php"
        break;
      case 333: /* triplesSameSubjectPath ::= varOrTerm propertyListPathNotEmpty */
      case 334: /* triplesSameSubjectPath ::= triplesNodePath propertyListPathNotEmpty */
#line 554 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 589; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5138 "resource/ASPPisParser.php"
        break;
      case 335: /* triplesSameSubjectPath ::= triplesNodePath */
#line 556 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 589; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5143 "resource/ASPPisParser.php"
        break;
      case 336: /* propertyListPathNotEmpty ::= pathAlternative objectListPath propertyListPathNotEmptyX */
#line 558 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5148 "resource/ASPPisParser.php"
        break;
      case 337: /* propertyListPathNotEmpty ::= var objectListPath propertyListPathNotEmptyX */
#line 559 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5153 "resource/ASPPisParser.php"
        break;
      case 338: /* propertyListPathNotEmpty ::= pathAlternative objectListPath */
#line 560 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5158 "resource/ASPPisParser.php"
        break;
      case 339: /* propertyListPathNotEmpty ::= var objectListPath */
#line 561 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5163 "resource/ASPPisParser.php"
        break;
      case 340: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON pathAlternative objectList */
#line 562 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5168 "resource/ASPPisParser.php"
        break;
      case 341: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON var objectList */
#line 563 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5173 "resource/ASPPisParser.php"
        break;
      case 342: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON */
#line 564 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query. ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5178 "resource/ASPPisParser.php"
        break;
      case 343: /* propertyListPathNotEmptyX ::= SEMICOLON pathAlternative objectList */
#line 565 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5183 "resource/ASPPisParser.php"
        break;
      case 344: /* propertyListPathNotEmptyX ::= SEMICOLON var objectList */
#line 566 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5188 "resource/ASPPisParser.php"
        break;
      case 345: /* propertyListPathNotEmptyX ::= SEMICOLON */
#line 567 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->query = ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5193 "resource/ASPPisParser.php"
        break;
      case 346: /* objectListPath ::= graphNodePath objectListPathX */
#line 569 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 592; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5198 "resource/ASPPisParser.php"
        break;
      case 347: /* objectListPath ::= graphNodePath */
#line 570 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 592; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5203 "resource/ASPPisParser.php"
        break;
      case 348: /* objectListPathX ::= objectListPathX COMMA graphNodePath */
#line 571 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 593; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5208 "resource/ASPPisParser.php"
        break;
      case 349: /* objectListPathX ::= COMMA graphNodePath */
#line 572 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 593; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5213 "resource/ASPPisParser.php"
        break;
      case 350: /* pathAlternative ::= pathSequence pathAlternativeX */
#line 574 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 594; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5218 "resource/ASPPisParser.php"
        break;
      case 351: /* pathAlternative ::= pathSequence */
#line 575 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 594; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5223 "resource/ASPPisParser.php"
        break;
      case 352: /* pathAlternativeX ::= pathAlternativeX VBAR pathSequence */
#line 576 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 595; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5228 "resource/ASPPisParser.php"
        break;
      case 353: /* pathAlternativeX ::= VBAR pathSequence */
#line 577 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 595; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5233 "resource/ASPPisParser.php"
        break;
      case 354: /* pathSequence ::= pathEltOrInverse pathSequenceX */
#line 579 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 596; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5238 "resource/ASPPisParser.php"
        break;
      case 355: /* pathSequence ::= pathEltOrInverse */
#line 580 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 596; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5243 "resource/ASPPisParser.php"
        break;
      case 356: /* pathSequenceX ::= pathSequenceX SLASH pathEltOrInverse */
#line 581 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 597; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '/' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5248 "resource/ASPPisParser.php"
        break;
      case 357: /* pathSequenceX ::= SLASH pathEltOrInverse */
#line 582 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 597; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '/' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5253 "resource/ASPPisParser.php"
        break;
      case 358: /* pathElt ::= pathPrimary pathMod */
#line 584 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 598; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5258 "resource/ASPPisParser.php"
        break;
      case 359: /* pathElt ::= pathPrimary */
#line 585 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 598; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5263 "resource/ASPPisParser.php"
        break;
      case 360: /* pathEltOrInverse ::= HAT pathElt */
#line 587 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 599; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '^' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5268 "resource/ASPPisParser.php"
        break;
      case 361: /* pathEltOrInverse ::= pathElt */
#line 588 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 599; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5273 "resource/ASPPisParser.php"
        break;
      case 362: /* pathMod ::= STAR */
#line 590 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '*'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5278 "resource/ASPPisParser.php"
        break;
      case 363: /* pathMod ::= PLUS */
#line 591 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '+'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5283 "resource/ASPPisParser.php"
        break;
      case 364: /* pathMod ::= QUESTION */
#line 592 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '?'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5288 "resource/ASPPisParser.php"
        break;
      case 365: /* pathPrimary ::= LPARENTHESE pathAlternative RPARENTHESE */
#line 594 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5293 "resource/ASPPisParser.php"
        break;
      case 366: /* pathPrimary ::= EXCLAMATION pathNegatedPropertySet */
#line 595 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '!' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5298 "resource/ASPPisParser.php"
        break;
      case 367: /* pathPrimary ::= A */
#line 596 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5303 "resource/ASPPisParser.php"
        break;
      case 368: /* pathPrimary ::= iri */
#line 597 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5308 "resource/ASPPisParser.php"
        break;
      case 369: /* pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet pathNegatedPropertySetX RPARENTHESE */
#line 599 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5313 "resource/ASPPisParser.php"
        break;
      case 370: /* pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet RPARENTHESE */
#line 600 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5318 "resource/ASPPisParser.php"
        break;
      case 371: /* pathNegatedPropertySet ::= LPARENTHESE RPARENTHESE */
#line 601 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5323 "resource/ASPPisParser.php"
        break;
      case 372: /* pathNegatedPropertySet ::= pathOneInPropertySet */
#line 602 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5328 "resource/ASPPisParser.php"
        break;
      case 373: /* pathNegatedPropertySetX ::= pathNegatedPropertySetX VBAR pathOneInPropertySet */
#line 603 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 603; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5333 "resource/ASPPisParser.php"
        break;
      case 374: /* pathNegatedPropertySetX ::= VBAR pathOneInPropertySet */
#line 604 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 603; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5338 "resource/ASPPisParser.php"
        break;
      case 375: /* pathOneInPropertySet ::= HAT iri */
#line 606 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = '^' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5343 "resource/ASPPisParser.php"
        break;
      case 376: /* pathOneInPropertySet ::= HAT A */
#line 607 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 604; ; $yygotominor->query = '^rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5348 "resource/ASPPisParser.php"
        break;
      case 377: /* pathOneInPropertySet ::= A */
#line 608 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5353 "resource/ASPPisParser.php"
        break;
      case 378: /* pathOneInPropertySet ::= iri */
#line 609 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5358 "resource/ASPPisParser.php"
        break;
      case 379: /* triplesNode ::= collection */
      case 380: /* triplesNode ::= blankNodePropertyList */
#line 611 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 605; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5364 "resource/ASPPisParser.php"
        break;
      case 381: /* blankNodePropertyList ::= LBRACKET propertyListNotEmpty RBRACKET */
#line 614 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 606; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '[ ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ]'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5369 "resource/ASPPisParser.php"
        break;
      case 382: /* triplesNodePath ::= collectionPath */
      case 383: /* triplesNodePath ::= blankNodePropertyListPath */
#line 616 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 607; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5375 "resource/ASPPisParser.php"
        break;
      case 384: /* blankNodePropertyListPath ::= LBRACKET propertyListPathNotEmpty RBRACKET */
#line 619 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 608; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '[ ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ]'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5380 "resource/ASPPisParser.php"
        break;
      case 385: /* collection ::= LPARENTHESE graphNodeX RPARENTHESE */
#line 621 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 609; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5385 "resource/ASPPisParser.php"
        break;
      case 386: /* graphNodeX ::= graphNodeX graphNode */
#line 622 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 610; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5390 "resource/ASPPisParser.php"
        break;
      case 387: /* graphNodeX ::= graphNode */
#line 623 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 610; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5395 "resource/ASPPisParser.php"
        break;
      case 388: /* collectionPath ::= LPARENTHESE graphNodePathX RPARENTHESE */
#line 625 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 611; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5400 "resource/ASPPisParser.php"
        break;
      case 389: /* graphNodePathX ::= graphNodePathX graphNodePath */
#line 626 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 612; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5405 "resource/ASPPisParser.php"
        break;
      case 390: /* graphNodePathX ::= graphNodePath */
#line 627 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 612; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5410 "resource/ASPPisParser.php"
        break;
      case 391: /* graphNode ::= varOrTerm */
      case 392: /* graphNode ::= triplesNode */
#line 629 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 613; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5416 "resource/ASPPisParser.php"
        break;
      case 393: /* graphNodePath ::= varOrTerm */
      case 394: /* graphNodePath ::= triplesNodePath */
#line 632 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 614; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5422 "resource/ASPPisParser.php"
        break;
      case 395: /* varOrTerm ::= var */
#line 635 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 615; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5427 "resource/ASPPisParser.php"
        break;
      case 396: /* varOrTerm ::= graphTerm */
#line 636 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 615; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5432 "resource/ASPPisParser.php"
        break;
      case 397: /* varOrIri ::= var */
#line 638 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 616; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5437 "resource/ASPPisParser.php"
        break;
      case 398: /* varOrIri ::= iri */
#line 639 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 616; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5442 "resource/ASPPisParser.php"
        break;
      case 399: /* var ::= VAR1 */
      case 400: /* var ::= VAR2 */
#line 641 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 617; $yygotominor->vars = array(); $yygotominor->vars[$this->yystack[$this->yyidx + 0]->minor->value] = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5448 "resource/ASPPisParser.php"
        break;
      case 401: /* graphTerm ::= iri */
      case 402: /* graphTerm ::= rdfLiteral */
      case 403: /* graphTerm ::= numericLiteral */
      case 404: /* graphTerm ::= booleanLiteral */
#line 644 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5456 "resource/ASPPisParser.php"
        break;
      case 405: /* graphTerm ::= blankNode */
#line 648 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5461 "resource/ASPPisParser.php"
        break;
      case 406: /* graphTerm ::= NIL */
#line 649 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5466 "resource/ASPPisParser.php"
        break;
      case 407: /* expression ::= conditionalAndExpression conditionalOrExpressionX */
#line 651 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 619; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5471 "resource/ASPPisParser.php"
        break;
      case 408: /* expression ::= conditionalAndExpression */
#line 652 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 619; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor);$yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5476 "resource/ASPPisParser.php"
        break;
      case 409: /* conditionalOrExpressionX ::= conditionalOrExpressionX OR conditionalAndExpression */
#line 653 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 620; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' || ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5481 "resource/ASPPisParser.php"
        break;
      case 410: /* conditionalOrExpressionX ::= OR conditionalAndExpression */
#line 654 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 620; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|| ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5486 "resource/ASPPisParser.php"
        break;
      case 411: /* conditionalAndExpression ::= relationalExpression conditionalAndExpressionX */
#line 656 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 621; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5491 "resource/ASPPisParser.php"
        break;
      case 412: /* conditionalAndExpression ::= relationalExpression */
#line 657 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 621; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5496 "resource/ASPPisParser.php"
        break;
      case 413: /* conditionalAndExpressionX ::= conditionalAndExpressionX AND relationalExpression */
#line 658 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 622; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' && ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5501 "resource/ASPPisParser.php"
        break;
      case 414: /* conditionalAndExpressionX ::= AND relationalExpression */
#line 659 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 622; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '&& ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5506 "resource/ASPPisParser.php"
        break;
      case 415: /* relationalExpression ::= additiveExpression relationalExpressionX */
#line 661 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 623; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5511 "resource/ASPPisParser.php"
        break;
      case 416: /* relationalExpression ::= additiveExpression */
#line 662 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 623; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5516 "resource/ASPPisParser.php"
        break;
      case 417: /* relationalExpressionX ::= EQUAL additiveExpression */
#line 663 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5521 "resource/ASPPisParser.php"
        break;
      case 418: /* relationalExpressionX ::= NEQUAL additiveExpression */
#line 664 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '!= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5526 "resource/ASPPisParser.php"
        break;
      case 419: /* relationalExpressionX ::= SMALLERTHEN additiveExpression */
#line 665 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '< ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5531 "resource/ASPPisParser.php"
        break;
      case 420: /* relationalExpressionX ::= GREATERTHEN additiveExpression */
#line 666 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '> ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5536 "resource/ASPPisParser.php"
        break;
      case 421: /* relationalExpressionX ::= SMALLERTHENQ additiveExpression */
#line 667 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '<= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5541 "resource/ASPPisParser.php"
        break;
      case 422: /* relationalExpressionX ::= GREATERTHENQ additiveExpression */
#line 668 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '>= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5546 "resource/ASPPisParser.php"
        break;
      case 423: /* relationalExpressionX ::= IN expressionList */
#line 669 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'IN' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5551 "resource/ASPPisParser.php"
        break;
      case 424: /* relationalExpressionX ::= NOT IN expressionList */
#line 670 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'NOT IN' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5556 "resource/ASPPisParser.php"
        break;
      case 425: /* additiveExpression ::= multiplicativeExpression additiveExpressionX */
#line 672 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 625; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5561 "resource/ASPPisParser.php"
        break;
      case 426: /* additiveExpression ::= multiplicativeExpression */
#line 673 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 625; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5566 "resource/ASPPisParser.php"
        break;
      case 427: /* additiveExpressionX ::= additiveExpressionX numericLiteralPositive additiveExpressionY */
      case 428: /* additiveExpressionX ::= additiveExpressionX numericLiteralNegative additiveExpressionY */
#line 674 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5572 "resource/ASPPisParser.php"
        break;
      case 429: /* additiveExpressionX ::= additiveExpressionX numericLiteralPositive */
      case 430: /* additiveExpressionX ::= additiveExpressionX numericLiteralNegative */
#line 676 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5578 "resource/ASPPisParser.php"
        break;
      case 431: /* additiveExpressionX ::= additiveExpressionX PLUS multiplicativeExpression */
#line 678 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' + ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5583 "resource/ASPPisParser.php"
        break;
      case 432: /* additiveExpressionX ::= additiveExpressionX MINUS multiplicativeExpression */
#line 679 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' - ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5588 "resource/ASPPisParser.php"
        break;
      case 433: /* additiveExpressionX ::= numericLiteralPositive additiveExpressionY */
      case 434: /* additiveExpressionX ::= numericLiteralNegative additiveExpressionY */
#line 680 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5594 "resource/ASPPisParser.php"
        break;
      case 435: /* additiveExpressionX ::= numericLiteralPositive */
      case 436: /* additiveExpressionX ::= numericLiteralNegative */
#line 682 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5600 "resource/ASPPisParser.php"
        break;
      case 437: /* additiveExpressionX ::= PLUS multiplicativeExpression */
#line 684 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '+ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5605 "resource/ASPPisParser.php"
        break;
      case 438: /* additiveExpressionX ::= MINUS multiplicativeExpression */
#line 685 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '- ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5610 "resource/ASPPisParser.php"
        break;
      case 439: /* additiveExpressionY ::= additiveExpressionY STAR unaryExpression */
#line 686 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' * ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5615 "resource/ASPPisParser.php"
        break;
      case 440: /* additiveExpressionY ::= additiveExpressionY SLASH unaryExpression */
#line 687 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' / ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5620 "resource/ASPPisParser.php"
        break;
      case 441: /* additiveExpressionY ::= STAR unaryExpression */
#line 688 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '* ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5625 "resource/ASPPisParser.php"
        break;
      case 442: /* additiveExpressionY ::= SLASH unaryExpression */
#line 689 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '/ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5630 "resource/ASPPisParser.php"
        break;
      case 443: /* multiplicativeExpression ::= unaryExpression additiveExpressionY */
#line 691 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 628; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5635 "resource/ASPPisParser.php"
        break;
      case 444: /* multiplicativeExpression ::= unaryExpression */
#line 692 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 628; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5640 "resource/ASPPisParser.php"
        break;
      case 445: /* unaryExpression ::= EXCLAMATION primaryExpression */
#line 694 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '! ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5645 "resource/ASPPisParser.php"
        break;
      case 446: /* unaryExpression ::= PLUS primaryExpression */
#line 695 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '+ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5650 "resource/ASPPisParser.php"
        break;
      case 447: /* unaryExpression ::= MINUS primaryExpression */
#line 696 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '- ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5655 "resource/ASPPisParser.php"
        break;
      case 448: /* unaryExpression ::= primaryExpression */
#line 697 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5660 "resource/ASPPisParser.php"
        break;
      case 449: /* primaryExpression ::= LPARENTHESE expression RPARENTHESE */
#line 699 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5665 "resource/ASPPisParser.php"
        break;
      case 450: /* primaryExpression ::= builtInCall */
#line 700 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5670 "resource/ASPPisParser.php"
        break;
      case 451: /* primaryExpression ::= iri */
      case 453: /* primaryExpression ::= rdfLiteral */
      case 454: /* primaryExpression ::= numericLiteral */
      case 455: /* primaryExpression ::= booleanLiteral */
#line 701 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5678 "resource/ASPPisParser.php"
        break;
      case 452: /* primaryExpression ::= functionCall */
#line 702 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->hasFNC = true; $yygotominor->hasAGG = true; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5683 "resource/ASPPisParser.php"
        break;
      case 456: /* primaryExpression ::= var */
#line 706 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5688 "resource/ASPPisParser.php"
        break;
      case 457: /* builtInCall ::= aggregate */
      case 458: /* builtInCall ::= regexExpression */
      case 475: /* builtInCall ::= subStringExpression */
      case 477: /* builtInCall ::= strReplaceExpression */
#line 708 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5696 "resource/ASPPisParser.php"
        break;
      case 459: /* builtInCall ::= existsFunc */
      case 460: /* builtInCall ::= notExistsFunc */
#line 710 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5702 "resource/ASPPisParser.php"
        break;
      case 461: /* builtInCall ::= STR LPARENTHESE expression RPARENTHESE */
      case 462: /* builtInCall ::= LANG LPARENTHESE expression RPARENTHESE */
#line 712 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STR( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5708 "resource/ASPPisParser.php"
        break;
      case 463: /* builtInCall ::= LANGMATCHES LPARENTHESE expression COMMA expression RPARENTHESE */
#line 714 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'LANGMATCHES( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5713 "resource/ASPPisParser.php"
        break;
      case 464: /* builtInCall ::= DATATYPE LPARENTHESE expression RPARENTHESE */
#line 715 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DATATYPE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5718 "resource/ASPPisParser.php"
        break;
      case 465: /* builtInCall ::= BOUND LPARENTHESE var RPARENTHESE */
#line 716 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->query = 'BOUND( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5723 "resource/ASPPisParser.php"
        break;
      case 466: /* builtInCall ::= URI LPARENTHESE expression RPARENTHESE */
#line 717 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'URI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5728 "resource/ASPPisParser.php"
        break;
      case 467: /* builtInCall ::= BNODE LPARENTHESE expression RPARENTHESE */
#line 718 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->bNodes += $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'BNODE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5733 "resource/ASPPisParser.php"
        break;
      case 468: /* builtInCall ::= BNODE NIL */
#line 719 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->hasBN = true; $yygotominor->query = 'BNODE( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5738 "resource/ASPPisParser.php"
        break;
      case 469: /* builtInCall ::= RAND NIL */
#line 720 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'RAND( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5743 "resource/ASPPisParser.php"
        break;
      case 470: /* builtInCall ::= ABS LPARENTHESE expression RPARENTHESE */
#line 721 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ABS(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5748 "resource/ASPPisParser.php"
        break;
      case 471: /* builtInCall ::= CEIL LPARENTHESE expression RPARENTHESE */
#line 722 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars;$yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CEIL(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5753 "resource/ASPPisParser.php"
        break;
      case 472: /* builtInCall ::= FLOOR LPARENTHESE expression RPARENTHESE */
#line 723 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'FLOOR(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5758 "resource/ASPPisParser.php"
        break;
      case 473: /* builtInCall ::= ROUND LPARENTHESE expression RPARENTHESE */
#line 724 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ROUND(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5763 "resource/ASPPisParser.php"
        break;
      case 474: /* builtInCall ::= CONCAT expressionList */
#line 725 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars;$yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONCAT' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5768 "resource/ASPPisParser.php"
        break;
      case 476: /* builtInCall ::= STRLEN LPARENTHESE expression RPARENTHESE */
#line 727 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRLEN( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5773 "resource/ASPPisParser.php"
        break;
      case 478: /* builtInCall ::= UCASE LPARENTHESE expression RPARENTHESE */
#line 729 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'UCASE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5778 "resource/ASPPisParser.php"
        break;
      case 479: /* builtInCall ::= LCASE LPARENTHESE expression RPARENTHESE */
#line 730 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query =  'LCASE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5783 "resource/ASPPisParser.php"
        break;
      case 480: /* builtInCall ::= ENCODE_FOR_URI LPARENTHESE expression RPARENTHESE */
#line 731 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ENCODE_FOR_URI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5788 "resource/ASPPisParser.php"
        break;
      case 481: /* builtInCall ::= CONTAINS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 732 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CONTAINS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5793 "resource/ASPPisParser.php"
        break;
      case 482: /* builtInCall ::= STRSTARTS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 733 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRSTARTS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5798 "resource/ASPPisParser.php"
        break;
      case 483: /* builtInCall ::= STRENDS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 734 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRENDS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5803 "resource/ASPPisParser.php"
        break;
      case 484: /* builtInCall ::= STBEFORE LPARENTHESE expression COMMA expression RPARENTHESE */
#line 735 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STBEFORE( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5808 "resource/ASPPisParser.php"
        break;
      case 485: /* builtInCall ::= STRAFTER LPARENTHESE expression COMMA expression RPARENTHESE */
#line 736 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRAFTER( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5813 "resource/ASPPisParser.php"
        break;
      case 486: /* builtInCall ::= YEAR LPARENTHESE expression RPARENTHESE */
#line 737 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'YEAR( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5818 "resource/ASPPisParser.php"
        break;
      case 487: /* builtInCall ::= MONTH LPARENTHESE expression RPARENTHESE */
#line 738 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MONTH( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5823 "resource/ASPPisParser.php"
        break;
      case 488: /* builtInCall ::= DAY LPARENTHESE expression RPARENTHESE */
#line 739 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DAY( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5828 "resource/ASPPisParser.php"
        break;
      case 489: /* builtInCall ::= HOURS LPARENTHESE expression RPARENTHESE */
#line 740 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'HOURS( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5833 "resource/ASPPisParser.php"
        break;
      case 490: /* builtInCall ::= MINUTES LPARENTHESE expression RPARENTHESE */
#line 741 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MINUTES( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5838 "resource/ASPPisParser.php"
        break;
      case 491: /* builtInCall ::= SECONDS LPARENTHESE expression RPARENTHESE */
#line 742 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SECONDS( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5843 "resource/ASPPisParser.php"
        break;
      case 492: /* builtInCall ::= TIMEZONE LPARENTHESE expression RPARENTHESE */
#line 743 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'TIMEZONE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5848 "resource/ASPPisParser.php"
        break;
      case 493: /* builtInCall ::= TZ LPARENTHESE expression RPARENTHESE */
#line 744 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'TZ( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5853 "resource/ASPPisParser.php"
        break;
      case 494: /* builtInCall ::= NOW NIL */
#line 745 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'NOW( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5858 "resource/ASPPisParser.php"
        break;
      case 495: /* builtInCall ::= UUID NIL */
#line 746 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'UUID( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5863 "resource/ASPPisParser.php"
        break;
      case 496: /* builtInCall ::= STRUUID NIL */
#line 747 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'STRUUID( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5868 "resource/ASPPisParser.php"
        break;
      case 497: /* builtInCall ::= MD5 LPARENTHESE expression RPARENTHESE */
#line 748 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MD5( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5873 "resource/ASPPisParser.php"
        break;
      case 498: /* builtInCall ::= SHA1 LPARENTHESE expression RPARENTHESE */
#line 749 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA1( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5878 "resource/ASPPisParser.php"
        break;
      case 499: /* builtInCall ::= SHA256 LPARENTHESE expression RPARENTHESE */
#line 750 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA256( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5883 "resource/ASPPisParser.php"
        break;
      case 500: /* builtInCall ::= SHA384 LPARENTHESE expression RPARENTHESE */
#line 751 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA384( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5888 "resource/ASPPisParser.php"
        break;
      case 501: /* builtInCall ::= SHA512 LPARENTHESE expression RPARENTHESE */
#line 752 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA512( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5893 "resource/ASPPisParser.php"
        break;
      case 502: /* builtInCall ::= COALESCE expressionList */
#line 753 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COALESCE' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5898 "resource/ASPPisParser.php"
        break;
      case 503: /* builtInCall ::= IF LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 754 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'IF( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query .  ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5903 "resource/ASPPisParser.php"
        break;
      case 504: /* builtInCall ::= STRLANG LPARENTHESE expression COMMA expression RPARENTHESE */
#line 755 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRLANG( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5908 "resource/ASPPisParser.php"
        break;
      case 505: /* builtInCall ::= STRDT LPARENTHESE expression COMMA expression RPARENTHESE */
#line 756 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRDT( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5913 "resource/ASPPisParser.php"
        break;
      case 506: /* builtInCall ::= SAMETERM LPARENTHESE expression COMMA expression RPARENTHESE */
#line 757 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SAMETERM( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5918 "resource/ASPPisParser.php"
        break;
      case 507: /* builtInCall ::= ISIRI LPARENTHESE expression RPARENTHESE */
#line 758 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISIRI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5923 "resource/ASPPisParser.php"
        break;
      case 508: /* builtInCall ::= ISURI LPARENTHESE expression RPARENTHESE */
#line 759 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISURI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5928 "resource/ASPPisParser.php"
        break;
      case 509: /* builtInCall ::= ISBLANK LPARENTHESE expression RPARENTHESE */
#line 760 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISBLANK( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5933 "resource/ASPPisParser.php"
        break;
      case 510: /* builtInCall ::= ISLITERAL LPARENTHESE expression RPARENTHESE */
#line 761 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISLITERAL( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5938 "resource/ASPPisParser.php"
        break;
      case 511: /* builtInCall ::= ISNUMERIC LPARENTHESE expression RPARENTHESE */
#line 762 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISNUMERIC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5943 "resource/ASPPisParser.php"
        break;
      case 512: /* regexExpression ::= REGEX LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 764 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 632; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REGEX( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5948 "resource/ASPPisParser.php"
        break;
      case 513: /* regexExpression ::= REGEX LPARENTHESE expression COMMA expression RPARENTHESE */
#line 765 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 632; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REGEX( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5953 "resource/ASPPisParser.php"
        break;
      case 514: /* subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 767 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 633; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SUBSTR( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5958 "resource/ASPPisParser.php"
        break;
      case 515: /* subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression RPARENTHESE */
#line 768 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 633; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SUBSTR( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5963 "resource/ASPPisParser.php"
        break;
      case 516: /* strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression COMMA expression RPARENTHESE */
#line 770 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 634; $yygotominor->copyBools($this->yystack[$this->yyidx + -7]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -7]->minor->vars + $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -7]->minor->bNodes + $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REPLACE( ' . $this->yystack[$this->yyidx + -7]->minor->query . ', ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -9]->minor, $this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5968 "resource/ASPPisParser.php"
        break;
      case 517: /* strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 771 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 634; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REPLACE( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5973 "resource/ASPPisParser.php"
        break;
      case 518: /* existsFunc ::= EXISTS groupGraphPattern */
#line 773 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 635; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'EXISTS ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5978 "resource/ASPPisParser.php"
        break;
      case 519: /* notExistsFunc ::= NOT EXISTS groupGraphPattern */
#line 775 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 636; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'NOT EXISTS ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5983 "resource/ASPPisParser.php"
        break;
      case 520: /* aggregate ::= COUNT LPARENTHESE DISTINCT STAR RPARENTHESE */
#line 777 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( DISTINCT * )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5988 "resource/ASPPisParser.php"
        break;
      case 521: /* aggregate ::= COUNT LPARENTHESE DISTINCT expression RPARENTHESE */
#line 778 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5993 "resource/ASPPisParser.php"
        break;
      case 522: /* aggregate ::= COUNT LPARENTHESE STAR RPARENTHESE */
#line 779 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( * )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5998 "resource/ASPPisParser.php"
        break;
      case 523: /* aggregate ::= COUNT LPARENTHESE expression RPARENTHESE */
#line 780 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6003 "resource/ASPPisParser.php"
        break;
      case 524: /* aggregate ::= SUM LPARENTHESE DISTINCT expression RPARENTHESE */
#line 781 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SUM( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6008 "resource/ASPPisParser.php"
        break;
      case 525: /* aggregate ::= MIN LPARENTHESE DISTINCT expression RPARENTHESE */
#line 782 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MIN( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6013 "resource/ASPPisParser.php"
        break;
      case 526: /* aggregate ::= MAX LPARENTHESE DISTINCT expression RPARENTHESE */
#line 783 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MAX( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6018 "resource/ASPPisParser.php"
        break;
      case 527: /* aggregate ::= AVG LPARENTHESE DISTINCT expression RPARENTHESE */
#line 784 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'AVG( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6023 "resource/ASPPisParser.php"
        break;
      case 528: /* aggregate ::= SAMPLE LPARENTHESE DISTINCT expression RPARENTHESE */
#line 785 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SAMPLE( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6028 "resource/ASPPisParser.php"
        break;
      case 529: /* aggregate ::= SUM LPARENTHESE expression RPARENTHESE */
#line 786 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SUM( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6033 "resource/ASPPisParser.php"
        break;
      case 530: /* aggregate ::= MIN LPARENTHESE expression RPARENTHESE */
#line 787 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MIN( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6038 "resource/ASPPisParser.php"
        break;
      case 531: /* aggregate ::= MAX LPARENTHESE expression RPARENTHESE */
#line 788 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MAX( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6043 "resource/ASPPisParser.php"
        break;
      case 532: /* aggregate ::= AVG LPARENTHESE expression RPARENTHESE */
#line 789 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'AVG( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6048 "resource/ASPPisParser.php"
        break;
      case 533: /* aggregate ::= SAMPLE LPARENTHESE expression RPARENTHESE */
#line 790 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SAMPLE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6053 "resource/ASPPisParser.php"
        break;
      case 534: /* aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE */
#line 791 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( DISTINCT ' . $this->yystack[$this->yyidx + -5]->minor->query . ' ; SEPARATOR = ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6058 "resource/ASPPisParser.php"
        break;
      case 535: /* aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression RPARENTHESE */
#line 792 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6063 "resource/ASPPisParser.php"
        break;
      case 536: /* aggregate ::= GROUP_CONCAT LPARENTHESE expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE */
#line 793 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( ' . $this->yystack[$this->yyidx + -5]->minor->query . ' ; SEPARATOR = ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6068 "resource/ASPPisParser.php"
        break;
      case 537: /* aggregate ::= GROUP_CONCAT LPARENTHESE expression RPARENTHESE */
#line 794 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6073 "resource/ASPPisParser.php"
        break;
      case 538: /* rdfLiteral ::= string LANGTAG */
#line 796 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6078 "resource/ASPPisParser.php"
        break;
      case 539: /* rdfLiteral ::= string DHAT iri */
#line 797 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->value . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6083 "resource/ASPPisParser.php"
        break;
      case 540: /* rdfLiteral ::= string */
#line 798 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6088 "resource/ASPPisParser.php"
        break;
      case 541: /* numericLiteral ::= numericLiteralUnsigned */
      case 542: /* numericLiteral ::= numericLiteralPositive */
      case 543: /* numericLiteral ::= numericLiteralNegative */
#line 800 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 639; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6095 "resource/ASPPisParser.php"
        break;
      case 544: /* numericLiteralUnsigned ::= INTEGER */
      case 545: /* numericLiteralUnsigned ::= DECIMAL */
      case 546: /* numericLiteralUnsigned ::= DOUBLE */
#line 804 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 640; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6102 "resource/ASPPisParser.php"
        break;
      case 547: /* numericLiteralPositive ::= INTEGER_POSITIVE */
      case 548: /* numericLiteralPositive ::= DECIMAL_POSITIVE */
      case 549: /* numericLiteralPositive ::= DOUBLE_POSITIVE */
#line 808 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 641; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6109 "resource/ASPPisParser.php"
        break;
      case 550: /* numericLiteralNegative ::= INTEGER_NEGATIVE */
      case 551: /* numericLiteralNegative ::= DECIMAL_NEGATIVE */
      case 552: /* numericLiteralNegative ::= DOUBLE_NEGATIVE */
#line 812 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 642; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6116 "resource/ASPPisParser.php"
        break;
      case 553: /* booleanLiteral ::= TRUE */
#line 816 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 643; $yygotominor->query = "true";$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6121 "resource/ASPPisParser.php"
        break;
      case 554: /* booleanLiteral ::= FALSE */
#line 817 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 643; $yygotominor->query = "false";$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6126 "resource/ASPPisParser.php"
        break;
      case 555: /* string ::= STRING_LITERAL1 */
      case 556: /* string ::= STRING_LITERAL2 */
      case 557: /* string ::= STRING_LITERAL_LONG1 */
      case 558: /* string ::= STRING_LITERAL_LONG2 */
#line 819 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 644; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6134 "resource/ASPPisParser.php"
        break;
      case 559: /* iri ::= IRIREF */
#line 824 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 645; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6139 "resource/ASPPisParser.php"
        break;
      case 560: /* iri ::= prefixedName */
#line 825 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 645; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6144 "resource/ASPPisParser.php"
        break;
      case 561: /* prefixedName ::= PNAME_LN */
      case 562: /* prefixedName ::= PNAME_NS */
#line 827 "resource/ASPPisParser.y"
{if(!$this->checkNS($this->yystack[$this->yyidx + 0]->minor->value)){throw new Exception("Missing Prefix for " . $this->yystack[$this->yyidx + 0]->minor->value);} $yygotominor = new NTToken(); $yygotominor->type = 646; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6150 "resource/ASPPisParser.php"
        break;
      case 563: /* blankNode ::= BLANK_NODE_LABEL */
#line 830 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 647; $yygotominor->hasBN = true; $yygotominor->bNodes[$this->yystack[$this->yyidx + 0]->minor->value] = 1;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6155 "resource/ASPPisParser.php"
        break;
      case 564: /* blankNode ::= ANON */
#line 831 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 647; $yygotominor->hasBN = true;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6160 "resource/ASPPisParser.php"
        break;
      default:
        break;
    }

    $yygoto = self::$yyRuleInfo[2 * $yyruleno];
    $yysize = self::$yyRuleInfo[(2 * $yyruleno) + 1];

    $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;

    $this->yyidx -= $yysize;
    $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);

    if ($yyact < self::YYNSTATE)
      $this->yy_shift($yyact, $yygoto, $yygotominor);
    else if ($yyact == self::YYNSTATE + self::YYNRULE + 1)
      $this->yy_accept();
  }

  private function yy_parse_failed()
  {
    if ($this->yyTraceFILE)
      fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);

    while ($this->yyidx >= 0) 
      $this->yy_pop_parser_stack();

#line 144 "resource/ASPPisParser.y"

    throw new Exception('Couldnt finish Parsing (Unkown Problem)');
#line 6191 "resource/ASPPisParser.php"
  }

  private function yy_syntax_error($yymajor, $yyminor = null)
  {
    $message = 'Unexpected ' . $this->yy_token_name($yymajor);
    if (null !== $yyminor) {
      $message .= '(' . $yyminor->value . ')';
    }
  }

  private function yy_accept()
  {
    if ($this->yyTraceFILE)
      fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);

    while ($this->yyidx >= 0) 
      $this->yy_pop_parser_stack();
#line 140 "resource/ASPPisParser.y"


#line 6212 "resource/ASPPisParser.php"
  }

  public function doParse($yymajor, $yyminor = null)
  {
    $yyact = 0; /* The parser action. */
    $yyendofinput = 0; /* True if we are at the end of input */
    $yyerrorhit = 0; /* True if yymajor has invoked an error */

    /* (re)initialize the parser, if necessary */
    if ($this->yyidx < 0) 
    {
      $this->yyidx = 0;
      $this->yyerrcnt = - 1;
      $ent = new stdClass;
      $ent->stateno = 0;
      $ent->major = 0;
      $ent->minor = null;
      $this->yystack = array(0 => $ent);
      $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
      $this->YY_ACCEPT_ACTION = self::YYNSTATE + self::YYNRULE + 1;
      $this->YY_ERROR_ACTION = self::YYNSTATE + self::YYNRULE;
    }

    $yyendofinput = ($yymajor == 0);

    if ($this->yyTraceFILE) 
      fprintf($this->yyTraceFILE, "%sInput %s\n", $this->yyTracePrompt, self::$yyTokenName[$yymajor]);

    do 
    {
      $yyact = $this->yy_find_shift_action($yymajor);

      if ($yyact < self::YYNSTATE) 
      {
        $this->yy_shift($yyact, $yymajor, $yyminor);
        $this->yyerrcnt--;

        if ($yyendofinput && $this->yyidx >= 0) 
          $yymajor = 0;
        else
          $yymajor = self::YYNOCODE;
      } 
      else if ($yyact < self::YYNSTATE + self::YYNRULE) 
      {
        $this->yy_reduce($yyact - self::YYNSTATE);
      }
      else if ($yyact == $this->YY_ERROR_ACTION) 
      {
        if ($this->yyTraceFILE) 
          fprintf($this->yyTraceFILE, "%sSyntax Error!\n", $this->yyTracePrompt);

        if (defined('self::YYERRORSYMBOL')) 
        {
          if ($this->yyerrcnt < 0) 
            $this->yy_syntax_error($yymajor, $yyminor);

          $yymx = $this->yystack[$this->yyidx]->major;

          if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) 
          {
            if ($this->yyTraceFILE) 
              fprintf($this->yyTraceFILE, "%sDiscard input token %s\n", $this->yyTracePrompt, self::$yyTokenName[$yymajor]);

            $this->yy_destructor($yymajor, $yyminor);
            $yymajor = self::YYNOCODE;
          }
          else
          {
            while ($this->yyidx >= 0 && $yymx != self::YYERRORSYMBOL && ($yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, self::YYERRORSYMBOL)) >= self::YYNSTATE) 
              $this->yy_pop_parser_stack();

            if ($this->yyidx < 0 || $yymajor == 0) 
            {
              $this->yy_destructor($yymajor, $yyminor);
              $this->yy_parse_failed();
              $yymajor = self::YYNOCODE;
            }
            else if ($yymx != self::YYERRORSYMBOL) 
            {
              $this->yy_shift($yyact, self::YYERRORSYMBOL, 0);
            }
          }

          $this->yyerrcnt = 3;
          $yyerrorhit = 1;
        }
        else
        { 
          if ($this->yyerrcnt <= 0) 
            $this->yy_syntax_error($yymajor, $yyminor);

          $this->yyerrcnt = 3;
          $this->yy_destructor($yymajor, $yyminor);

          if ($yyendofinput) 
            $this->yy_parse_failed();

          $yymajor = self::YYNOCODE;
        }
      }
      else
      {
        $this->yy_accept();
        $yymajor = self::YYNOCODE;
      }
    }
    while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
  }
}

?>
