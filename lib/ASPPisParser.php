<?php

#line 11 "resource/ASPPisParser.y"
 /* this will be copied blindly */
namespace aSPPis\lib;
use \stdClass;
use \Exception;
class NTToken {
    /* arrays, the array will be considered as sets, as only a few situations need an actual check for duplicates. 
     * This is achieved in PHP with using the value as key and a uniformed value for all keys. 
     * Example: ?text will be saved in the array as array['?text'] = 1, that way if we merge it with another array through the union operator (+)
     * we will get a resultarray with only 1 key called ?text instead of 2 arbitrary keys with both having ?text as value.
     * Furthermore this allows for a quick isset check for searching duplicates
     */
    public $vars = array();
    /* need to somehow check Scoping for (only?) vars noted with AS, only needs to be checked (for subselects) until a whereclause (and for the select it belongs to), 
     *the as's of the selectclause count for the above area as well though 
     */
    public $ssVars = array();
    public $bNodes = array();
    /* needs to be an array, because multiple binds can be reduced and be checked against one triplegroup preceding all binds */
    public $bindVar = array();
    /* non-arrays */
    public $query = null;
    public $counter = 0;
    //NTToken Type to differentiate different Tokens in the Syntax Tree, starts at 500 (TTokens use 1-164 right now, up to 500 is just a buffer)
    public $type = -1;
    //Childs of the NTToken to create the parse tree
    public $childs = array();
    /* booleans */
    public $hasSS = false;
    public $hasBN = false;
    public $hasFNC = false;
    public $hasAGG = false;

  /* to reduce the amount of isset calls the 'usual' smaller set should be set 1, returns null if NO duplicates are found
   * might be useful to return the duplicate for the error message tho (TODO)
   * array_intersect_key could be faster 
   */
  function noDuplicates($set1, $set2) {
		$noDuplicate = null;
        if ($set1 == null || $set2 == null) {
            return $noDuplicate;
        } else {
            foreach (array_keys($set1) as $key) {
                if (isset($set2[$key])) {
                    $noDuplicate = $key;
                    break;
                }
    	      }
        }
        return $noDuplicate;
	}

	function copyBools($tmpToken) {
		if ($this->hasBN == false) {
			  $this->hasBN = $tmpToken->hasBN;
		}
		if ($this->hasFNC == false) {
			  $this->hasFNC = $tmpToken->hasFNC;
		}
		if ($this->hasAGG == false) {
			  $this->hasAGG = $tmpToken->hasAGG;
		}
    if ($this->hasSS == false) {
        $this->hasSS == $tmpToken->hasSS;
    }
	}
}  
#line 71 "resource/ASPPisParser.php"

class ASPPisParser {
  private $yyidx = -1;               /* Index of top element in stack */
  private $yyerrcnt;                 /* Shifts left before out of the error */
  private $yystack = array();
  private $yyTraceFILE = null;
  private $yyTracePrompt = null;

#line 79 "resource/ASPPisParser.y"

/* putting the ns and base information in the parser class and adding access to the SparqlPHPParserMain.php, removes the necessity to use 
 * global variables/add another parameter to the parse function.
 */
public $main;
public $base = null;
public $allNS = array();

function __construct ($parent) {
    $this->main = $parent;
}

function addNS($alias, $iri) {
    $this->allNS[$alias] = $iri;
}

function checkNS($alias) {
    if ($alias == null) {
        return false;
    }
    //alias contains the part after the : as well, so it needs to be stripped, first locate the position
    $pos = strpos($alias, ':');
    if($pos !== false) {
        //keep : as an empty prefix is allowed
        $strippedAlias = substr($alias, 0, $pos + 1);
        if (isset($this->allNS[$strippedAlias])) {
            return true;
        }
    }
    return false;
}

//removed the base check, its actually not necessary/queries its allowed to have <x> as iri...
//actual iri reference transformation is rather complex ( http://www.ietf.org/rfc/rfc3986.txt )
//unsure if that is necessary for this project though
function checkBase($alias) {
    if (strcmp(substr($alias,1,7),'http://') == 0 || strcmp(substr($alias,1,8),'https://') == 0) {
        return true;
    } else {
        if(isset($this->base)) {
            return true;
        } else {
            return false;
        }
    }
}
#line 127 "resource/ASPPisParser.php"

  const TK_PRAGMA =  1;
  const TK_BASE =  2;
  const TK_IRIREF =  3;
  const TK_DOT =  4;
  const TK_PREFIX =  5;
  const TK_PNAME_NS =  6;
  const TK_SELECT =  7;
  const TK_DISTINCT =  8;
  const TK_REDUCED =  9;
  const TK_STAR = 10;
  const TK_LPARENTHESE = 11;
  const TK_AS = 12;
  const TK_RPARENTHESE = 13;
  const TK_CONSTRUCT = 14;
  const TK_LBRACE = 15;
  const TK_RBRACE = 16;
  const TK_WHERE = 17;
  const TK_DESCRIBE = 18;
  const TK_ASK = 19;
  const TK_FROM = 20;
  const TK_NAMED = 21;
  const TK_GROUP = 22;
  const TK_BY = 23;
  const TK_HAVING = 24;
  const TK_ORDER = 25;
  const TK_ASC = 26;
  const TK_DESC = 27;
  const TK_LIMIT = 28;
  const TK_INTEGER = 29;
  const TK_OFFSET = 30;
  const TK_VALUES = 31;
  const TK_SEMICOLON = 32;
  const TK_LOAD = 33;
  const TK_SILENT = 34;
  const TK_INTO = 35;
  const TK_CLEAR = 36;
  const TK_DROP = 37;
  const TK_CREATE = 38;
  const TK_ADD = 39;
  const TK_TO = 40;
  const TK_MOVE = 41;
  const TK_COPY = 42;
  const TK_INSERTDATA = 43;
  const TK_DELETEDATA = 44;
  const TK_DELETEWHERE = 45;
  const TK_WITH = 46;
  const TK_DELETE = 47;
  const TK_INSERT = 48;
  const TK_USING = 49;
  const TK_GRAPH = 50;
  const TK_DEFAULT = 51;
  const TK_ALL = 52;
  const TK_OPTIONAL = 53;
  const TK_SERVICE = 54;
  const TK_BIND = 55;
  const TK_NIL = 56;
  const TK_UNDEF = 57;
  const TK_SMINUS = 58;
  const TK_UNION = 59;
  const TK_GroupGraphPattern = 60;
  const TK_FILTER = 61;
  const TK_COMMA = 62;
  const TK_A = 63;
  const TK_VBAR = 64;
  const TK_SLASH = 65;
  const TK_HAT = 66;
  const TK_PLUS = 67;
  const TK_QUESTION = 68;
  const TK_EXCLAMATION = 69;
  const TK_LBRACKET = 70;
  const TK_RBRACKET = 71;
  const TK_VAR1 = 72;
  const TK_VAR2 = 73;
  const TK_OR = 74;
  const TK_AND = 75;
  const TK_EQUAL = 76;
  const TK_NEQUAL = 77;
  const TK_SMALLERTHEN = 78;
  const TK_GREATERTHEN = 79;
  const TK_SMALLERTHENQ = 80;
  const TK_GREATERTHENQ = 81;
  const TK_IN = 82;
  const TK_NOT = 83;
  const TK_MINUS = 84;
  const TK_STR = 85;
  const TK_LANG = 86;
  const TK_LANGMATCHES = 87;
  const TK_DATATYPE = 88;
  const TK_BOUND = 89;
  const TK_URI = 90;
  const TK_BNODE = 91;
  const TK_RAND = 92;
  const TK_ABS = 93;
  const TK_CEIL = 94;
  const TK_FLOOR = 95;
  const TK_ROUND = 96;
  const TK_CONCAT = 97;
  const TK_STRLEN = 98;
  const TK_UCASE = 99;
  const TK_LCASE = 100;
  const TK_ENCODE_FOR_URI = 101;
  const TK_CONTAINS = 102;
  const TK_STRSTARTS = 103;
  const TK_STRENDS = 104;
  const TK_STBEFORE = 105;
  const TK_STRAFTER = 106;
  const TK_YEAR = 107;
  const TK_MONTH = 108;
  const TK_DAY = 109;
  const TK_HOURS = 110;
  const TK_MINUTES = 111;
  const TK_SECONDS = 112;
  const TK_TIMEZONE = 113;
  const TK_TZ = 114;
  const TK_NOW = 115;
  const TK_UUID = 116;
  const TK_STRUUID = 117;
  const TK_MD5 = 118;
  const TK_SHA1 = 119;
  const TK_SHA256 = 120;
  const TK_SHA384 = 121;
  const TK_SHA512 = 122;
  const TK_COALESCE = 123;
  const TK_IF = 124;
  const TK_STRLANG = 125;
  const TK_STRDT = 126;
  const TK_SAMETERM = 127;
  const TK_ISIRI = 128;
  const TK_ISURI = 129;
  const TK_ISBLANK = 130;
  const TK_ISLITERAL = 131;
  const TK_ISNUMERIC = 132;
  const TK_REGEX = 133;
  const TK_SUBSTR = 134;
  const TK_REPLACE = 135;
  const TK_EXISTS = 136;
  const TK_COUNT = 137;
  const TK_SUM = 138;
  const TK_MIN = 139;
  const TK_MAX = 140;
  const TK_AVG = 141;
  const TK_SAMPLE = 142;
  const TK_GROUP_CONCAT = 143;
  const TK_SEPARATOR = 144;
  const TK_LANGTAG = 145;
  const TK_DHAT = 146;
  const TK_DECIMAL = 147;
  const TK_DOUBLE = 148;
  const TK_INTEGER_POSITIVE = 149;
  const TK_DECIMAL_POSITIVE = 150;
  const TK_DOUBLE_POSITIVE = 151;
  const TK_INTEGER_NEGATIVE = 152;
  const TK_DECIMAL_NEGATIVE = 153;
  const TK_DOUBLE_NEGATIVE = 154;
  const TK_TRUE = 155;
  const TK_FALSE = 156;
  const TK_STRING_LITERAL1 = 157;
  const TK_STRING_LITERAL2 = 158;
  const TK_STRING_LITERAL_LONG1 = 159;
  const TK_STRING_LITERAL_LONG2 = 160;
  const TK_PNAME_LN = 161;
  const TK_BLANK_NODE_LABEL = 162;
  const TK_ANON = 163;

  const YYNOCODE = 315;
  const YYNSTATE = 1042;
  const YYNRULE = 562;

  private $YY_NO_ACTION;
  private $YY_ACCEPT_ACTION;
  private $YY_ERROR_ACTION;

  /* action tables */ 

static $yy_action = array(
 /*     0 */   619,  591,  223,  622,  588,    4,  115,  547,   14,  591,
 /*    10 */   169,  407,  588,  269,  406,  403,  405,  216,  231,  588,
 /*    20 */   258,  309,  519,  310,  169,  407,  626,  295,  406,  308,
 /*    30 */   405,  224,  263,    1,  673,  259,  260,  315,  234,  538,
 /*    40 */   235,  236,  354,  357,  358,  273,  366,  363,  648,  225,
 /*    50 */   998,  986,  990,  684,  679,  681,  682,  683,  680,  541,
 /*    60 */   248,  192,  293,  941,  119,  406,  118,  405,  221,  649,
 /*    70 */   650,  341,  220,  568,  649,  650,  345,  788,  596,  176,
 /*    80 */   521,  120,  412,  413,  415,  418,  420,  422,  384,  425,
 /*    90 */   426,  428,  430,  432,  298,  434,  436,  438,  440,  442,
 /*   100 */   445,  448,  451,  454,  457,  459,  461,  463,  465,  467,
 /*   110 */   469,  471,  473,  474,  475,  476,  478,  480,  482,  484,
 /*   120 */   300,  486,  490,  493,  496,  499,  501,  503,  505,  507,
 /*   130 */   509,  512,  515,  330,  522,  525,  527,  529,  531,  533,
 /*   140 */   535,  279,  317, 1022,  627,  628,  629,  630,  631,  632,
 /*   150 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  619,
 /*   160 */   591,  843,  622,  588,   12,  378,  913,   14,  624,  620,
 /*   170 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*   180 */   623,  620,  227,  257,  936,  626,  254,  665,  362,  326,
 /*   190 */   327,  263,  326,  327,  259,  260,  315,  234,  380,  235,
 /*   200 */   236,  354,  357,  358,  273,  366,  363,  249,  196,  853,
 /*   210 */   941,  668,  684,  679,  681,  682,  683,  680,  381,  363,
 /*   220 */   266,  293,  189,  119,  788,  118,  986,  992,  649,  650,
 /*   230 */    99,  100,  101,  102,  103,  104,  311,  576,  788,  521,
 /*   240 */   120,  412,  413,  415,  418,  420,  422,  384,  425,  426,
 /*   250 */   428,  430,  432,  298,  434,  436,  438,  440,  442,  445,
 /*   260 */   448,  451,  454,  457,  459,  461,  463,  465,  467,  469,
 /*   270 */   471,  473,  474,  475,  476,  478,  480,  482,  484,  300,
 /*   280 */   486,  490,  493,  496,  499,  501,  503,  505,  507,  509,
 /*   290 */   512,  515,  330,  522,  525,  527,  529,  531,  533,  535,
 /*   300 */   281,  320, 1022,  627,  628,  629,  630,  631,  632,  633,
 /*   310 */   634,  635,  636,  637,  638,  639,  640,  621,  619,  407,
 /*   320 */   619,  622,  406,  622,  405,  523,   14,  624,  620,  625,
 /*   330 */   675,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*   340 */   620,  659,  939,  970,  626,  971,  972,  973,  974,  975,
 /*   350 */   976,  977,  978,  979,  980,  981,  382,  217,  228,  256,
 /*   360 */   750,  253,  282,  255,  748,  326,  327,  272,  997,  326,
 /*   370 */   327,  684,  679,  681,  682,  683,  680,  383,  250,  198,
 /*   380 */   293,  941,  119,  519,  118,  169,  407,  649,  650,  406,
 /*   390 */   619,  405,    1,  622,  333,  788,  594,  262,  521,  120,
 /*   400 */   412,  413,  415,  418,  420,  422,  384,  425,  426,  428,
 /*   410 */   430,  432,  298,  434,  436,  438,  440,  442,  445,  448,
 /*   420 */   451,  454,  457,  459,  461,  463,  465,  467,  469,  471,
 /*   430 */   473,  474,  475,  476,  478,  480,  482,  484,  300,  486,
 /*   440 */   490,  493,  496,  499,  501,  503,  505,  507,  509,  512,
 /*   450 */   515,  330,  522,  525,  527,  529,  531,  533,  535,  649,
 /*   460 */   650,  620,  627,  628,  629,  630,  631,  632,  633,  634,
 /*   470 */   635,  636,  637,  638,  639,  640,  621,  619,  621,    1,
 /*   480 */   622,  333,   80,  275,  914,   14,  624,  113,  625,  296,
 /*   490 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*   500 */   907,  998, 1036,  626,  971,  972,  973,  974,  975,  976,
 /*   510 */   977,  978,  979,  980,  981,  620,  314,  660,  834,  941,
 /*   520 */   253,  282,  326,  327,  988,  162,  963,  835,  404,  598,
 /*   530 */   684,  679,  681,  682,  683,  680,  349,  264,  968,  293,
 /*   540 */  1020,  119,  114,  118,  649,  650,  649,  650,  621,  637,
 /*   550 */   638,  639,  640,  271,  987,  989,  421,  521,  120,  412,
 /*   560 */   413,  415,  418,  420,  422,  384,  425,  426,  428,  430,
 /*   570 */   432,  298,  434,  436,  438,  440,  442,  445,  448,  451,
 /*   580 */   454,  457,  459,  461,  463,  465,  467,  469,  471,  473,
 /*   590 */   474,  475,  476,  478,  480,  482,  484,  300,  486,  490,
 /*   600 */   493,  496,  499,  501,  503,  505,  507,  509,  512,  515,
 /*   610 */   330,  522,  525,  527,  529,  531,  533,  535,  986,  985,
 /*   620 */   620,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*   630 */   636,  637,  638,  639,  640,  621,  619,  986,  991,  622,
 /*   640 */   350,   81,  968,  915,   14,  624,  620,  625,  296,  690,
 /*   650 */   685,  686,  687,  688,  704,  706,  379,  623,  620,  620,
 /*   660 */   263,  940,  626,  259,  260,  315,  234,  385,  235,  236,
 /*   670 */   354,  357,  358,  273,  366,  363,  370,  217,  228,  256,
 /*   680 */   750,  191,  988,  937,  762,  326,  327,  649,  650,  684,
 /*   690 */   679,  681,  682,  683,  680,  265,  619,  788,  293,  622,
 /*   700 */   119,  618,  118,  536,  747,  649,  650,  363,  266,  326,
 /*   710 */   327,  271,  987,  989,  268,  938,  521,  120,  412,  413,
 /*   720 */   415,  418,  420,  422,  384,  425,  426,  428,  430,  432,
 /*   730 */   298,  434,  436,  438,  440,  442,  445,  448,  451,  454,
 /*   740 */   457,  459,  461,  463,  465,  467,  469,  471,  473,  474,
 /*   750 */   475,  476,  478,  480,  482,  484,  300,  486,  490,  493,
 /*   760 */   496,  499,  501,  503,  505,  507,  509,  512,  515,  330,
 /*   770 */   522,  525,  527,  529,  531,  533,  535,  346,  402,  651,
 /*   780 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /*   790 */   637,  638,  639,  640,  621,  619,  283,  966,  622,  607,
 /*   800 */    82,  111,  916,   14,  624,  732,  625,  296,  690,  685,
 /*   810 */   686,  687,  688,  704,  706,  379,  623,  620,  180,  128,
 /*   820 */   620,  626,  880,  881,  882,  883,  884,  885,  886,  887,
 /*   830 */     1,  195,  333,  937,  620,  262,  593,  519,  520,  169,
 /*   840 */   407,  608,  609,  406,  395,  405,  289,  788,  684,  679,
 /*   850 */   681,  682,  683,  680,  621,  619,  112,  293,  622,  119,
 /*   860 */   834,  118,  782,  834,  649,  650,  783,  549,  832,  835,
 /*   870 */   302,  344,  835,  856,  552,  521,  120,  412,  413,  415,
 /*   880 */   418,  420,  422,  384,  425,  426,  428,  430,  432,  298,
 /*   890 */   434,  436,  438,  440,  442,  445,  448,  451,  454,  457,
 /*   900 */   459,  461,  463,  465,  467,  469,  471,  473,  474,  475,
 /*   910 */   476,  478,  480,  482,  484,  300,  486,  490,  493,  496,
 /*   920 */   499,  501,  503,  505,  507,  509,  512,  515,  330,  522,
 /*   930 */   525,  527,  529,  531,  533,  535,  844,  140,  553,  627,
 /*   940 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*   950 */   638,  639,  640,  621,  619,  620,  570,  622,  360,   83,
 /*   960 */   850,  860,   14,  624,  922,  625,  677,  690,  685,  686,
 /*   970 */   687,  688,  704,  706,  379,  623,  620,  923,  998,  942,
 /*   980 */   626,  685,  686,  687,  688,  704,  706,  365,  620,  620,
 /*   990 */   266,  620,  620,  845,  846,  217,  228,  256,  750,  197,
 /*  1000 */   130,  937,  585,  326,  327,  262,  600,  684,  679,  681,
 /*  1010 */   682,  683,  680,  621,  580,  788,  293,  262,  119,  266,
 /*  1020 */   118,  396,  749,  649,  650,  252,  280,  326,  327,  983,
 /*  1030 */   862,  996,  856,  397,  521,  120,  412,  413,  415,  418,
 /*  1040 */   420,  422,  384,  425,  426,  428,  430,  432,  298,  434,
 /*  1050 */   436,  438,  440,  442,  445,  448,  451,  454,  457,  459,
 /*  1060 */   461,  463,  465,  467,  469,  471,  473,  474,  475,  476,
 /*  1070 */   478,  480,  482,  484,  300,  486,  490,  493,  496,  499,
 /*  1080 */   501,  503,  505,  507,  509,  512,  515,  330,  522,  525,
 /*  1090 */   527,  529,  531,  533,  535,  346,  402,  620,  627,  628,
 /*  1100 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  1110 */   639,  640,  621,  619,  847,  290,  622,  893,   84,  398,
 /*  1120 */   306,   14,  624,  399,  625,  910,  690,  685,  686,  687,
 /*  1130 */   688,  704,  706,  379,  623,  620,  278,  127,  943,  626,
 /*  1140 */   880,  881,  882,  883,  884,  885,  886,  887,  620,  620,
 /*  1150 */   620,  620,  366,  363,  217,  228,  256,  750,  937,  608,
 /*  1160 */   609,  619,  326,  327,  622,  994,  684,  679,  681,  682,
 /*  1170 */   683,  680,  834,  619, 1018,  293,  622,  119,  834,  118,
 /*  1180 */   342,  835,  649,  650, 1019,  224,  343,  835,  316, 1022,
 /*  1190 */   856,  274,  270,  521,  120,  412,  413,  415,  418,  420,
 /*  1200 */   422,  384,  425,  426,  428,  430,  432,  298,  434,  436,
 /*  1210 */   438,  440,  442,  445,  448,  451,  454,  457,  459,  461,
 /*  1220 */   463,  465,  467,  469,  471,  473,  474,  475,  476,  478,
 /*  1230 */   480,  482,  484,  300,  486,  490,  493,  496,  499,  501,
 /*  1240 */   503,  505,  507,  509,  512,  515,  330,  522,  525,  527,
 /*  1250 */   529,  531,  533,  535,  172,  620,  606,  627,  628,  629,
 /*  1260 */   630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
 /*  1270 */   640,  621,  619,  318, 1022,  622,  368,   85,  852,  619,
 /*  1280 */    14,  624,  622,  625,  911,  690,  685,  686,  687,  688,
 /*  1290 */   704,  706,  379,  623,  620,  998,  998,  948,  626,  647,
 /*  1300 */   620,  251,  206,  620,  941,  935,  620,  654,  266,  620,
 /*  1310 */   326,  327,  656,  217,  228,  256,  750,  353,  788,  621,
 /*  1320 */   405,  326,  327,  595,  995,  684,  679,  681,  682,  683,
 /*  1330 */   680,  621,  657,  271,  293,  834,  119,  658,  118,  833,
 /*  1340 */   661,  649,  650,  602,  835,  319, 1022,  655,  649,  650,
 /*  1350 */   617,  267,  521,  120,  412,  413,  415,  418,  420,  422,
 /*  1360 */   384,  425,  426,  428,  430,  432,  298,  434,  436,  438,
 /*  1370 */   440,  442,  445,  448,  451,  454,  457,  459,  461,  463,
 /*  1380 */   465,  467,  469,  471,  473,  474,  475,  476,  478,  480,
 /*  1390 */   482,  484,  300,  486,  490,  493,  496,  499,  501,  503,
 /*  1400 */   505,  507,  509,  512,  515,  330,  522,  525,  527,  529,
 /*  1410 */   531,  533,  535,  406,  620,  620,  627,  628,  629,  630,
 /*  1420 */   631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
 /*  1430 */   621,  619,  372,  652,  622,  926,  674,  621,  232,   14,
 /*  1440 */   624,  988,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  1450 */   706,  379,  623,  620,  998,  619,  906,  626,  622,  182,
 /*  1460 */   202,  957,  941,  620,  266,    3,  834,  205,  641,  937,
 /*  1470 */   271,  987,  989,  653,  958,  835,  788,  217,  228,  256,
 /*  1480 */   750,  626,  999,  788,   27,  326,  327,  764,  321, 1022,
 /*  1490 */   301,  752,  355,  134,  410,  119,  663,  118,  303,  777,
 /*  1500 */   649,  650,  304,  790,  856,   27,  539,   96,  411,  616,
 /*  1510 */   775,  521,  120,  412,  413,  415,  418,  420,  422,  384,
 /*  1520 */   425,  426,  428,  430,  432,  298,  434,  436,  438,  440,
 /*  1530 */   442,  445,  448,  451,  454,  457,  459,  461,  463,  465,
 /*  1540 */   467,  469,  471,  473,  474,  475,  476,  478,  480,  482,
 /*  1550 */   484,  300,  486,  490,  493,  496,  499,  501,  503,  505,
 /*  1560 */   507,  509,  512,  515,  330,  522,  525,  527,  529,  531,
 /*  1570 */   533,  535,   98,  620,    1,  627,  628,  629,  630,  631,
 /*  1580 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*  1590 */   619,  902,  858,  622,  620,  116,  117,  121,   90,  627,
 /*  1600 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*  1610 */   638,  639,  640,  621,  115,  857,  626,  949,  745,  171,
 /*  1620 */   753,  269,  928,  620,  643,  216,  231,  305,  799,  787,
 /*  1630 */   359,  361,  188,  217,  228,  256,  750,  558,  158,  998,
 /*  1640 */   263,  326,  327,  259,  260,  315,  234,  559,  235,  236,
 /*  1650 */   354,  357,  358,  273,  366,  363,  215,  560,  208,  649,
 /*  1660 */   650,  898,  266,  266,  645,  899,  238,  597,  213,  302,
 /*  1670 */   521,   27,  412,  413,  415,  418,  420,  422,  384,  425,
 /*  1680 */   426,  428,  430,  432,  298,  434,  436,  438,  440,  442,
 /*  1690 */   445,  448,  451,  454,  457,  459,  461,  463,  465,  467,
 /*  1700 */   469,  471,  473,  474,  475,  476,  478,  480,  482,  484,
 /*  1710 */   300,  486,  490,  493,  496,  499,  501,  503,  505,  507,
 /*  1720 */   509,  512,  515,  330,  522,  525,  527,  529,  531,  533,
 /*  1730 */   535,   26,  562,   21,  627,  628,  629,  630,  631,  632,
 /*  1740 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  619,
 /*  1750 */   563,  160,  622,  669,  364,  565,  797,   90,  620,  367,
 /*  1760 */   369, 1605,  400,  401,  122,  373,  566,  374,  375,  376,
 /*  1770 */   277,  284,  968,  226,  619,  626,  731,  622,  908,  851,
 /*  1780 */   685,  686,  687,  688,  704,  706,  266,  610,  620,  572,
 /*  1790 */   888,  266,  266,  889,  890,  998,  571,  153,  998,  587,
 /*  1800 */   626,  891,   13,  377,  966,  971,  972,  973,  974,  975,
 /*  1810 */   976,  977,  978,  979,  980,  981,  894,  895,  649,  650,
 /*  1820 */   271,  253,  282, 1000,  109,  982, 1001,  110,  616,  521,
 /*  1830 */   237,  412,  413,  415,  418,  420,  422,  384,  425,  426,
 /*  1840 */   428,  430,  432,  298,  434,  436,  438,  440,  442,  445,
 /*  1850 */   448,  451,  454,  457,  459,  461,  463,  465,  467,  469,
 /*  1860 */   471,  473,  474,  475,  476,  478,  480,  482,  484,  300,
 /*  1870 */   486,  490,  493,  496,  499,  501,  503,  505,  507,  509,
 /*  1880 */   512,  515,  330,  522,  525,  527,  529,  531,  533,  535,
 /*  1890 */   984,  702,  905,  627,  628,  629,  630,  631,  632,  633,
 /*  1900 */   634,  635,  636,  637,  638,  639,  640,  621,  619, 1004,
 /*  1910 */   993,  622,  371,  132,  620,  806,   90,  620,  627,  628,
 /*  1920 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  1930 */   639,  640,  621,  950,  626, 1013,  619,  904,  903,  622,
 /*  1940 */    13,   71, 1014, 1017,  266,  746, 1021, 1023, 1025,  217,
 /*  1950 */   228,  256,  750, 1024, 1026,  331, 1027,  326,  327, 1028,
 /*  1960 */  1038,  684,  679,  681,  682,  683,  680,  239, 1029, 1030,
 /*  1970 */   293,  217,  228,  256,  750, 1031, 1032,  649,  650,  326,
 /*  1980 */   327, 1033, 1034,  272,  997, 1039,   74,   78,  521, 1040,
 /*  1990 */   412,  413,  415,  418,  420,  422,  384,  425,  426,  428,
 /*  2000 */   430,  432,  298,  434,  436,  438,  440,  442,  445,  448,
 /*  2010 */   451,  454,  457,  459,  461,  463,  465,  467,  469,  471,
 /*  2020 */   473,  474,  475,  476,  478,  480,  482,  484,  300,  486,
 /*  2030 */   490,  493,  496,  499,  501,  503,  505,  507,  509,  512,
 /*  2040 */   515,  330,  522,  525,  527,  529,  531,  533,  535,  927,
 /*  2050 */  1041,  605,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  2060 */   635,  636,  637,  638,  639,  640,  621,  619, 1042, 1043,
 /*  2070 */   622,  170,  917,  291,  232,   14,  624,  292,  625,  296,
 /*  2080 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  2090 */   998,  998,  951,  626,  621,  662,  664,  165,   13,   11,
 /*  2100 */   667,   95,   15,   97,   18,  691,   16,   17,  217,  228,
 /*  2110 */   256,  750,  692,  998,  952,   19,  326,  327,  599, 1002,
 /*  2120 */   684,  679,  681,  682,  683,  680,  693,  297,  694,  293,
 /*  2130 */   217,  228,  256,  750,   20,  695,  649,  650,  326,  327,
 /*  2140 */   696, 1003,  697,   22,  698,   23,  699,  521,   24,  412,
 /*  2150 */   413,  415,  418,  420,  422,  384,  425,  426,  428,  430,
 /*  2160 */   432,  298,  434,  436,  438,  440,  442,  445,  448,  451,
 /*  2170 */   454,  457,  459,  461,  463,  465,  467,  469,  471,  473,
 /*  2180 */   474,  475,  476,  478,  480,  482,  484,  300,  486,  490,
 /*  2190 */   493,  496,  499,  501,  503,  505,  507,  509,  512,  515,
 /*  2200 */   330,  522,  525,  527,  529,  531,  533,  535,  700,  620,
 /*  2210 */   620,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  2220 */   636,  637,  638,  639,  640,  621,  619,   25,  701,  622,
 /*  2230 */    28,  918,  620,  232,   90,  624,   29,  625,  296,  690,
 /*  2240 */   685,  686,  687,  688,  704,  706,  379,  623,  620,  705,
 /*  2250 */   707,  953,  626,   30,  708,   31,  709,   32,   33,   34,
 /*  2260 */   710,   35,  711,   37,  712,   36,   38,  217,  228,  256,
 /*  2270 */   750,   39,  713,  954,   40,  326,  327,  714,   42,  684,
 /*  2280 */   679,  681,  682,  683,  680,  715,   41,   43,  293,  217,
 /*  2290 */   228,  256,  750,  716,   44,  649,  650,  326,  327,  717,
 /*  2300 */    45,  718,   46,  719,   47,  720,  521,   48,  412,  413,
 /*  2310 */   415,  418,  420,  422,  384,  425,  426,  428,  430,  432,
 /*  2320 */   298,  434,  436,  438,  440,  442,  445,  448,  451,  454,
 /*  2330 */   457,  459,  461,  463,  465,  467,  469,  471,  473,  474,
 /*  2340 */   475,  476,  478,  480,  482,  484,  300,  486,  490,  493,
 /*  2350 */   496,  499,  501,  503,  505,  507,  509,  512,  515,  330,
 /*  2360 */   522,  525,  527,  529,  531,  533,  535,  721,   49,  722,
 /*  2370 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /*  2380 */   637,  638,  639,  640,  621,  619,  723,  724,  622,  725,
 /*  2390 */   919,   50,  232,   89,  624,   51,  625,  296,  690,  685,
 /*  2400 */   686,  687,  688,  704,  706,  379,  623,  620,  726,  727,
 /*  2410 */   956,  626,   52,  728,   53,  729,   54,  730,   55,  733,
 /*  2420 */    56,   57,   59,  734,   58,   60,  217,  228,  256,  750,
 /*  2430 */    61,  735,  959,   62,  326,  327,  736,   63,  684,  679,
 /*  2440 */   681,  682,  683,  680,   64,  737,   65,  293,  217,  228,
 /*  2450 */   256,  750,  738,   66,  649,  650,  326,  327,  739,   67,
 /*  2460 */   740,   68,  741,   69,  742,  521,   72,  412,  413,  415,
 /*  2470 */   418,  420,  422,  384,  425,  426,  428,  430,  432,  298,
 /*  2480 */   434,  436,  438,  440,  442,  445,  448,  451,  454,  457,
 /*  2490 */   459,  461,  463,  465,  467,  469,  471,  473,  474,  475,
 /*  2500 */   476,  478,  480,  482,  484,  300,  486,  490,  493,  496,
 /*  2510 */   499,  501,  503,  505,  507,  509,  512,  515,  330,  522,
 /*  2520 */   525,  527,  529,  531,  533,  535,   70,   73,  743,  627,
 /*  2530 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*  2540 */   638,  639,  640,  621,  619,  619,   75,  622,  622,  920,
 /*  2550 */    76,  232,   94,  624,  961,  625,  296,  690,  685,  686,
 /*  2560 */   687,  688,  704,  706,  379,  623,  620,  408,  577,  964,
 /*  2570 */   217,  228,  256,  750,   77,  744,  167,  751,  326,  327,
 /*  2580 */   332,    2,  754,    5,  755,  217,  228,  256,  750,  756,
 /*  2590 */     6,  965,    7,  326,  327,  757,  548,  684,  679,  681,
 /*  2600 */   682,  683,  680,  758,    8,  854,  293,  217,  228,  256,
 /*  2610 */   750,  759,    9,  649,  650,  326,  327,  760,   10,  537,
 /*  2620 */   540,  287,  761,  288,  521,  763,  412,  413,  415,  418,
 /*  2630 */   420,  422,  384,  425,  426,  428,  430,  432,  298,  434,
 /*  2640 */   436,  438,  440,  442,  445,  448,  451,  454,  457,  459,
 /*  2650 */   461,  463,  465,  467,  469,  471,  473,  474,  475,  476,
 /*  2660 */   478,  480,  482,  484,  300,  486,  490,  493,  496,  499,
 /*  2670 */   501,  503,  505,  507,  509,  512,  515,  330,  522,  525,
 /*  2680 */   527,  529,  531,  533,  535,  619,  765,  619,  622,  766,
 /*  2690 */   622,  767,  768,   86,  769,  190,  770,  136,  187,  771,
 /*  2700 */   776,  781,  621,  621,  328,  784,  329,  789,  286,  798,
 /*  2710 */   232,  807,  624,  808,  625,  296,  690,  685,  686,  687,
 /*  2720 */   688,  704,  706,  379,  623,  620,  156,  157,  313,  684,
 /*  2730 */   679,  681,  682,  683,  680,  214,  207,  849,  293,  933,
 /*  2740 */   931,  837,  212,   91,  932,  875,  862,  861,  302,  307,
 /*  2750 */   218,  159,  892,  219,  649,  650,  166,  934,  347,  897,
 /*  2760 */   896,  909,  912,   93,  929,  521,  930,  412,  413,  415,
 /*  2770 */   418,  420,  422,  384,  425,  426,  428,  430,  432,  298,
 /*  2780 */   434,  436,  438,  440,  442,  445,  448,  451,  454,  457,
 /*  2790 */   459,  461,  463,  465,  467,  469,  471,  473,  474,  475,
 /*  2800 */   476,  478,  480,  482,  484,  300,  486,  490,  493,  496,
 /*  2810 */   499,  501,  503,  505,  507,  509,  512,  515,  330,  522,
 /*  2820 */   525,  527,  529,  531,  533,  535,  619,  312,  842,  622,
 /*  2830 */   848,  290,  129,  149,   79,  193,  328,  161,  329,  131,
 /*  2840 */   286,  229,  232,  621,  624,  621,  625,  296,  690,  685,
 /*  2850 */   686,  687,  688,  704,  706,  379,  623,  620,  199,  685,
 /*  2860 */   686,  687,  688,  704,  706,  620,  152,  620,  589,  524,
 /*  2870 */   684,  679,  681,  682,  683,  680,  590,  240,  967,  293,
 /*  2880 */   592,  351,  352,  969,  241,  243, 1005,  133,  244,  246,
 /*  2890 */   247, 1009, 1015, 1606, 1606,  649,  650,  546,  684,  679,
 /*  2900 */   681,  682,  683,  680, 1606, 1606,  521,  293,  412,  413,
 /*  2910 */   415,  418,  420,  422,  384,  425,  426,  428,  430,  432,
 /*  2920 */   298,  434,  436,  438,  440,  442,  445,  448,  451,  454,
 /*  2930 */   457,  459,  461,  463,  465,  467,  469,  471,  473,  474,
 /*  2940 */   475,  476,  478,  480,  482,  484,  300,  486,  490,  493,
 /*  2950 */   496,  499,  501,  503,  505,  507,  509,  512,  515,  330,
 /*  2960 */   522,  525,  527,  529,  531,  533,  535,  619, 1606,  619,
 /*  2970 */   622,  619,  622, 1606,  622,   88,  174,  328, 1606,  329,
 /*  2980 */  1606,  286, 1606,  232,  621,  624, 1606,  625,  296,  690,
 /*  2990 */   685,  686,  687,  688,  704,  706,  379,  623,  620, 1606,
 /*  3000 */  1606, 1606,  222, 1606, 1606,  328, 1606,  329, 1606,  286,
 /*  3010 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  3020 */   687,  688,  704,  706,  379,  623,  620,  545,  684,  679,
 /*  3030 */   681,  682,  683,  680, 1606, 1606, 1606,  293,  649,  650,
 /*  3040 */   649,  650, 1606, 1606, 1606, 1606, 1606,  521, 1606,  412,
 /*  3050 */   413,  415,  418,  420,  422,  384,  425,  426,  428,  430,
 /*  3060 */   432,  298,  434,  436,  438,  440,  442,  445,  448,  451,
 /*  3070 */   454,  457,  459,  461,  463,  465,  467,  469,  471,  473,
 /*  3080 */   474,  475,  476,  478,  480,  482,  484,  300,  486,  490,
 /*  3090 */   493,  496,  499,  501,  503,  505,  507,  509,  512,  515,
 /*  3100 */   330,  522,  525,  527,  529,  531,  533,  535,  619,  619,
 /*  3110 */  1606,  622,  622, 1606, 1606, 1606,   87, 1606, 1606, 1606,
 /*  3120 */  1606,    1, 1606,  333, 1606,  621,  262,  621,  519,  621,
 /*  3130 */   169,  407, 1606, 1606,  406,  328,  405,  329, 1606,  286,
 /*  3140 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  3150 */   687,  688,  704,  706,  379,  623,  620, 1606, 1606, 1606,
 /*  3160 */   544,  684,  679,  681,  682,  683,  680, 1606, 1606, 1606,
 /*  3170 */   293,  933,  931, 1606, 1606, 1606,  932, 1606,  649,  650,
 /*  3180 */   302, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  521,  666,
 /*  3190 */   412,  413,  415,  418,  420,  422,  384,  425,  426,  428,
 /*  3200 */   430,  432,  298,  434,  436,  438,  440,  442,  445,  448,
 /*  3210 */   451,  454,  457,  459,  461,  463,  465,  467,  469,  471,
 /*  3220 */   473,  474,  475,  476,  478,  480,  482,  484,  300,  486,
 /*  3230 */   490,  493,  496,  499,  501,  503,  505,  507,  509,  512,
 /*  3240 */   515,  330,  522,  525,  527,  529,  531,  533,  535,  619,
 /*  3250 */   619, 1606,  622,  622, 1606, 1606, 1606,   92,  233, 1606,
 /*  3260 */  1606, 1606, 1606, 1606, 1606, 1606,  621,  621,  328, 1606,
 /*  3270 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  3280 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  3290 */  1606,  685,  686,  687,  688,  704,  706, 1606, 1606,  620,
 /*  3300 */  1606,  543,  684,  679,  681,  682,  683,  680, 1606, 1606,
 /*  3310 */   855,  293,  785,  261, 1606, 1606,  786, 1606, 1606, 1606,
 /*  3320 */   302, 1606, 1606, 1606, 1606, 1606, 1606,  175, 1606,  521,
 /*  3330 */  1606,  412,  413,  415,  418,  420,  422,  384,  425,  426,
 /*  3340 */   428,  430,  432,  298,  434,  436,  438,  440,  442,  445,
 /*  3350 */   448,  451,  454,  457,  459,  461,  463,  465,  467,  469,
 /*  3360 */   471,  473,  474,  475,  476,  478,  480,  482,  484,  300,
 /*  3370 */   486,  490,  493,  496,  499,  501,  503,  505,  507,  509,
 /*  3380 */   512,  515,  330,  522,  525,  527,  529,  531,  533,  535,
 /*  3390 */   619, 1606, 1606,  622,  115, 1606, 1606, 1606,  147, 1606,
 /*  3400 */  1606, 1606,    1,  809, 1606, 1606, 1606,  621,  621,  328,
 /*  3410 */  1606,  329, 1606,  286, 1606,  232,  626,  624,  225,  625,
 /*  3420 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  3430 */   620,  685,  686,  687,  688,  704,  706,  221, 1606,  620,
 /*  3440 */   341,  220,  568,  828,  107,  345, 1606,  163,  176,  183,
 /*  3450 */   204,  962,  941,  277,  284,  968, 1606,  185, 1606,  649,
 /*  3460 */   650,  108, 1606, 1606, 1606, 1606,  788,  217,  228,  256,
 /*  3470 */   750, 1606,  780,  778, 1606,  326,  327,  779, 1606, 1606,
 /*  3480 */  1606,  302, 1606,  201,  955,  937, 1035,  168,  971,  972,
 /*  3490 */   973,  974,  975,  976,  977,  978,  979,  980,  981,  788,
 /*  3500 */   217,  228,  256,  750,  253,  282, 1606,  276,  326,  327,
 /*  3510 */  1606, 1606,  555, 1606, 1606,  821, 1606,  824,  825,  826,
 /*  3520 */  1606, 1606, 1606, 1606,  823,  346,  629,  630,  631,  632,
 /*  3530 */   633,  634, 1606, 1606,  627,  628,  629,  630,  631,  632,
 /*  3540 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  829,
 /*  3550 */   830,  126, 1606,  804,  800,  801,  802,  803,  805, 1606,
 /*  3560 */  1606, 1606,  302, 1606,  554,  173,  181,  128,  556, 1606,
 /*  3570 */   880,  881,  882,  883,  884,  885,  886,  887,  619,  834,
 /*  3580 */  1606,  622,  862, 1606, 1606, 1606,  141,  832,  835,  184,
 /*  3590 */  1606, 1006,  685,  686,  687,  688,  704,  706,  186, 1606,
 /*  3600 */   620, 1606,  619, 1606,  626,  622, 1606, 1606, 1606, 1606,
 /*  3610 */   141, 1606, 1606, 1606,  834, 1016,  868,  869, 1606, 1606,
 /*  3620 */   822,  827,  832,  835, 1606,  223, 1606, 1606,  626, 1606,
 /*  3630 */   624,  828,  625, 1606, 1606, 1606,  619,  135, 1606,  622,
 /*  3640 */  1606,  379,  623,  620,  147,  209, 1606,  649,  650,  223,
 /*  3650 */  1606, 1606, 1606, 1606,  561,  828,  139, 1606, 1606, 1606,
 /*  3660 */  1606, 1606,  626, 1606,  863, 1606,  848,  290,  624,  209,
 /*  3670 */   625,  649,  650,  685,  686,  687,  688,  704,  706,  379,
 /*  3680 */   623,  620, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  828,
 /*  3690 */   862,  142, 1606,  684,  679,  681,  682,  683,  680, 1606,
 /*  3700 */  1606,  620,  293,  185, 1606,  649,  650,  620, 1606, 1606,
 /*  3710 */  1606, 1606, 1606,  613,  614,  615, 1606, 1606, 1606, 1606,
 /*  3720 */   612, 1606,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  3730 */   635,  636,  637,  638,  639,  640,  621,  829,  830, 1606,
 /*  3740 */  1606, 1606,  620, 1606, 1606, 1606,  627,  628,  629,  630,
 /*  3750 */   631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
 /*  3760 */   621,  829,  830,  862,  795,  791,  792,  793,  794,  796,
 /*  3770 */   841, 1606,  338,  302,  848,  290,  177,  642, 1606, 1606,
 /*  3780 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /*  3790 */   637,  638,  639,  640,  621,  829,  830,  619,  148, 1606,
 /*  3800 */   622, 1606,  672, 1606,  286,  147,  232, 1606,  624,  620,
 /*  3810 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  3820 */   623,  620, 1606,  626, 1606, 1606,  624,  619,  625, 1606,
 /*  3830 */   622, 1606, 1606, 1606, 1606,  141, 1606,  379,  623,  620,
 /*  3840 */   194, 1606, 1606,  864, 1606,  338, 1606,  848,  290, 1606,
 /*  3850 */   828, 1606, 1606,  626, 1606, 1606, 1606,  619, 1606, 1606,
 /*  3860 */   622, 1606, 1606, 1606,  185,  141,  649,  650, 1606,  619,
 /*  3870 */   230,  619,  622, 1606,  622, 1606,  105,  190, 1606,  624,
 /*  3880 */   828,  625,  620,  626,  685,  686,  687,  688,  704,  706,
 /*  3890 */   379,  623,  620,  106,  209, 1606,  649,  650, 1606, 1606,
 /*  3900 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  3910 */   828,  123, 1606,  804,  800,  801,  802,  803,  805, 1606,
 /*  3920 */  1606, 1606,  302, 1606,  209, 1606,  649,  650, 1606,  861,
 /*  3930 */  1606,  855,  218, 1606,  261,  219, 1606, 1606,  649,  650,
 /*  3940 */  1606,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  3950 */   636,  637,  638,  639,  640,  621,  829,  830,  629,  630,
 /*  3960 */   631,  632,  633,  634, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  3970 */  1606,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  3980 */   636,  637,  638,  639,  640,  621,  829,  830,  774,  772,
 /*  3990 */  1606,  834, 1606,  773, 1606,  862, 1606,  302, 1606,  832,
 /*  4000 */   835,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  4010 */   636,  637,  638,  639,  640,  621,  829,  830,  619, 1606,
 /*  4020 */  1606,  622, 1606, 1606, 1606, 1606,  141,  621,  624,  621,
 /*  4030 */   625,  200, 1606,  685,  686,  687,  688,  704,  706,  379,
 /*  4040 */   623,  620, 1606, 1606,  626, 1606, 1606, 1606,  619,  150,
 /*  4050 */  1606,  622,  834, 1606, 1606, 1606,  141, 1606, 1606, 1606,
 /*  4060 */   832,  835, 1606, 1606, 1606, 1606,  945, 1606,  139, 1606,
 /*  4070 */   564,  828, 1606, 1606,  626,  337, 1606,  338,  619,  848,
 /*  4080 */   290,  622, 1606, 1606, 1606,  209,  141,  649,  650, 1606,
 /*  4090 */  1606, 1010, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4100 */  1606,  828, 1606, 1606,  626, 1606, 1606, 1606,  685,  686,
 /*  4110 */   687,  688,  704,  706,  620,  209,  620,  649,  650,  620,
 /*  4120 */  1606, 1606,  619,  619, 1606,  622,  622,  946, 1606,  139,
 /*  4130 */   190,  828, 1606,  859, 1606,  684,  679,  681,  682,  683,
 /*  4140 */   680, 1606, 1606, 1606,  293,  209, 1606,  649,  650, 1606,
 /*  4150 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4160 */  1606, 1606,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  4170 */   635,  636,  637,  638,  639,  640,  621,  829,  830, 1606,
 /*  4180 */   620, 1606,  861,  855, 1606, 1606,  261, 1606,  219, 1606,
 /*  4190 */  1606, 1606,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  4200 */   635,  636,  637,  638,  639,  640,  621,  829,  830, 1606,
 /*  4210 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4220 */  1606, 1606,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  4230 */   635,  636,  637,  638,  639,  640,  621,  829,  830,  619,
 /*  4240 */   151, 1606,  622, 1606,  924, 1606,  286,  141,  232, 1606,
 /*  4250 */   624, 1606,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  4260 */   706,  379,  623,  620, 1606,  626, 1606, 1606, 1606,  619,
 /*  4270 */  1606, 1606,  622,  619, 1606, 1606,  622,  141, 1606,  817,
 /*  4280 */   621,  621, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4290 */  1606, 1606,  828, 1606, 1606,  626, 1606, 1606, 1606, 1606,
 /*  4300 */  1606, 1606, 1606, 1606,  242, 1606,  209, 1606,  649,  650,
 /*  4310 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4320 */   272,  997,  828, 1606,  684,  679,  681,  682,  683,  680,
 /*  4330 */  1606, 1606, 1606,  293, 1606, 1606,  209, 1606,  649,  650,
 /*  4340 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  542,  684,  679,
 /*  4350 */   681,  682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606,
 /*  4360 */  1606, 1606,  124, 1606,  804,  800,  801,  802,  803,  805,
 /*  4370 */  1606, 1606, 1606,  302, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4380 */  1606, 1606, 1606,  627,  628,  629,  630,  631,  632,  633,
 /*  4390 */   634,  635,  636,  637,  638,  639,  640,  621,  829,  830,
 /*  4400 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4410 */  1606, 1606, 1606,  627,  628,  629,  630,  631,  632,  633,
 /*  4420 */   634,  635,  636,  637,  638,  639,  640,  621,  829,  830,
 /*  4430 */   619,  621, 1606,  622, 1606,  921, 1606,  232,  147,  624,
 /*  4440 */   870,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  4450 */   379,  623,  620, 1606, 1606,  328,  626,  329, 1606,  286,
 /*  4460 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  4470 */   687,  688,  704,  706,  379,  623,  620, 1606, 1606,  624,
 /*  4480 */  1606,  625, 1606,  828,  685,  686,  687,  688,  704,  706,
 /*  4490 */   379,  623,  620, 1606, 1606, 1606, 1606,  185, 1606,  649,
 /*  4500 */   650, 1606, 1606, 1606,  203,  960,  937,  391,  684,  679,
 /*  4510 */   681,  682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606,
 /*  4520 */   788,  217,  228,  256,  750,  619, 1606, 1606,  622,  326,
 /*  4530 */   327, 1606,  409,  684,  679,  681,  682,  683,  680, 1606,
 /*  4540 */  1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4550 */  1606, 1606, 1606, 1606, 1606, 1606,  245, 1606, 1606, 1606,
 /*  4560 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4570 */  1606, 1606,  272,  997,  627,  628,  629,  630,  631,  632,
 /*  4580 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  829,
 /*  4590 */   830, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  294,  684,
 /*  4600 */   679,  681,  682,  683,  680, 1606, 1606, 1606,  293, 1606,
 /*  4610 */  1606, 1606, 1606, 1606, 1606,  328, 1606,  329, 1606,  286,
 /*  4620 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  4630 */   687,  688,  704,  706,  379,  623,  620, 1606, 1606, 1606,
 /*  4640 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  4650 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  4660 */   623,  620, 1606, 1606, 1606, 1606, 1606, 1606,  670,  684,
 /*  4670 */   679,  681,  682,  683,  680, 1606, 1606, 1606,  293, 1606,
 /*  4680 */  1606, 1606, 1606,  621, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4690 */  1606, 1606,  575,  684,  679,  681,  682,  683,  680, 1606,
 /*  4700 */  1606, 1606,  293, 1606, 1606, 1606,  328, 1606,  329, 1606,
 /*  4710 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  4720 */   686,  687,  688,  704,  706,  379,  623,  620, 1606, 1606,
 /*  4730 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4740 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  4750 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  574,
 /*  4760 */   684,  679,  681,  682,  683,  680, 1606, 1606, 1606,  293,
 /*  4770 */  1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,  329, 1606,
 /*  4780 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  4790 */   686,  687,  688,  704,  706,  379,  623,  620, 1606, 1606,
 /*  4800 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  4810 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  4820 */   623,  620, 1606, 1606, 1606,  414,  684,  679,  681,  682,
 /*  4830 */   683,  680,  146, 1606, 1606,  293, 1606, 1606,  146, 1606,
 /*  4840 */  1606,  862, 1606, 1606, 1606, 1606, 1606,  862, 1606, 1606,
 /*  4850 */  1606, 1606, 1606,  416,  684,  679,  681,  682,  683,  680,
 /*  4860 */  1606, 1606, 1606,  293, 1606, 1606, 1606,  328, 1606,  329,
 /*  4870 */  1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,  690,
 /*  4880 */   685,  686,  687,  688,  704,  706,  379,  623,  620, 1606,
 /*  4890 */  1606,  417,  684,  679,  681,  682,  683,  680, 1606, 1606,
 /*  4900 */  1606,  293, 1606, 1606, 1606, 1606,  684,  679,  681,  682,
 /*  4910 */   683,  680, 1606, 1606,  812,  293,  137, 1606, 1606, 1606,
 /*  4920 */   567,  337,  137,  338, 1606,  848,  290,  337, 1606,  338,
 /*  4930 */  1606,  848,  290,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  4940 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  4950 */   704,  706,  379,  623,  620, 1606, 1606, 1606, 1606, 1606,
 /*  4960 */   620,  328, 1606,  329, 1606,  286,  620,  232, 1606,  624,
 /*  4970 */  1606,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  4980 */   379,  623,  620, 1606, 1606,  419,  684,  679,  681,  682,
 /*  4990 */   683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606,  328,
 /*  5000 */  1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,
 /*  5010 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  5020 */   620,  624, 1606,  625, 1606,  676,  685,  686,  687,  688,
 /*  5030 */   704,  706,  379,  623,  620, 1606, 1606, 1606,  423,  684,
 /*  5040 */   679,  681,  682,  683,  680,  146, 1606, 1606,  293, 1606,
 /*  5050 */  1606, 1606, 1606, 1606,  862, 1606, 1606, 1606, 1606, 1606,
 /*  5060 */   424,  684,  679,  681,  682,  683,  680, 1606, 1606, 1606,
 /*  5070 */   293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5080 */  1606, 1606,  427,  684,  679,  681,  682,  683,  680, 1606,
 /*  5090 */  1606, 1606,  293,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  5100 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  5110 */   704,  706,  379,  623,  620, 1606, 1606, 1606,  429,  684,
 /*  5120 */   679,  681,  682,  683,  680, 1606, 1606,  877,  293,  137,
 /*  5130 */  1606, 1606, 1606, 1606,  337, 1606,  338, 1606,  848,  290,
 /*  5140 */   684,  679,  681,  682,  683,  680,  328, 1606,  329,  293,
 /*  5150 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  5160 */   686,  687,  688,  704,  706,  379,  623,  620,  328, 1606,
 /*  5170 */   329, 1606,  286,  620,  232, 1606,  624, 1606,  625,  296,
 /*  5180 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  5190 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  5200 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  5210 */   623,  620, 1606, 1606,  613,  614,  615, 1606, 1606, 1606,
 /*  5220 */   143,  612, 1606, 1606, 1606, 1606,  328, 1606,  329,  862,
 /*  5230 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  5240 */   686,  687,  688,  704,  706,  379,  623,  620,  431,  684,
 /*  5250 */   679,  681,  682,  683,  680,  624, 1606,  625,  293,  678,
 /*  5260 */   685,  686,  687,  688,  704,  706,  379,  623,  620, 1606,
 /*  5270 */   433,  684,  679,  681,  682,  683,  680,  178,  642, 1606,
 /*  5280 */   293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5290 */  1606, 1606,  299,  684,  679,  681,  682,  683,  680, 1606,
 /*  5300 */  1606, 1606,  293, 1606,  138, 1606, 1606, 1606, 1606,  337,
 /*  5310 */  1606,  338, 1606,  848,  290, 1606, 1606, 1606, 1606, 1606,
 /*  5320 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  624, 1606,  625,
 /*  5330 */  1606,  703,  684,  679,  681,  682,  683,  680,  379,  623,
 /*  5340 */   620,  293, 1606, 1606, 1606, 1606, 1606, 1606,  620, 1606,
 /*  5350 */  1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,  329, 1606,
 /*  5360 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  5370 */   686,  687,  688,  704,  706,  379,  623,  620,  328, 1606,
 /*  5380 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  5390 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  5400 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  5410 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  5420 */   623,  620,  435,  684,  679,  681,  682,  683,  680, 1606,
 /*  5430 */  1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606,  328,
 /*  5440 */  1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,
 /*  5450 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  5460 */   620,  437,  684,  679,  681,  682,  683,  680, 1606, 1606,
 /*  5470 */  1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5480 */  1606, 1606, 1606,  439,  684,  679,  681,  682,  683,  680,
 /*  5490 */  1606, 1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5500 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5510 */  1606, 1606, 1606, 1606, 1606, 1606,  441,  684,  679,  681,
 /*  5520 */   682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606,
 /*  5530 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  5540 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  5550 */   623,  620,  443,  684,  679,  681,  682,  683,  680, 1606,
 /*  5560 */  1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606,  328,
 /*  5570 */  1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,
 /*  5580 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  5590 */   620,  328, 1606,  329, 1606,  286, 1606,  232, 1606,  624,
 /*  5600 */  1606,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  5610 */   379,  623,  620,  444,  684,  679,  681,  682,  683,  680,
 /*  5620 */  1606, 1606, 1606,  293,  328, 1606,  329, 1606,  286, 1606,
 /*  5630 */   232, 1606,  624, 1606,  625,  296,  690,  685,  686,  687,
 /*  5640 */   688,  704,  706,  379,  623,  620,  446,  684,  679,  681,
 /*  5650 */   682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606,
 /*  5660 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  5670 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  5680 */   623,  620, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5690 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5700 */  1606,  447,  684,  679,  681,  682,  683,  680, 1606, 1606,
 /*  5710 */  1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5720 */  1606,  328, 1606,  329, 1606,  286, 1606,  232, 1606,  624,
 /*  5730 */  1606,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  5740 */   379,  623,  620,  449,  684,  679,  681,  682,  683,  680,
 /*  5750 */  1606, 1606, 1606,  293,  328, 1606,  329, 1606,  286, 1606,
 /*  5760 */   232, 1606,  624, 1606,  625,  296,  690,  685,  686,  687,
 /*  5770 */   688,  704,  706,  379,  623,  620,  450,  684,  679,  681,
 /*  5780 */   682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606,
 /*  5790 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  452,  684,
 /*  5800 */   679,  681,  682,  683,  680, 1606, 1606, 1606,  293,  328,
 /*  5810 */  1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,
 /*  5820 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  5830 */   620,  453,  684,  679,  681,  682,  683,  680, 1606, 1606,
 /*  5840 */  1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5850 */  1606,  328, 1606,  329, 1606,  286, 1606,  232, 1606,  624,
 /*  5860 */  1606,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  5870 */   379,  623,  620, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5880 */  1606, 1606, 1606, 1606,  328, 1606,  329, 1606,  286, 1606,
 /*  5890 */   232, 1606,  624, 1606,  625,  296,  690,  685,  686,  687,
 /*  5900 */   688,  704,  706,  379,  623,  620,  328, 1606,  329, 1606,
 /*  5910 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  5920 */   686,  687,  688,  704,  706,  379,  623,  620,  455,  684,
 /*  5930 */   679,  681,  682,  683,  680,  145, 1606, 1606,  293,  328,
 /*  5940 */  1606,  329, 1606,  286,  862,  232, 1606,  624, 1606,  625,
 /*  5950 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  5960 */   620,  456,  684,  679,  681,  682,  683,  680, 1606, 1606,
 /*  5970 */  1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  5980 */  1606, 1606, 1606,  458,  684,  679,  681,  682,  683,  680,
 /*  5990 */  1606, 1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6000 */  1606, 1606, 1606, 1606, 1606,  460,  684,  679,  681,  682,
 /*  6010 */   683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606,  144,
 /*  6020 */  1606, 1606, 1606, 1606,  337, 1606,  338, 1606,  848,  290,
 /*  6030 */  1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,  329, 1606,
 /*  6040 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  6050 */   686,  687,  688,  704,  706,  379,  623,  620, 1606, 1606,
 /*  6060 */  1606, 1606, 1606,  620, 1606, 1606, 1606, 1606, 1606,  328,
 /*  6070 */  1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,
 /*  6080 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  6090 */   620,  328, 1606,  329, 1606,  286, 1606,  232, 1606,  624,
 /*  6100 */  1606,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6110 */   379,  623,  620,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  6120 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  6130 */   704,  706,  379,  623,  620,  462,  684,  679,  681,  682,
 /*  6140 */   683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606, 1606,
 /*  6150 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6160 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  464,  684,
 /*  6170 */   679,  681,  682,  683,  680, 1606, 1606, 1606,  293, 1606,
 /*  6180 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6190 */   466,  684,  679,  681,  682,  683,  680, 1606, 1606, 1606,
 /*  6200 */   293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6210 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6220 */  1606,  468,  684,  679,  681,  682,  683,  680, 1606, 1606,
 /*  6230 */  1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6240 */  1606, 1606, 1606,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  6250 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  6260 */   704,  706,  379,  623,  620,  470,  684,  679,  681,  682,
 /*  6270 */   683,  680, 1606, 1606, 1606,  293,  328, 1606,  329, 1606,
 /*  6280 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  6290 */   686,  687,  688,  704,  706,  379,  623,  620,  328, 1606,
 /*  6300 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  6310 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  6320 */   472,  684,  679,  681,  682,  683,  680, 1606, 1606,  328,
 /*  6330 */   293,  329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,
 /*  6340 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  6350 */   620, 1606, 1606,  477,  684,  679,  681,  682,  683,  680,
 /*  6360 */  1606, 1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6370 */  1606, 1606, 1606,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  6380 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  6390 */   704,  706,  379,  623,  620, 1606, 1606, 1606, 1606, 1606,
 /*  6400 */  1606, 1606, 1606, 1606, 1606, 1606,  479,  684,  679,  681,
 /*  6410 */   682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606,
 /*  6420 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,
 /*  6430 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  6440 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  6450 */   481,  684,  679,  681,  682,  683,  680, 1606, 1606, 1606,
 /*  6460 */   293,  328, 1606,  329, 1606,  286, 1606,  232, 1606,  624,
 /*  6470 */  1606,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6480 */   379,  623,  620,  483,  684,  679,  681,  682,  683,  680,
 /*  6490 */  1606, 1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6500 */  1606, 1606, 1606, 1606, 1606,  485,  684,  679,  681,  682,
 /*  6510 */   683,  680, 1606, 1606,  328,  293,  329, 1606,  286, 1606,
 /*  6520 */   232, 1606,  624, 1606,  625,  296,  690,  685,  686,  687,
 /*  6530 */   688,  704,  706,  379,  623,  620, 1606, 1606,  487,  684,
 /*  6540 */   679,  681,  682,  683,  680, 1606, 1606, 1606,  293, 1606,
 /*  6550 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,
 /*  6560 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  6570 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  6580 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6590 */  1606,  328, 1606,  329, 1606,  286, 1606,  232, 1606,  624,
 /*  6600 */  1606,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6610 */   379,  623,  620,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  6620 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  6630 */   704,  706,  379,  623,  620,  488,  684,  679,  681,  682,
 /*  6640 */   683,  680, 1606, 1606, 1606,  293,  328, 1606,  329, 1606,
 /*  6650 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  6660 */   686,  687,  688,  704,  706,  379,  623,  620,  489,  684,
 /*  6670 */   679,  681,  682,  683,  680, 1606, 1606, 1606,  293, 1606,
 /*  6680 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6690 */   491,  684,  679,  681,  682,  683,  680, 1606, 1606, 1606,
 /*  6700 */   293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6710 */  1606, 1606,  492,  684,  679,  681,  682,  683,  680, 1606,
 /*  6720 */  1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6730 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6740 */  1606, 1606, 1606,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  6750 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  6760 */   704,  706,  379,  623,  620, 1606, 1606, 1606, 1606, 1606,
 /*  6770 */  1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,  329, 1606,
 /*  6780 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  6790 */   686,  687,  688,  704,  706,  379,  623,  620,  328, 1606,
 /*  6800 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  6810 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  6820 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  6830 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  6840 */   623,  620,  494,  684,  679,  681,  682,  683,  680, 1606,
 /*  6850 */  1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6860 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6870 */  1606, 1606, 1606, 1606, 1606,  495,  684,  679,  681,  682,
 /*  6880 */   683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606, 1606,
 /*  6890 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  497,  684,  679,
 /*  6900 */   681,  682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606,
 /*  6910 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6920 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  498,  684,
 /*  6930 */   679,  681,  682,  683,  680, 1606, 1606, 1606,  293, 1606,
 /*  6940 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  6950 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  6960 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  6970 */   623,  620,  500,  684,  679,  681,  682,  683,  680, 1606,
 /*  6980 */  1606, 1606,  293,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  6990 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  7000 */   704,  706,  379,  623,  620,  328, 1606,  329, 1606,  286,
 /*  7010 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  7020 */   687,  688,  704,  706,  379,  623,  620,  502,  684,  679,
 /*  7030 */   681,  682,  683,  680, 1606, 1606,  328,  293,  329, 1606,
 /*  7040 */   286, 1606,  232, 1606,  624, 1606,  625,  296,  690,  685,
 /*  7050 */   686,  687,  688,  704,  706,  379,  623,  620, 1606, 1606,
 /*  7060 */   504,  684,  679,  681,  682,  683,  680, 1606, 1606, 1606,
 /*  7070 */   293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7080 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  7090 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  7100 */   623,  620, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7110 */  1606, 1606, 1606,  506,  684,  679,  681,  682,  683,  680,
 /*  7120 */  1606, 1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7130 */  1606, 1606, 1606, 1606, 1606,  328, 1606,  329, 1606,  286,
 /*  7140 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  7150 */   687,  688,  704,  706,  379,  623,  620,  508,  684,  679,
 /*  7160 */   681,  682,  683,  680, 1606, 1606, 1606,  293,  328, 1606,
 /*  7170 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  7180 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  7190 */   510,  684,  679,  681,  682,  683,  680, 1606, 1606, 1606,
 /*  7200 */   293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7210 */  1606, 1606,  386,  684,  679,  681,  682,  683,  680, 1606,
 /*  7220 */  1606,  328,  293,  329, 1606,  286, 1606,  232, 1606,  624,
 /*  7230 */  1606,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  7240 */   379,  623,  620, 1606, 1606,  511,  684,  679,  681,  682,
 /*  7250 */   683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606, 1606,
 /*  7260 */  1606, 1606, 1606, 1606, 1606,  328, 1606,  329, 1606,  286,
 /*  7270 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  7280 */   687,  688,  704,  706,  379,  623,  620, 1606, 1606, 1606,
 /*  7290 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,
 /*  7300 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  7310 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  7320 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  7330 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  7340 */   623,  620,  513,  684,  679,  681,  682,  683,  680, 1606,
 /*  7350 */  1606, 1606,  293,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  7360 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  7370 */   704,  706,  379,  623,  620,  387,  684,  679,  681,  682,
 /*  7380 */   683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606, 1606,
 /*  7390 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  514,  684,  679,
 /*  7400 */   681,  682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606,
 /*  7410 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  516,
 /*  7420 */   684,  679,  681,  682,  683,  680, 1606, 1606, 1606,  293,
 /*  7430 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7440 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7450 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  7460 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  7470 */   623,  620, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7480 */  1606, 1606, 1606,  328, 1606,  329, 1606,  286, 1606,  232,
 /*  7490 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  7500 */   704,  706,  379,  623,  620,  328, 1606,  329, 1606,  286,
 /*  7510 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  7520 */   687,  688,  704,  706,  379,  623,  620,  328, 1606,  329,
 /*  7530 */  1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,  690,
 /*  7540 */   685,  686,  687,  688,  704,  706,  379,  623,  620,  517,
 /*  7550 */   684,  679,  681,  682,  683,  680, 1606, 1606, 1606,  293,
 /*  7560 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7570 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7580 */  1606, 1606,  388,  684,  679,  681,  682,  683,  680, 1606,
 /*  7590 */  1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7600 */  1606, 1606, 1606, 1606,  518,  684,  679,  681,  682,  683,
 /*  7610 */   680, 1606, 1606, 1606,  293, 1606, 1606, 1606, 1606, 1606,
 /*  7620 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7630 */  1606, 1606, 1606, 1606, 1606,  389,  684,  679,  681,  682,
 /*  7640 */   683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606, 1606,
 /*  7650 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,  329,
 /*  7660 */  1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,  690,
 /*  7670 */   685,  686,  687,  688,  704,  706,  379,  623,  620,  526,
 /*  7680 */   684,  679,  681,  682,  683,  680, 1606, 1606, 1606,  293,
 /*  7690 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  7700 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  7710 */   623,  620,  328, 1606,  329, 1606,  286, 1606,  232, 1606,
 /*  7720 */   624, 1606,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  7730 */   706,  379,  623,  620,  528,  684,  679,  681,  682,  683,
 /*  7740 */   680, 1606, 1606,  328,  293,  329, 1606,  286, 1606,  232,
 /*  7750 */  1606,  624, 1606,  625,  296,  690,  685,  686,  687,  688,
 /*  7760 */   704,  706,  379,  623,  620, 1606, 1606,  530,  684,  679,
 /*  7770 */   681,  682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606,
 /*  7780 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,  329,
 /*  7790 */  1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,  690,
 /*  7800 */   685,  686,  687,  688,  704,  706,  379,  623,  620, 1606,
 /*  7810 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7820 */   532,  684,  679,  681,  682,  683,  680, 1606, 1606, 1606,
 /*  7830 */   293, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7840 */  1606, 1606,  328, 1606,  329, 1606,  286, 1606,  232, 1606,
 /*  7850 */   624, 1606,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  7860 */   706,  379,  623,  620,  534,  684,  679,  681,  682,  683,
 /*  7870 */   680, 1606, 1606, 1606,  293,  328, 1606,  329, 1606,  286,
 /*  7880 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  7890 */   687,  688,  704,  706,  379,  623,  620,  390,  684,  679,
 /*  7900 */   681,  682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606,
 /*  7910 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  392,
 /*  7920 */   684,  679,  681,  682,  683,  680, 1606, 1606,  328,  293,
 /*  7930 */   329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,
 /*  7940 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  7950 */  1606, 1606,  550,  684,  679,  681,  682,  683,  680, 1606,
 /*  7960 */  1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  7970 */  1606, 1606,  328, 1606,  329, 1606,  286, 1606,  232, 1606,
 /*  7980 */   624, 1606,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  7990 */   706,  379,  623,  620, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8000 */  1606, 1606, 1606, 1606, 1606,  328, 1606,  329, 1606,  286,
 /*  8010 */  1606,  232, 1606,  624, 1606,  625,  296,  690,  685,  686,
 /*  8020 */   687,  688,  704,  706,  379,  623,  620,  328, 1606,  329,
 /*  8030 */  1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,  690,
 /*  8040 */   685,  686,  687,  688,  704,  706,  379,  623,  620,  551,
 /*  8050 */   684,  679,  681,  682,  683,  680, 1606, 1606, 1606,  293,
 /*  8060 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  8070 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  8080 */   623,  620,  393,  684,  679,  681,  682,  683,  680, 1606,
 /*  8090 */  1606, 1606,  293, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8100 */  1606, 1606, 1606, 1606,  394,  684,  679,  681,  682,  683,
 /*  8110 */   680, 1606, 1606, 1606,  293, 1606, 1606, 1606, 1606, 1606,
 /*  8120 */  1606, 1606, 1606, 1606, 1606, 1606,  569,  684,  679,  681,
 /*  8130 */   682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606,
 /*  8140 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8150 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  328, 1606,  329,
 /*  8160 */  1606,  286, 1606,  232, 1606,  624, 1606,  625,  296,  690,
 /*  8170 */   685,  686,  687,  688,  704,  706,  379,  623,  620, 1606,
 /*  8180 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8190 */   328, 1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,
 /*  8200 */   625,  296,  690,  685,  686,  687,  688,  704,  706,  379,
 /*  8210 */   623,  620,  328, 1606,  329, 1606,  286, 1606,  232, 1606,
 /*  8220 */   624, 1606,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  8230 */   706,  379,  623,  620,  328, 1606,  329, 1606,  286, 1606,
 /*  8240 */   232, 1606,  624, 1606,  625,  296,  690,  685,  686,  687,
 /*  8250 */   688,  704,  706,  379,  623,  620,  573,  684,  679,  681,
 /*  8260 */   682,  683,  680, 1606, 1606, 1606,  293, 1606, 1606, 1606,
 /*  8270 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8280 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  578,
 /*  8290 */   684,  679,  681,  682,  683,  680, 1606, 1606, 1606,  293,
 /*  8300 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8310 */  1606,  579,  684,  679,  681,  682,  683,  680, 1606, 1606,
 /*  8320 */   619,  293, 1606,  622, 1606, 1606, 1606, 1606,  147, 1606,
 /*  8330 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8340 */  1606, 1606, 1606, 1606, 1606, 1606,  626, 1606, 1606, 1606,
 /*  8350 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8360 */  1606, 1606, 1606, 1606,  328, 1606,  329, 1606,  286, 1606,
 /*  8370 */   232, 1606,  624,  828,  625,  296,  690,  685,  686,  687,
 /*  8380 */   688,  704,  706,  379,  623,  620, 1606,  185, 1606,  649,
 /*  8390 */   650,  684,  679,  681,  682,  683,  680,  328, 1606,  329,
 /*  8400 */   293,  286, 1606,  232, 1606,  624, 1606,  625,  296,  690,
 /*  8410 */   685,  686,  687,  688,  704,  706,  379,  623,  620,  328,
 /*  8420 */  1606,  329, 1606,  286, 1606,  232, 1606,  624, 1606,  625,
 /*  8430 */   296,  690,  685,  686,  687,  688,  704,  706,  379,  623,
 /*  8440 */   620, 1606, 1606, 1606, 1606,  684,  679,  681,  682,  683,
 /*  8450 */   680, 1606, 1606, 1606,  293, 1606, 1606, 1606, 1606, 1606,
 /*  8460 */  1606, 1606, 1606, 1606,  627,  628,  629,  630,  631,  632,
 /*  8470 */   633,  634,  635,  636,  637,  638,  639,  640,  621,  829,
 /*  8480 */   830,  619, 1606,  322,  622,  323,  324,  325, 1606,  141,
 /*  8490 */  1606,  226, 1606, 1606, 1606, 1606, 1606, 1606,  671, 1606,
 /*  8500 */   329, 1606,  286, 1606,  232, 1606,  624,  626,  625,  296,
 /*  8510 */   690,  685,  686,  687,  688,  704,  706,  379,  623,  620,
 /*  8520 */  1606,  348, 1606,  971,  972,  973,  974,  975,  976,  977,
 /*  8530 */   978,  979,  980,  981,  828, 1606, 1606, 1606, 1606,  253,
 /*  8540 */   282, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  209, 1606,
 /*  8550 */   649,  650,  925, 1606,  329, 1606,  286, 1606,  232, 1606,
 /*  8560 */   624, 1606,  625,  296,  690,  685,  686,  687,  688,  704,
 /*  8570 */   706,  379,  623,  620, 1606,  821, 1606,  824,  825,  826,
 /*  8580 */  1606,  285, 1606, 1606,  823, 1606, 1606, 1606, 1606, 1606,
 /*  8590 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8600 */  1606, 1606, 1606,  613,  614,  615, 1606, 1606, 1606,  821,
 /*  8610 */   612,  824,  825,  826, 1606,  285, 1606, 1606,  823,  601,
 /*  8620 */   356,  134,  582, 1606, 1606,  627,  628,  629,  630,  631,
 /*  8630 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*  8640 */   829,  830,  619, 1606, 1606,  622, 1606, 1606, 1606,  210,
 /*  8650 */  1606,  211,  644,  604,  356,  134,  582,  684,  679,  681,
 /*  8660 */   682,  683,  680, 1606, 1606, 1606,  293,  611,  626, 1606,
 /*  8670 */  1606, 1606, 1606, 1606,  814,  815, 1606, 1606, 1606,  619,
 /*  8680 */   822,  827,  622,  210, 1606,  211, 1606, 1606, 1606,  646,
 /*  8690 */   624, 1606,  625, 1606,  619, 1606,  616,  622, 1606, 1606,
 /*  8700 */  1606,  379,  623,  620, 1606,  626, 1606, 1606,  814,  815,
 /*  8710 */  1606, 1606, 1606, 1606,  822,  827,  624, 1606,  625, 1606,
 /*  8720 */   626, 1606, 1606, 1606,  624, 1606,  625,  379,  623,  620,
 /*  8730 */  1606, 1606, 1606,  616, 1606,  379,  623,  620,  125, 1606,
 /*  8740 */   804,  800,  801,  802,  803,  805, 1606, 1606,  616,  302,
 /*  8750 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8760 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8770 */  1606, 1606,  624, 1606,  625, 1606,  689,  685,  686,  687,
 /*  8780 */   688,  704,  706,  379,  623,  620,  627,  628,  629,  630,
 /*  8790 */   631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
 /*  8800 */   621, 1606, 1606, 1606, 1606, 1606,  821, 1606,  824,  825,
 /*  8810 */   826, 1606, 1606, 1606, 1606,  823, 1606, 1606, 1606, 1606,
 /*  8820 */  1606, 1606, 1606,  627,  628,  629,  630,  631,  632,  633,
 /*  8830 */   634,  635,  636,  637,  638,  639,  640,  621,  627,  628,
 /*  8840 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  8850 */   639,  640,  621, 1606, 1606,  624,  879,  625, 1606,  556,
 /*  8860 */   685,  686,  687,  688,  704,  706,  379,  623,  620,  821,
 /*  8870 */  1606,  824,  825,  826, 1606, 1606, 1606, 1606,  823, 1606,
 /*  8880 */   184, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  821,  186,
 /*  8890 */   824,  825,  826, 1606,  581, 1606, 1606,  823, 1606, 1606,
 /*  8900 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  868,  869, 1606,
 /*  8910 */  1606,  822,  827, 1606, 1606, 1606, 1606, 1606, 1606,  901,
 /*  8920 */  1606,  624,  556,  625, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8930 */  1606, 1606,  379,  623,  620,  582, 1606, 1606, 1606, 1606,
 /*  8940 */  1606, 1606, 1606,  184, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8950 */  1606, 1606,  186, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  8960 */  1606, 1606,  210,  821,  211,  824,  825,  826, 1606,  584,
 /*  8970 */   868,  869,  823, 1606,  822,  827, 1606, 1606, 1606, 1606,
 /*  8980 */  1606, 1606, 1606, 1606,  624, 1606,  625,  814,  815, 1606,
 /*  8990 */  1606, 1606, 1606,  822,  827,  379,  623,  620, 1606, 1606,
 /*  9000 */  1606, 1606, 1606,  624, 1606,  625, 1606, 1606, 1606, 1606,
 /*  9010 */   582, 1606, 1606, 1606,  379,  623,  620, 1606,  821, 1606,
 /*  9020 */   824,  825,  826, 1606,  586, 1606,  821,  823,  824,  825,
 /*  9030 */   826, 1606, 1008, 1606, 1606,  823, 1606,  210, 1606,  211,
 /*  9040 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  613,  614,  615,
 /*  9050 */  1606, 1606, 1606, 1606,  612, 1606, 1606, 1606, 1606, 1606,
 /*  9060 */  1606, 1606,  814,  815, 1606,  582, 1606, 1606,  822,  827,
 /*  9070 */  1606, 1606, 1606,  582, 1606, 1606, 1606, 1606,  624, 1606,
 /*  9080 */   625, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  379,
 /*  9090 */   623,  620,  210, 1606,  211, 1606, 1606, 1606, 1606, 1606,
 /*  9100 */   210, 1606,  211, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9110 */   179,  642, 1606, 1606, 1606, 1606, 1606,  814,  815, 1606,
 /*  9120 */  1606, 1606, 1606,  822,  827,  814,  815, 1606, 1606, 1606,
 /*  9130 */  1606,  822,  827,  624, 1606,  625, 1606, 1606, 1606, 1606,
 /*  9140 */  1606,  624, 1606,  625,  379,  623,  620, 1606, 1606, 1606,
 /*  9150 */  1606, 1606,  379,  623,  620,  821, 1606,  824,  825,  826,
 /*  9160 */   624,  603,  625, 1606,  823, 1606, 1606, 1606, 1606, 1606,
 /*  9170 */  1606,  379,  623,  620,  821, 1606,  824,  825,  826, 1606,
 /*  9180 */  1012, 1606, 1606,  823, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9190 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9200 */  1606, 1606,  582, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9210 */  1606, 1606, 1606,  821, 1606,  824,  825,  826, 1606, 1606,
 /*  9220 */  1606,  582,  823, 1606, 1606, 1606, 1606, 1606, 1606,  210,
 /*  9230 */  1606,  211, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9240 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  210, 1606,
 /*  9250 */   211, 1606, 1606, 1606,  814,  815, 1606, 1606, 1606, 1606,
 /*  9260 */   822,  827, 1606,  810, 1606, 1606,  556, 1606, 1606, 1606,
 /*  9270 */   624, 1606,  625,  814,  815, 1606, 1606, 1606, 1606,  822,
 /*  9280 */   827,  379,  623,  620, 1606, 1606, 1606,  184, 1606,  624,
 /*  9290 */  1606,  625, 1606, 1606, 1606, 1606,  186, 1606, 1606, 1606,
 /*  9300 */   379,  623,  620,  821, 1606,  824,  825,  826, 1606, 1606,
 /*  9310 */  1606, 1606,  823, 1606,  868,  869, 1606, 1606,  822,  827,
 /*  9320 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  624, 1606,
 /*  9330 */   625, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  379,
 /*  9340 */   623,  620, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9350 */   821, 1606,  824,  825,  826, 1606,  878,  557, 1606,  823,
 /*  9360 */  1606, 1606, 1606, 1606,  821, 1606,  824,  825,  826, 1606,
 /*  9370 */  1606, 1606, 1606,  823, 1606, 1606, 1606,  184, 1606, 1606,
 /*  9380 */  1606, 1606, 1606, 1606, 1606, 1606,  186, 1606, 1606, 1606,
 /*  9390 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9400 */  1606, 1606, 1606, 1606,  868,  869, 1606, 1606,  822,  827,
 /*  9410 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  624, 1606,
 /*  9420 */   625, 1606, 1606, 1606,  872, 1606, 1606, 1606, 1606,  379,
 /*  9430 */   623,  620, 1606,  873, 1606,  334, 1606,  339,  819, 1606,
 /*  9440 */   820, 1606,  839, 1606,  335, 1606, 1606, 1606, 1606, 1606,
 /*  9450 */  1606,  868,  869, 1606, 1606,  822,  827, 1606, 1606, 1606,
 /*  9460 */  1606, 1606, 1606,  814,  815,  624, 1606,  625, 1606,  822,
 /*  9470 */   827, 1606, 1606, 1606, 1606, 1606,  379,  623,  620,  624,
 /*  9480 */  1606,  625, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9490 */   379,  623,  620,  821, 1606,  824,  825,  826, 1606, 1606,
 /*  9500 */  1606,  821,  823,  824,  825,  826, 1606, 1606, 1606, 1606,
 /*  9510 */   823, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9520 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9530 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9540 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9550 */   821, 1606,  824,  825,  826, 1606, 1606, 1606, 1606,  823,
 /*  9560 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  819, 1606,  820,
 /*  9570 */  1606,  336, 1606,  335, 1606,  819, 1606,  820, 1606,  816,
 /*  9580 */  1606,  335, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9590 */  1606, 1606,  814,  815, 1606, 1606, 1606, 1606,  822,  827,
 /*  9600 */   814,  815, 1606, 1606, 1606, 1606,  822,  827,  624, 1606,
 /*  9610 */   625, 1606, 1606, 1606, 1606, 1606,  624, 1606,  625,  379,
 /*  9620 */   623,  620, 1606, 1606,  819, 1606,  820,  379,  623,  620,
 /*  9630 */   831, 1606, 1606, 1606, 1606, 1606, 1606,  821, 1606,  824,
 /*  9640 */   825,  826, 1606, 1606, 1606, 1606,  823, 1606, 1606,  814,
 /*  9650 */   815, 1606, 1606,  154, 1606,  822,  827, 1606, 1606, 1606,
 /*  9660 */  1606, 1606, 1606, 1606, 1606,  624, 1606,  625, 1606, 1606,
 /*  9670 */  1606, 1606, 1606, 1606, 1606, 1606,  379,  623,  620,  821,
 /*  9680 */  1606,  824,  825,  826, 1606, 1606, 1606, 1606,  823, 1606,
 /*  9690 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9700 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9710 */  1606,  819, 1606,  820, 1606,  836, 1606,  335, 1606, 1606,
 /*  9720 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9730 */  1606, 1606, 1606, 1606, 1606, 1606,  814,  815, 1606, 1606,
 /*  9740 */  1606, 1606,  822,  827, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9750 */  1606, 1606,  624,  819,  625,  820, 1606,  840, 1606,  335,
 /*  9760 */  1606, 1606, 1606,  379,  623,  620, 1606,  821, 1606,  824,
 /*  9770 */   825,  826, 1606, 1606, 1606, 1606,  823, 1606,  814,  815,
 /*  9780 */  1606, 1606, 1606, 1606,  822,  827, 1606, 1606, 1606, 1606,
 /*  9790 */  1606, 1606, 1606, 1606,  624, 1606,  625, 1606, 1606, 1606,
 /*  9800 */  1606, 1606, 1606, 1606, 1606,  379,  623,  620, 1606, 1606,
 /*  9810 */  1606, 1606,  821, 1606,  824,  825,  826, 1606, 1606, 1606,
 /*  9820 */  1606,  823, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9830 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9840 */  1606,  819, 1606,  820, 1606,  865, 1606,  335, 1606, 1606,
 /*  9850 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9860 */  1606, 1606, 1606, 1606, 1606, 1606,  814,  815, 1606, 1606,
 /*  9870 */  1606, 1606,  822,  827,  821, 1606,  824,  825,  826, 1606,
 /*  9880 */  1606, 1606,  624,  823,  625, 1606,  819, 1606,  820, 1606,
 /*  9890 */   866, 1606,  335,  379,  623,  620, 1606, 1606, 1606, 1606,
 /*  9900 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /*  9910 */  1606,  814,  815, 1606, 1606, 1606, 1606,  822,  827, 1606,
 /*  9920 */  1606, 1606,  821, 1606,  824,  825,  826,  624, 1606,  625,
 /*  9930 */  1606,  823, 1606, 1606, 1606, 1606, 1606, 1606,  379,  623,
 /*  9940 */   620, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  872, 1606,
 /*  9950 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  873, 1606,  340,
 /*  9960 */  1606,  339,  821, 1606,  824,  825,  826, 1606, 1606, 1606,
 /*  9970 */  1606,  823, 1606, 1606, 1606,  868,  869, 1606, 1606,  822,
 /*  9980 */   827, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  624,
 /*  9990 */  1606,  625, 1606, 1606, 1606, 1606,  872, 1606, 1606, 1606,
 /* 10000 */   379,  623,  620, 1606, 1606,  873, 1606, 1606, 1606,  874,
 /* 10010 */  1606, 1606,  900, 1606, 1606,  556, 1606, 1606, 1606, 1606,
 /* 10020 */  1606, 1606, 1606,  868,  869, 1606,  155,  822,  827, 1606,
 /* 10030 */  1606, 1606, 1606, 1606, 1606, 1606,  184,  624, 1606,  625,
 /* 10040 */  1606, 1606, 1606, 1606, 1606,  186, 1606, 1606,  379,  623,
 /* 10050 */   620, 1606,  821, 1606,  824,  825,  826, 1606, 1606, 1606,
 /* 10060 */  1606,  823, 1606,  868,  869, 1606, 1606,  822,  827, 1606,
 /* 10070 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  624, 1606,  625,
 /* 10080 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  379,  623,
 /* 10090 */   620, 1606, 1606, 1606, 1606, 1606,  164, 1606, 1606,  947,
 /* 10100 */   583, 1606,  277,  284,  968, 1606, 1606, 1606,  821, 1606,
 /* 10110 */   824,  825,  826, 1606, 1007, 1606, 1606,  823, 1606, 1606,
 /* 10120 */  1606, 1606, 1606, 1606, 1606, 1606,  210, 1606,  211, 1606,
 /* 10130 */  1606, 1606, 1606, 1606, 1606, 1037, 1606,  971,  972,  973,
 /* 10140 */   974,  975,  976,  977,  978,  979,  980,  981, 1606, 1606,
 /* 10150 */  1606,  814,  815,  253,  282,  582, 1606,  822,  827, 1606,
 /* 10160 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  624, 1606,  625,
 /* 10170 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  379,  623,
 /* 10180 */   620, 1606,  210, 1606,  211, 1606,  821, 1606,  824,  825,
 /* 10190 */   826, 1606, 1011, 1606, 1606,  823, 1606, 1606, 1606, 1606,
 /* 10200 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  814,  815, 1606,
 /* 10210 */  1606, 1606, 1606,  822,  827, 1606, 1606, 1606, 1606, 1606,
 /* 10220 */  1606, 1606, 1606,  624, 1606,  625, 1606, 1606, 1606, 1606,
 /* 10230 */  1606, 1606, 1606,  582,  379,  623,  620, 1606, 1606, 1606,
 /* 10240 */  1606,  821, 1606,  824,  825,  826, 1606, 1606, 1606,  821,
 /* 10250 */   823,  824,  825,  826, 1606, 1606, 1606, 1606,  823, 1606,
 /* 10260 */   210, 1606,  211, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10270 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10280 */  1606, 1606, 1606, 1606, 1606,  814,  815, 1606, 1606, 1606,
 /* 10290 */  1606,  822,  827, 1606, 1606, 1606,  821, 1606,  824,  825,
 /* 10300 */   826,  624, 1606,  625, 1606,  823, 1606, 1606, 1606, 1606,
 /* 10310 */  1606, 1606,  379,  623,  620,  819, 1606,  820, 1606, 1606,
 /* 10320 */  1606,  818, 1606,  872, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10330 */  1606, 1606,  873, 1606, 1606, 1606,  871, 1606, 1606, 1606,
 /* 10340 */   814,  815, 1606, 1606, 1606, 1606,  822,  827, 1606,  811,
 /* 10350 */   868,  869, 1606, 1606,  822,  827,  624, 1606,  625, 1606,
 /* 10360 */  1606, 1606, 1606, 1606,  624, 1606,  625,  379,  623,  620,
 /* 10370 */   184, 1606, 1606, 1606, 1606,  379,  623,  620,  821,  186,
 /* 10380 */   824,  825,  826, 1606, 1606, 1606, 1606,  823, 1606, 1606,
 /* 10390 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  868,  869, 1606,
 /* 10400 */  1606,  822,  827, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10410 */  1606,  624, 1606,  625, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10420 */  1606, 1606,  379,  623,  620, 1606, 1606,  821, 1606,  824,
 /* 10430 */   825,  826, 1606, 1606, 1606,  821,  823,  824,  825,  826,
 /* 10440 */  1606, 1606, 1606, 1606,  823, 1606, 1606, 1606, 1606, 1606,
 /* 10450 */  1606, 1606,  819, 1606,  820, 1606, 1606, 1606,  813, 1606,
 /* 10460 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10470 */  1606, 1606, 1606, 1606, 1606, 1606, 1606,  814,  815, 1606,
 /* 10480 */  1606, 1606, 1606,  822,  827,  821, 1606,  824,  825,  826,
 /* 10490 */  1606, 1606, 1606,  624,  823,  625, 1606, 1606, 1606, 1606,
 /* 10500 */  1606,  819, 1606,  820,  379,  623,  620,  838, 1606,  872,
 /* 10510 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,  873, 1606,
 /* 10520 */  1606, 1606,  867, 1606, 1606, 1606,  814,  815, 1606, 1606,
 /* 10530 */  1606, 1606,  822,  827, 1606, 1606,  868,  869, 1606, 1606,
 /* 10540 */   822,  827,  624, 1606,  625, 1606, 1606, 1606, 1606, 1606,
 /* 10550 */   624, 1606,  625,  379,  623,  620, 1606, 1606, 1606,  872,
 /* 10560 */  1606,  379,  623,  620, 1606, 1606, 1606,  821,  873,  824,
 /* 10570 */   825,  826,  876, 1606, 1606, 1606,  823, 1606, 1606, 1606,
 /* 10580 */  1606, 1606, 1606, 1606, 1606, 1606,  868,  869, 1606, 1606,
 /* 10590 */   822,  827, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10600 */   624, 1606,  625, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10610 */  1606,  379,  623,  620,  944, 1606, 1606, 1606, 1606, 1606,
 /* 10620 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10630 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10640 */  1606,  210, 1606,  211, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10650 */  1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10660 */  1606, 1606, 1606, 1606, 1606, 1606,  814,  815, 1606, 1606,
 /* 10670 */  1606, 1606,  822,  827, 1606, 1606, 1606, 1606, 1606, 1606,
 /* 10680 */  1606, 1606,  624, 1606,  625, 1606, 1606, 1606, 1606, 1606,
 /* 10690 */  1606, 1606, 1606,  379,  623,  620,
);
static $yy_lookahead = array(
 /*     0 */     3,    2,   50,    6,    5,    8,    7,   10,   11,    2,
 /*    10 */    24,   25,    5,   14,   28,   13,   30,   18,   19,    5,
 /*    20 */   299,  300,   22,  302,   24,   25,   29,  300,   28,  302,
 /*    30 */    30,   31,   33,   15,  297,   36,   37,   38,   39,  311,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,   48,  185,   31,
 /*    50 */   194,  220,  221,  185,  186,  187,  188,  189,  190,  311,
 /*    60 */   178,  179,  194,  181,   67,   28,   69,   30,   50,   72,
 /*    70 */    73,   53,   54,   55,   72,   73,   58,  195,  222,   61,
 /*    80 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*    90 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   100 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   110 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*   120 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   130 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   140 */   143,  226,  227,  228,  147,  148,  149,  150,  151,  152,
 /*   150 */   153,  154,  155,  156,  157,  158,  159,  160,  161,    3,
 /*   160 */     2,  280,    6,    5,    8,  253,  298,   11,  300,  313,
 /*   170 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*   180 */   312,  313,  197,  198,  199,   29,  198,  199,   17,  204,
 /*   190 */   205,   33,  204,  205,   36,   37,   38,   39,  254,   41,
 /*   200 */    42,   43,   44,   45,   46,   47,   48,  178,  179,  194,
 /*   210 */   181,  256,  185,  186,  187,  188,  189,  190,  257,   48,
 /*   220 */    49,  194,  179,   67,  195,   69,  220,  221,   72,   73,
 /*   230 */    76,   77,   78,   79,   80,   81,   82,   83,  195,   83,
 /*   240 */    84,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*   250 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*   260 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*   270 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
 /*   280 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*   290 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*   300 */   226,  227,  228,  147,  148,  149,  150,  151,  152,  153,
 /*   310 */   154,  155,  156,  157,  158,  159,  160,  161,    3,   25,
 /*   320 */     3,    6,   28,    6,   30,   10,   11,  300,  313,  302,
 /*   330 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*   340 */   313,  180,  194,  207,   29,  209,  210,  211,  212,  213,
 /*   350 */   214,  215,  216,  217,  218,  219,  301,  196,  197,  198,
 /*   360 */   199,  225,  226,  198,  199,  204,  205,   50,   51,  204,
 /*   370 */   205,  185,  186,  187,  188,  189,  190,  301,  178,  179,
 /*   380 */   194,  181,   67,   22,   69,   24,   25,   72,   73,   28,
 /*   390 */     3,   30,   15,    6,   17,  195,  194,   20,   83,   84,
 /*   400 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*   410 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   420 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*   430 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*   440 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*   450 */   135,  136,  137,  138,  139,  140,  141,  142,  143,   72,
 /*   460 */    73,  313,  147,  148,  149,  150,  151,  152,  153,  154,
 /*   470 */   155,  156,  157,  158,  159,  160,  161,    3,  161,   15,
 /*   480 */     6,   17,    8,   11,  298,   11,  300,   10,  302,  303,
 /*   490 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*   500 */   258,  194,  207,   29,  209,  210,  211,  212,  213,  214,
 /*   510 */   215,  216,  217,  218,  219,  313,  178,  199,  185,  181,
 /*   520 */   225,  226,  204,  205,   21,  192,  193,  194,   56,  222,
 /*   530 */   185,  186,  187,  188,  189,  190,  174,   34,  176,  194,
 /*   540 */   194,   67,   65,   69,   72,   73,   72,   73,  161,  157,
 /*   550 */   158,  159,  160,   50,   51,   52,  185,   83,   84,   85,
 /*   560 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*   570 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*   580 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*   590 */   116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
 /*   600 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*   610 */   136,  137,  138,  139,  140,  141,  142,  143,  220,  221,
 /*   620 */   313,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*   630 */   156,  157,  158,  159,  160,  161,    3,  220,  221,    6,
 /*   640 */   174,    8,  176,  298,   11,  300,  313,  302,  303,  304,
 /*   650 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  313,
 /*   660 */    33,  180,   29,   36,   37,   38,   39,  257,   41,   42,
 /*   670 */    43,   44,   45,   46,   47,   48,   17,  196,  197,  198,
 /*   680 */   199,  179,   21,  181,   13,  204,  205,   72,   73,  185,
 /*   690 */   186,  187,  188,  189,  190,   34,    3,  195,  194,    6,
 /*   700 */    67,  194,   69,   32,  199,   72,   73,   48,   49,  204,
 /*   710 */   205,   50,   51,   52,   21,  194,   83,   84,   85,   86,
 /*   720 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*   730 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   740 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*   750 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*   760 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   770 */   137,  138,  139,  140,  141,  142,  143,  195,  185,  185,
 /*   780 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*   790 */   157,  158,  159,  160,  161,    3,  175,  176,    6,  206,
 /*   800 */     8,   10,  298,   11,  300,  258,  302,  303,  304,  305,
 /*   810 */   306,  307,  308,  309,  310,  311,  312,  313,  236,  237,
 /*   820 */   313,   29,  240,  241,  242,  243,  244,  245,  246,  247,
 /*   830 */    15,  179,   17,  181,  313,   20,  194,   22,  185,   24,
 /*   840 */    25,  248,  249,   28,  283,   30,  252,  195,  185,  186,
 /*   850 */   187,  188,  189,  190,  161,    3,   65,  194,    6,   67,
 /*   860 */   185,   69,  186,  185,   72,   73,  190,  185,  193,  194,
 /*   870 */   194,  193,  194,  194,  185,   83,   84,   85,   86,   87,
 /*   880 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*   890 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*   900 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*   910 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
 /*   920 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*   930 */   138,  139,  140,  141,  142,  143,   10,  262,  185,  147,
 /*   940 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*   950 */   158,  159,  160,  161,    3,  313,  185,    6,   17,    8,
 /*   960 */   281,  282,   11,  300,  258,  302,  303,  304,  305,  306,
 /*   970 */   307,  308,  309,  310,  311,  312,  313,  258,  194,  180,
 /*   980 */    29,  305,  306,  307,  308,  309,  310,   17,  313,  313,
 /*   990 */    49,  313,  313,   67,   68,  196,  197,  198,  199,  179,
 /*  1000 */    15,  181,   17,  204,  205,   20,  222,  185,  186,  187,
 /*  1010 */   188,  189,  190,  161,   17,  195,  194,   20,   67,   49,
 /*  1020 */    69,  301,  199,   72,   73,  225,  226,  204,  205,  194,
 /*  1030 */   194,  194,  194,  301,   83,   84,   85,   86,   87,   88,
 /*  1040 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*  1050 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1060 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  1070 */   119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
 /*  1080 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1090 */   139,  140,  141,  142,  143,  195,  185,  313,  147,  148,
 /*  1100 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*  1110 */   159,  160,  161,    3,  278,  279,    6,  206,    8,  301,
 /*  1120 */   282,   11,  300,  257,  302,  303,  304,  305,  306,  307,
 /*  1130 */   308,  309,  310,  311,  312,  313,  194,  237,  180,   29,
 /*  1140 */   240,  241,  242,  243,  244,  245,  246,  247,  313,  313,
 /*  1150 */   313,  313,   47,   48,  196,  197,  198,  199,  181,  248,
 /*  1160 */   249,    3,  204,  205,    6,  220,  185,  186,  187,  188,
 /*  1170 */   189,  190,  185,    3,  228,  194,    6,   67,  185,   69,
 /*  1180 */   193,  194,   72,   73,  194,   31,  193,  194,  227,  228,
 /*  1190 */   194,   21,   34,   83,   84,   85,   86,   87,   88,   89,
 /*  1200 */    90,   91,   92,   93,   94,   95,   96,   97,   98,   99,
 /*  1210 */   100,  101,  102,  103,  104,  105,  106,  107,  108,  109,
 /*  1220 */   110,  111,  112,  113,  114,  115,  116,  117,  118,  119,
 /*  1230 */   120,  121,  122,  123,  124,  125,  126,  127,  128,  129,
 /*  1240 */   130,  131,  132,  133,  134,  135,  136,  137,  138,  139,
 /*  1250 */   140,  141,  142,  143,   11,  313,  170,  147,  148,  149,
 /*  1260 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*  1270 */   160,  161,    3,  227,  228,    6,   17,    8,  282,    3,
 /*  1280 */    11,  300,    6,  302,  303,  304,  305,  306,  307,  308,
 /*  1290 */   309,  310,  311,  312,  313,  194,  194,  180,   29,   56,
 /*  1300 */   313,  178,  179,  313,  181,  199,  313,   16,   49,  313,
 /*  1310 */   204,  205,  170,  196,  197,  198,  199,   34,  195,  161,
 /*  1320 */    30,  204,  205,  222,  222,  185,  186,  187,  188,  189,
 /*  1330 */   190,  161,  170,   50,  194,  185,   67,  170,   69,   63,
 /*  1340 */   205,   72,   73,  193,  194,  227,  228,   56,   72,   73,
 /*  1350 */   145,  146,   83,   84,   85,   86,   87,   88,   89,   90,
 /*  1360 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*  1370 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1380 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  1390 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  1400 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1410 */   141,  142,  143,   28,  313,  313,  147,  148,  149,  150,
 /*  1420 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  1430 */   161,    3,   17,   16,    6,   13,  296,  161,  298,   11,
 /*  1440 */   300,   21,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  1450 */   310,  311,  312,  313,  194,    3,   13,   29,    6,  178,
 /*  1460 */   179,  180,  181,  313,   49,   11,  185,  179,   16,  181,
 /*  1470 */    50,   51,   52,   56,  193,  194,  195,  196,  197,  198,
 /*  1480 */   199,   29,  222,  195,   62,  204,  205,   13,  227,  228,
 /*  1490 */    12,   13,  230,  231,  293,   67,  204,   69,   12,   13,
 /*  1500 */    72,   73,   12,   13,  194,   62,   32,   74,  295,   57,
 /*  1510 */    56,   83,   84,   85,   86,   87,   88,   89,   90,   91,
 /*  1520 */    92,   93,   94,   95,   96,   97,   98,   99,  100,  101,
 /*  1530 */   102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
 /*  1540 */   112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
 /*  1550 */   122,  123,  124,  125,  126,  127,  128,  129,  130,  131,
 /*  1560 */   132,  133,  134,  135,  136,  137,  138,  139,  140,  141,
 /*  1570 */   142,  143,   75,  313,   15,  147,  148,  149,  150,  151,
 /*  1580 */   152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
 /*  1590 */     3,  195,  282,    6,  313,    8,    9,   10,   11,  147,
 /*  1600 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  1610 */   158,  159,  160,  161,    7,   13,   29,  180,  170,   11,
 /*  1620 */   195,   14,   13,  313,   16,   18,   19,   12,   13,  195,
 /*  1630 */    17,   17,   32,  196,  197,  198,  199,  271,   62,  194,
 /*  1640 */    33,  204,  205,   36,   37,   38,   39,  266,   41,   42,
 /*  1650 */    43,   44,   45,   46,   47,   48,   32,  264,   64,   72,
 /*  1660 */    73,  186,   49,   49,   56,  190,   64,  222,   65,  194,
 /*  1670 */    83,   62,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1680 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1690 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1700 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1710 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1720 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1730 */   143,   11,  275,   11,  147,  148,  149,  150,  151,  152,
 /*  1740 */   153,  154,  155,  156,  157,  158,  159,  160,  161,    3,
 /*  1750 */   277,   62,    6,   13,   17,  273,   10,   11,  313,   17,
 /*  1760 */    17,  165,  166,  167,  168,  169,  271,  171,  172,  173,
 /*  1770 */   174,  175,  176,  177,    3,   29,   56,    6,   56,   13,
 /*  1780 */   305,  306,  307,  308,  309,  310,   49,   16,  313,   59,
 /*  1790 */   195,   49,   49,  195,  195,  194,  255,   32,  194,  208,
 /*  1800 */    29,  195,   62,  207,  176,  209,  210,  211,  212,  213,
 /*  1810 */   214,  215,  216,  217,  218,  219,  195,  195,   72,   73,
 /*  1820 */    50,  225,  226,  222,   15,  220,  222,   15,   57,   83,
 /*  1830 */    64,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  1840 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  1850 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  1860 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
 /*  1870 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  1880 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  1890 */   220,   13,   13,  147,  148,  149,  150,  151,  152,  153,
 /*  1900 */   154,  155,  156,  157,  158,  159,  160,  161,    3,  223,
 /*  1910 */   220,    6,   17,  231,  313,   10,   11,  313,  147,  148,
 /*  1920 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*  1930 */   159,  160,  161,  180,   29,  223,    3,   13,   13,    6,
 /*  1940 */    62,   62,  224,  195,   49,  170,  195,  195,  224,  196,
 /*  1950 */   197,  198,  199,  195,  195,  180,  195,  204,  205,  224,
 /*  1960 */   170,  185,  186,  187,  188,  189,  190,   34,  195,  195,
 /*  1970 */   194,  196,  197,  198,  199,  195,  195,   72,   73,  204,
 /*  1980 */   205,  195,  195,   50,   51,  170,   62,   62,   83,  170,
 /*  1990 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  2000 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2010 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2020 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  2030 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2040 */   135,  136,  137,  138,  139,  140,  141,  142,  143,   13,
 /*  2050 */   170,  208,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  2060 */   155,  156,  157,  158,  159,  160,  161,    3,    0,    0,
 /*  2070 */     6,   15,  296,   15,  298,   11,  300,   15,  302,  303,
 /*  2080 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  2090 */   194,  194,  180,   29,  161,   29,   29,   23,   62,   11,
 /*  2100 */    13,   74,   11,   75,   62,   13,   11,   11,  196,  197,
 /*  2110 */   198,  199,   13,  194,  180,   11,  204,  205,  222,  222,
 /*  2120 */   185,  186,  187,  188,  189,  190,   13,   11,   13,  194,
 /*  2130 */   196,  197,  198,  199,   11,   13,   72,   73,  204,  205,
 /*  2140 */    13,  222,   56,   11,   13,   11,   13,   83,   11,   85,
 /*  2150 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  2160 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  2170 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  2180 */   116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
 /*  2190 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  2200 */   136,  137,  138,  139,  140,  141,  142,  143,   13,  313,
 /*  2210 */   313,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  2220 */   156,  157,  158,  159,  160,  161,    3,   11,   13,    6,
 /*  2230 */    11,  296,  313,  298,   11,  300,   11,  302,  303,  304,
 /*  2240 */   305,  306,  307,  308,  309,  310,  311,  312,  313,   13,
 /*  2250 */    13,  180,   29,   11,   13,   11,   13,   11,   62,   11,
 /*  2260 */    13,   62,   13,   62,   13,   11,   11,  196,  197,  198,
 /*  2270 */   199,   62,   13,  180,   11,  204,  205,   13,   11,  185,
 /*  2280 */   186,  187,  188,  189,  190,   13,   62,   11,  194,  196,
 /*  2290 */   197,  198,  199,   13,   11,   72,   73,  204,  205,   13,
 /*  2300 */    11,   13,   11,   13,   11,   13,   83,   11,   85,   86,
 /*  2310 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*  2320 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2330 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  2340 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*  2350 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2360 */   137,  138,  139,  140,  141,  142,  143,   13,   11,   13,
 /*  2370 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*  2380 */   157,  158,  159,  160,  161,    3,   56,   56,    6,   56,
 /*  2390 */   296,   11,  298,   11,  300,   11,  302,  303,  304,  305,
 /*  2400 */   306,  307,  308,  309,  310,  311,  312,  313,   13,   13,
 /*  2410 */   180,   29,   11,   13,   11,   13,   11,   13,   11,   13,
 /*  2420 */    62,   62,   62,   13,   11,   11,  196,  197,  198,  199,
 /*  2430 */    62,   13,  180,   11,  204,  205,   13,   62,  185,  186,
 /*  2440 */   187,  188,  189,  190,   11,   13,   11,  194,  196,  197,
 /*  2450 */   198,  199,   13,   11,   72,   73,  204,  205,   13,   11,
 /*  2460 */    13,   11,   13,   11,   13,   83,   11,   85,   86,   87,
 /*  2470 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  2480 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2490 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  2500 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
 /*  2510 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2520 */   138,  139,  140,  141,  142,  143,   62,   62,   13,  147,
 /*  2530 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  2540 */   158,  159,  160,  161,    3,    3,   11,    6,    6,  296,
 /*  2550 */    62,  298,   11,  300,  180,  302,  303,  304,  305,  306,
 /*  2560 */   307,  308,  309,  310,  311,  312,  313,   26,   27,  180,
 /*  2570 */   196,  197,  198,  199,   62,   13,   23,   13,  204,  205,
 /*  2580 */   136,   11,   13,   11,   13,  196,  197,  198,  199,   13,
 /*  2590 */    11,  180,   11,  204,  205,   13,  184,  185,  186,  187,
 /*  2600 */   188,  189,  190,   13,   11,   63,  194,  196,  197,  198,
 /*  2610 */   199,   13,   11,   72,   73,  204,  205,   13,   11,  144,
 /*  2620 */   144,   76,   13,   76,   83,   13,   85,   86,   87,   88,
 /*  2630 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*  2640 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  2650 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  2660 */   119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
 /*  2670 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  2680 */   139,  140,  141,  142,  143,    3,   13,    3,    6,   13,
 /*  2690 */     6,   13,   13,   11,   13,   11,   13,    4,   32,   13,
 /*  2700 */    13,   13,  161,  161,  292,   13,  294,   13,  296,   13,
 /*  2710 */   298,   16,  300,   16,  302,  303,  304,  305,  306,  307,
 /*  2720 */   308,  309,  310,  311,  312,  313,    4,   62,  184,  185,
 /*  2730 */   186,  187,  188,  189,  190,   32,   64,   13,  194,  185,
 /*  2740 */   186,   71,   65,   11,  190,   71,  194,   63,  194,   12,
 /*  2750 */    66,   62,   13,   69,   72,   73,  202,  203,   59,   13,
 /*  2760 */    60,   13,   13,   11,   13,   83,   13,   85,   86,   87,
 /*  2770 */    88,   89,   90,   91,   92,   93,   94,   95,   96,   97,
 /*  2780 */    98,   99,  100,  101,  102,  103,  104,  105,  106,  107,
 /*  2790 */   108,  109,  110,  111,  112,  113,  114,  115,  116,  117,
 /*  2800 */   118,  119,  120,  121,  122,  123,  124,  125,  126,  127,
 /*  2810 */   128,  129,  130,  131,  132,  133,  134,  135,  136,  137,
 /*  2820 */   138,  139,  140,  141,  142,  143,    3,   82,  276,    6,
 /*  2830 */   278,  279,   15,    4,   11,   16,  292,    4,  294,   15,
 /*  2840 */   296,   16,  298,  161,  300,  161,  302,  303,  304,  305,
 /*  2850 */   306,  307,  308,  309,  310,  311,  312,  313,   16,  305,
 /*  2860 */   306,  307,  308,  309,  310,  313,   32,  313,    6,  184,
 /*  2870 */   185,  186,  187,  188,  189,  190,    3,   40,    4,  194,
 /*  2880 */     3,   35,   35,    4,   40,   40,   16,   15,   40,   40,
 /*  2890 */    40,   16,   16,  314,  314,   72,   73,  184,  185,  186,
 /*  2900 */   187,  188,  189,  190,  314,  314,   83,  194,   85,   86,
 /*  2910 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*  2920 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  2930 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  2940 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*  2950 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  2960 */   137,  138,  139,  140,  141,  142,  143,    3,  314,    3,
 /*  2970 */     6,    3,    6,  314,    6,   11,   10,  292,  314,  294,
 /*  2980 */   314,  296,  314,  298,  161,  300,  314,  302,  303,  304,
 /*  2990 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
 /*  3000 */   314,  314,   34,  314,  314,  292,  314,  294,  314,  296,
 /*  3010 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  3020 */   307,  308,  309,  310,  311,  312,  313,  184,  185,  186,
 /*  3030 */   187,  188,  189,  190,  314,  314,  314,  194,   72,   73,
 /*  3040 */    72,   73,  314,  314,  314,  314,  314,   83,  314,   85,
 /*  3050 */    86,   87,   88,   89,   90,   91,   92,   93,   94,   95,
 /*  3060 */    96,   97,   98,   99,  100,  101,  102,  103,  104,  105,
 /*  3070 */   106,  107,  108,  109,  110,  111,  112,  113,  114,  115,
 /*  3080 */   116,  117,  118,  119,  120,  121,  122,  123,  124,  125,
 /*  3090 */   126,  127,  128,  129,  130,  131,  132,  133,  134,  135,
 /*  3100 */   136,  137,  138,  139,  140,  141,  142,  143,    3,    3,
 /*  3110 */   314,    6,    6,  314,  314,  314,   11,  314,  314,  314,
 /*  3120 */   314,   15,  314,   17,  314,  161,   20,  161,   22,  161,
 /*  3130 */    24,   25,  314,  314,   28,  292,   30,  294,  314,  296,
 /*  3140 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  3150 */   307,  308,  309,  310,  311,  312,  313,  314,  314,  314,
 /*  3160 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  314,
 /*  3170 */   194,  185,  186,  314,  314,  314,  190,  314,   72,   73,
 /*  3180 */   194,  314,  314,  314,  314,  314,  314,  314,   83,  203,
 /*  3190 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  3200 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  3210 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  3220 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  3230 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  3240 */   135,  136,  137,  138,  139,  140,  141,  142,  143,    3,
 /*  3250 */     3,  314,    6,    6,  314,  314,  314,   11,   11,  314,
 /*  3260 */   314,  314,  314,  314,  314,  314,  161,  161,  292,  314,
 /*  3270 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  3280 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  3290 */   314,  305,  306,  307,  308,  309,  310,  314,  314,  313,
 /*  3300 */   314,  184,  185,  186,  187,  188,  189,  190,  314,  314,
 /*  3310 */    63,  194,  186,   66,  314,  314,  190,  314,  314,  314,
 /*  3320 */   194,  314,  314,  314,  314,  314,  314,  201,  314,   83,
 /*  3330 */   314,   85,   86,   87,   88,   89,   90,   91,   92,   93,
 /*  3340 */    94,   95,   96,   97,   98,   99,  100,  101,  102,  103,
 /*  3350 */   104,  105,  106,  107,  108,  109,  110,  111,  112,  113,
 /*  3360 */   114,  115,  116,  117,  118,  119,  120,  121,  122,  123,
 /*  3370 */   124,  125,  126,  127,  128,  129,  130,  131,  132,  133,
 /*  3380 */   134,  135,  136,  137,  138,  139,  140,  141,  142,  143,
 /*  3390 */     3,  314,  314,    6,    7,  314,  314,  314,   11,  314,
 /*  3400 */   314,  314,   15,   16,  314,  314,  314,  161,  161,  292,
 /*  3410 */   314,  294,  314,  296,  314,  298,   29,  300,   31,  302,
 /*  3420 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  3430 */   313,  305,  306,  307,  308,  309,  310,   50,  314,  313,
 /*  3440 */    53,   54,   55,   56,   67,   58,  314,  168,   61,  178,
 /*  3450 */   179,  180,  181,  174,  175,  176,  314,   70,  314,   72,
 /*  3460 */    73,   84,  314,  314,  314,  314,  195,  196,  197,  198,
 /*  3470 */   199,  314,  185,  186,  314,  204,  205,  190,  314,  314,
 /*  3480 */   314,  194,  314,  179,  180,  181,  207,  200,  209,  210,
 /*  3490 */   211,  212,  213,  214,  215,  216,  217,  218,  219,  195,
 /*  3500 */   196,  197,  198,  199,  225,  226,  314,  177,  204,  205,
 /*  3510 */   314,  314,  182,  314,  314,  185,  314,  187,  188,  189,
 /*  3520 */   314,  314,  314,  314,  194,  195,  149,  150,  151,  152,
 /*  3530 */   153,  154,  314,  314,  147,  148,  149,  150,  151,  152,
 /*  3540 */   153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
 /*  3550 */   163,  183,  314,  185,  186,  187,  188,  189,  190,  314,
 /*  3560 */   314,  314,  194,  314,  234,  235,  236,  237,  238,  314,
 /*  3570 */   240,  241,  242,  243,  244,  245,  246,  247,    3,  185,
 /*  3580 */   314,    6,  194,  314,  314,  314,   11,  193,  194,  259,
 /*  3590 */   314,   16,  305,  306,  307,  308,  309,  310,  268,  314,
 /*  3600 */   313,  314,    3,  314,   29,    6,  314,  314,  314,  314,
 /*  3610 */    11,  314,  314,  314,  185,   16,  286,  287,  314,  314,
 /*  3620 */   290,  291,  193,  194,  314,   50,  314,  314,   29,  314,
 /*  3630 */   300,   56,  302,  314,  314,  314,    3,    4,  314,    6,
 /*  3640 */   314,  311,  312,  313,   11,   70,  314,   72,   73,   50,
 /*  3650 */   314,  314,  314,  314,  260,   56,  262,  314,  314,  314,
 /*  3660 */   314,  314,   29,  314,  276,  314,  278,  279,  300,   70,
 /*  3670 */   302,   72,   73,  305,  306,  307,  308,  309,  310,  311,
 /*  3680 */   312,  313,  314,  314,  314,  314,  314,  314,  314,   56,
 /*  3690 */   194,  262,  314,  185,  186,  187,  188,  189,  190,  314,
 /*  3700 */   314,  313,  194,   70,  314,   72,   73,  313,  314,  314,
 /*  3710 */   314,  314,  314,  187,  188,  189,  314,  314,  314,  314,
 /*  3720 */   194,  314,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  3730 */   155,  156,  157,  158,  159,  160,  161,  162,  163,  314,
 /*  3740 */   314,  314,  313,  314,  314,  314,  147,  148,  149,  150,
 /*  3750 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  3760 */   161,  162,  163,  194,  185,  186,  187,  188,  189,  190,
 /*  3770 */   274,  314,  276,  194,  278,  279,  250,  251,  314,  314,
 /*  3780 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*  3790 */   157,  158,  159,  160,  161,  162,  163,    3,    4,  314,
 /*  3800 */     6,  314,  294,  314,  296,   11,  298,  314,  300,  313,
 /*  3810 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  3820 */   312,  313,  314,   29,  314,  314,  300,    3,  302,  314,
 /*  3830 */     6,  314,  314,  314,  314,   11,  314,  311,  312,  313,
 /*  3840 */    16,  314,  314,  274,  314,  276,  314,  278,  279,  314,
 /*  3850 */    56,  314,  314,   29,  314,  314,  314,    3,  314,  314,
 /*  3860 */     6,  314,  314,  314,   70,   11,   72,   73,  314,    3,
 /*  3870 */    16,    3,    6,  314,    6,  314,   67,   11,  314,  300,
 /*  3880 */    56,  302,  313,   29,  305,  306,  307,  308,  309,  310,
 /*  3890 */   311,  312,  313,   84,   70,  314,   72,   73,  314,  314,
 /*  3900 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  3910 */    56,  183,  314,  185,  186,  187,  188,  189,  190,  314,
 /*  3920 */   314,  314,  194,  314,   70,  314,   72,   73,  314,   63,
 /*  3930 */   314,   63,   66,  314,   66,   69,  314,  314,   72,   73,
 /*  3940 */   314,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  3950 */   156,  157,  158,  159,  160,  161,  162,  163,  149,  150,
 /*  3960 */   151,  152,  153,  154,  314,  314,  314,  314,  314,  314,
 /*  3970 */   314,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  3980 */   156,  157,  158,  159,  160,  161,  162,  163,  185,  186,
 /*  3990 */   314,  185,  314,  190,  314,  194,  314,  194,  314,  193,
 /*  4000 */   194,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  4010 */   156,  157,  158,  159,  160,  161,  162,  163,    3,  314,
 /*  4020 */   314,    6,  314,  314,  314,  314,   11,  161,  300,  161,
 /*  4030 */   302,   16,  314,  305,  306,  307,  308,  309,  310,  311,
 /*  4040 */   312,  313,  314,  314,   29,  314,  314,  314,    3,    4,
 /*  4050 */   314,    6,  185,  314,  314,  314,   11,  314,  314,  314,
 /*  4060 */   193,  194,  314,  314,  314,  314,  260,  314,  262,  314,
 /*  4070 */   269,   56,  314,  314,   29,  274,  314,  276,    3,  278,
 /*  4080 */   279,    6,  314,  314,  314,   70,   11,   72,   73,  314,
 /*  4090 */   314,   16,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4100 */   314,   56,  314,  314,   29,  314,  314,  314,  305,  306,
 /*  4110 */   307,  308,  309,  310,  313,   70,  313,   72,   73,  313,
 /*  4120 */   314,  314,    3,    3,  314,    6,    6,  260,  314,  262,
 /*  4130 */    11,   56,  314,   13,  314,  185,  186,  187,  188,  189,
 /*  4140 */   190,  314,  314,  314,  194,   70,  314,   72,   73,  314,
 /*  4150 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4160 */   314,  314,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4170 */   155,  156,  157,  158,  159,  160,  161,  162,  163,  314,
 /*  4180 */   313,  314,   63,   63,  314,  314,   66,  314,   69,  314,
 /*  4190 */   314,  314,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4200 */   155,  156,  157,  158,  159,  160,  161,  162,  163,  314,
 /*  4210 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4220 */   314,  314,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  4230 */   155,  156,  157,  158,  159,  160,  161,  162,  163,    3,
 /*  4240 */     4,  314,    6,  314,  294,  314,  296,   11,  298,  314,
 /*  4250 */   300,  314,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  4260 */   310,  311,  312,  313,  314,   29,  314,  314,  314,    3,
 /*  4270 */   314,  314,    6,    3,  314,  314,    6,   11,  314,   13,
 /*  4280 */   161,  161,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4290 */   314,  314,   56,  314,  314,   29,  314,  314,  314,  314,
 /*  4300 */   314,  314,  314,  314,   34,  314,   70,  314,   72,   73,
 /*  4310 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4320 */    50,   51,   56,  314,  185,  186,  187,  188,  189,  190,
 /*  4330 */   314,  314,  314,  194,  314,  314,   70,  314,   72,   73,
 /*  4340 */   314,  314,  314,  314,  314,  314,  314,  184,  185,  186,
 /*  4350 */   187,  188,  189,  190,  314,  314,  314,  194,  314,  314,
 /*  4360 */   314,  314,  183,  314,  185,  186,  187,  188,  189,  190,
 /*  4370 */   314,  314,  314,  194,  314,  314,  314,  314,  314,  314,
 /*  4380 */   314,  314,  314,  147,  148,  149,  150,  151,  152,  153,
 /*  4390 */   154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
 /*  4400 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4410 */   314,  314,  314,  147,  148,  149,  150,  151,  152,  153,
 /*  4420 */   154,  155,  156,  157,  158,  159,  160,  161,  162,  163,
 /*  4430 */     3,  161,  314,    6,  314,  296,  314,  298,   11,  300,
 /*  4440 */    13,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  4450 */   311,  312,  313,  314,  314,  292,   29,  294,  314,  296,
 /*  4460 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  4470 */   307,  308,  309,  310,  311,  312,  313,  314,  314,  300,
 /*  4480 */   314,  302,  314,   56,  305,  306,  307,  308,  309,  310,
 /*  4490 */   311,  312,  313,  314,  314,  314,  314,   70,  314,   72,
 /*  4500 */    73,  314,  314,  314,  179,  180,  181,  184,  185,  186,
 /*  4510 */   187,  188,  189,  190,  314,  314,  314,  194,  314,  314,
 /*  4520 */   195,  196,  197,  198,  199,    3,  314,  314,    6,  204,
 /*  4530 */   205,  314,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  4540 */   314,  314,  194,  314,  314,  314,  314,  314,  314,  314,
 /*  4550 */   314,  314,  314,  314,  314,  314,   34,  314,  314,  314,
 /*  4560 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4570 */   314,  314,   50,   51,  147,  148,  149,  150,  151,  152,
 /*  4580 */   153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
 /*  4590 */   163,  314,  314,  314,  314,  314,  314,  314,  184,  185,
 /*  4600 */   186,  187,  188,  189,  190,  314,  314,  314,  194,  314,
 /*  4610 */   314,  314,  314,  314,  314,  292,  314,  294,  314,  296,
 /*  4620 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  4630 */   307,  308,  309,  310,  311,  312,  313,  314,  314,  314,
 /*  4640 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  4650 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  4660 */   312,  313,  314,  314,  314,  314,  314,  314,  184,  185,
 /*  4670 */   186,  187,  188,  189,  190,  314,  314,  314,  194,  314,
 /*  4680 */   314,  314,  314,  161,  314,  314,  314,  314,  314,  314,
 /*  4690 */   314,  314,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  4700 */   314,  314,  194,  314,  314,  314,  292,  314,  294,  314,
 /*  4710 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  4720 */   306,  307,  308,  309,  310,  311,  312,  313,  314,  314,
 /*  4730 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4740 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  4750 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  184,
 /*  4760 */   185,  186,  187,  188,  189,  190,  314,  314,  314,  194,
 /*  4770 */   314,  314,  314,  314,  314,  314,  292,  314,  294,  314,
 /*  4780 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  4790 */   306,  307,  308,  309,  310,  311,  312,  313,  314,  314,
 /*  4800 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  4810 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  4820 */   312,  313,  314,  314,  314,  184,  185,  186,  187,  188,
 /*  4830 */   189,  190,  185,  314,  314,  194,  314,  314,  185,  314,
 /*  4840 */   314,  194,  314,  314,  314,  314,  314,  194,  314,  314,
 /*  4850 */   314,  314,  314,  184,  185,  186,  187,  188,  189,  190,
 /*  4860 */   314,  314,  314,  194,  314,  314,  314,  292,  314,  294,
 /*  4870 */   314,  296,  314,  298,  314,  300,  314,  302,  303,  304,
 /*  4880 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
 /*  4890 */   314,  184,  185,  186,  187,  188,  189,  190,  314,  314,
 /*  4900 */   314,  194,  314,  314,  314,  314,  185,  186,  187,  188,
 /*  4910 */   189,  190,  314,  314,  267,  194,  269,  314,  314,  314,
 /*  4920 */   267,  274,  269,  276,  314,  278,  279,  274,  314,  276,
 /*  4930 */   314,  278,  279,  292,  314,  294,  314,  296,  314,  298,
 /*  4940 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  4950 */   309,  310,  311,  312,  313,  314,  314,  314,  314,  314,
 /*  4960 */   313,  292,  314,  294,  314,  296,  313,  298,  314,  300,
 /*  4970 */   314,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  4980 */   311,  312,  313,  314,  314,  184,  185,  186,  187,  188,
 /*  4990 */   189,  190,  314,  314,  314,  194,  314,  314,  314,  292,
 /*  5000 */   314,  294,  314,  296,  314,  298,  314,  300,  314,  302,
 /*  5010 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  5020 */   313,  300,  314,  302,  314,  304,  305,  306,  307,  308,
 /*  5030 */   309,  310,  311,  312,  313,  314,  314,  314,  184,  185,
 /*  5040 */   186,  187,  188,  189,  190,  185,  314,  314,  194,  314,
 /*  5050 */   314,  314,  314,  314,  194,  314,  314,  314,  314,  314,
 /*  5060 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  314,
 /*  5070 */   194,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5080 */   314,  314,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  5090 */   314,  314,  194,  292,  314,  294,  314,  296,  314,  298,
 /*  5100 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  5110 */   309,  310,  311,  312,  313,  314,  314,  314,  184,  185,
 /*  5120 */   186,  187,  188,  189,  190,  314,  314,  267,  194,  269,
 /*  5130 */   314,  314,  314,  314,  274,  314,  276,  314,  278,  279,
 /*  5140 */   185,  186,  187,  188,  189,  190,  292,  314,  294,  194,
 /*  5150 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  5160 */   306,  307,  308,  309,  310,  311,  312,  313,  292,  314,
 /*  5170 */   294,  314,  296,  313,  298,  314,  300,  314,  302,  303,
 /*  5180 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  5190 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  5200 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  5210 */   312,  313,  314,  314,  187,  188,  189,  314,  314,  314,
 /*  5220 */   185,  194,  314,  314,  314,  314,  292,  314,  294,  194,
 /*  5230 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  5240 */   306,  307,  308,  309,  310,  311,  312,  313,  184,  185,
 /*  5250 */   186,  187,  188,  189,  190,  300,  314,  302,  194,  304,
 /*  5260 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
 /*  5270 */   184,  185,  186,  187,  188,  189,  190,  250,  251,  314,
 /*  5280 */   194,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5290 */   314,  314,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  5300 */   314,  314,  194,  314,  269,  314,  314,  314,  314,  274,
 /*  5310 */   314,  276,  314,  278,  279,  314,  314,  314,  314,  314,
 /*  5320 */   314,  314,  314,  314,  314,  314,  314,  300,  314,  302,
 /*  5330 */   314,  184,  185,  186,  187,  188,  189,  190,  311,  312,
 /*  5340 */   313,  194,  314,  314,  314,  314,  314,  314,  313,  314,
 /*  5350 */   314,  314,  314,  314,  314,  314,  292,  314,  294,  314,
 /*  5360 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  5370 */   306,  307,  308,  309,  310,  311,  312,  313,  292,  314,
 /*  5380 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  5390 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  5400 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  5410 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  5420 */   312,  313,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  5430 */   314,  314,  194,  314,  314,  314,  314,  314,  314,  292,
 /*  5440 */   314,  294,  314,  296,  314,  298,  314,  300,  314,  302,
 /*  5450 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  5460 */   313,  184,  185,  186,  187,  188,  189,  190,  314,  314,
 /*  5470 */   314,  194,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5480 */   314,  314,  314,  184,  185,  186,  187,  188,  189,  190,
 /*  5490 */   314,  314,  314,  194,  314,  314,  314,  314,  314,  314,
 /*  5500 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5510 */   314,  314,  314,  314,  314,  314,  184,  185,  186,  187,
 /*  5520 */   188,  189,  190,  314,  314,  314,  194,  314,  314,  314,
 /*  5530 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  5540 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  5550 */   312,  313,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  5560 */   314,  314,  194,  314,  314,  314,  314,  314,  314,  292,
 /*  5570 */   314,  294,  314,  296,  314,  298,  314,  300,  314,  302,
 /*  5580 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  5590 */   313,  292,  314,  294,  314,  296,  314,  298,  314,  300,
 /*  5600 */   314,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5610 */   311,  312,  313,  184,  185,  186,  187,  188,  189,  190,
 /*  5620 */   314,  314,  314,  194,  292,  314,  294,  314,  296,  314,
 /*  5630 */   298,  314,  300,  314,  302,  303,  304,  305,  306,  307,
 /*  5640 */   308,  309,  310,  311,  312,  313,  184,  185,  186,  187,
 /*  5650 */   188,  189,  190,  314,  314,  314,  194,  314,  314,  314,
 /*  5660 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  5670 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  5680 */   312,  313,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5690 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5700 */   314,  184,  185,  186,  187,  188,  189,  190,  314,  314,
 /*  5710 */   314,  194,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5720 */   314,  292,  314,  294,  314,  296,  314,  298,  314,  300,
 /*  5730 */   314,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5740 */   311,  312,  313,  184,  185,  186,  187,  188,  189,  190,
 /*  5750 */   314,  314,  314,  194,  292,  314,  294,  314,  296,  314,
 /*  5760 */   298,  314,  300,  314,  302,  303,  304,  305,  306,  307,
 /*  5770 */   308,  309,  310,  311,  312,  313,  184,  185,  186,  187,
 /*  5780 */   188,  189,  190,  314,  314,  314,  194,  314,  314,  314,
 /*  5790 */   314,  314,  314,  314,  314,  314,  314,  314,  184,  185,
 /*  5800 */   186,  187,  188,  189,  190,  314,  314,  314,  194,  292,
 /*  5810 */   314,  294,  314,  296,  314,  298,  314,  300,  314,  302,
 /*  5820 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  5830 */   313,  184,  185,  186,  187,  188,  189,  190,  314,  314,
 /*  5840 */   314,  194,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5850 */   314,  292,  314,  294,  314,  296,  314,  298,  314,  300,
 /*  5860 */   314,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  5870 */   311,  312,  313,  314,  314,  314,  314,  314,  314,  314,
 /*  5880 */   314,  314,  314,  314,  292,  314,  294,  314,  296,  314,
 /*  5890 */   298,  314,  300,  314,  302,  303,  304,  305,  306,  307,
 /*  5900 */   308,  309,  310,  311,  312,  313,  292,  314,  294,  314,
 /*  5910 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  5920 */   306,  307,  308,  309,  310,  311,  312,  313,  184,  185,
 /*  5930 */   186,  187,  188,  189,  190,  185,  314,  314,  194,  292,
 /*  5940 */   314,  294,  314,  296,  194,  298,  314,  300,  314,  302,
 /*  5950 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  5960 */   313,  184,  185,  186,  187,  188,  189,  190,  314,  314,
 /*  5970 */   314,  194,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  5980 */   314,  314,  314,  184,  185,  186,  187,  188,  189,  190,
 /*  5990 */   314,  314,  314,  194,  314,  314,  314,  314,  314,  314,
 /*  6000 */   314,  314,  314,  314,  314,  184,  185,  186,  187,  188,
 /*  6010 */   189,  190,  314,  314,  314,  194,  314,  314,  314,  269,
 /*  6020 */   314,  314,  314,  314,  274,  314,  276,  314,  278,  279,
 /*  6030 */   314,  314,  314,  314,  314,  314,  292,  314,  294,  314,
 /*  6040 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  6050 */   306,  307,  308,  309,  310,  311,  312,  313,  314,  314,
 /*  6060 */   314,  314,  314,  313,  314,  314,  314,  314,  314,  292,
 /*  6070 */   314,  294,  314,  296,  314,  298,  314,  300,  314,  302,
 /*  6080 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  6090 */   313,  292,  314,  294,  314,  296,  314,  298,  314,  300,
 /*  6100 */   314,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  6110 */   311,  312,  313,  292,  314,  294,  314,  296,  314,  298,
 /*  6120 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  6130 */   309,  310,  311,  312,  313,  184,  185,  186,  187,  188,
 /*  6140 */   189,  190,  314,  314,  314,  194,  314,  314,  314,  314,
 /*  6150 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6160 */   314,  314,  314,  314,  314,  314,  314,  314,  184,  185,
 /*  6170 */   186,  187,  188,  189,  190,  314,  314,  314,  194,  314,
 /*  6180 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6190 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  314,
 /*  6200 */   194,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6210 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6220 */   314,  184,  185,  186,  187,  188,  189,  190,  314,  314,
 /*  6230 */   314,  194,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6240 */   314,  314,  314,  292,  314,  294,  314,  296,  314,  298,
 /*  6250 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  6260 */   309,  310,  311,  312,  313,  184,  185,  186,  187,  188,
 /*  6270 */   189,  190,  314,  314,  314,  194,  292,  314,  294,  314,
 /*  6280 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  6290 */   306,  307,  308,  309,  310,  311,  312,  313,  292,  314,
 /*  6300 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  6310 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  6320 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  292,
 /*  6330 */   194,  294,  314,  296,  314,  298,  314,  300,  314,  302,
 /*  6340 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  6350 */   313,  314,  314,  184,  185,  186,  187,  188,  189,  190,
 /*  6360 */   314,  314,  314,  194,  314,  314,  314,  314,  314,  314,
 /*  6370 */   314,  314,  314,  292,  314,  294,  314,  296,  314,  298,
 /*  6380 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  6390 */   309,  310,  311,  312,  313,  314,  314,  314,  314,  314,
 /*  6400 */   314,  314,  314,  314,  314,  314,  184,  185,  186,  187,
 /*  6410 */   188,  189,  190,  314,  314,  314,  194,  314,  314,  314,
 /*  6420 */   314,  314,  314,  314,  314,  314,  314,  314,  292,  314,
 /*  6430 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  6440 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  6450 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  314,
 /*  6460 */   194,  292,  314,  294,  314,  296,  314,  298,  314,  300,
 /*  6470 */   314,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  6480 */   311,  312,  313,  184,  185,  186,  187,  188,  189,  190,
 /*  6490 */   314,  314,  314,  194,  314,  314,  314,  314,  314,  314,
 /*  6500 */   314,  314,  314,  314,  314,  184,  185,  186,  187,  188,
 /*  6510 */   189,  190,  314,  314,  292,  194,  294,  314,  296,  314,
 /*  6520 */   298,  314,  300,  314,  302,  303,  304,  305,  306,  307,
 /*  6530 */   308,  309,  310,  311,  312,  313,  314,  314,  184,  185,
 /*  6540 */   186,  187,  188,  189,  190,  314,  314,  314,  194,  314,
 /*  6550 */   314,  314,  314,  314,  314,  314,  314,  314,  292,  314,
 /*  6560 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  6570 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  6580 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6590 */   314,  292,  314,  294,  314,  296,  314,  298,  314,  300,
 /*  6600 */   314,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  6610 */   311,  312,  313,  292,  314,  294,  314,  296,  314,  298,
 /*  6620 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  6630 */   309,  310,  311,  312,  313,  184,  185,  186,  187,  188,
 /*  6640 */   189,  190,  314,  314,  314,  194,  292,  314,  294,  314,
 /*  6650 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  6660 */   306,  307,  308,  309,  310,  311,  312,  313,  184,  185,
 /*  6670 */   186,  187,  188,  189,  190,  314,  314,  314,  194,  314,
 /*  6680 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6690 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  314,
 /*  6700 */   194,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6710 */   314,  314,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  6720 */   314,  314,  194,  314,  314,  314,  314,  314,  314,  314,
 /*  6730 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6740 */   314,  314,  314,  292,  314,  294,  314,  296,  314,  298,
 /*  6750 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  6760 */   309,  310,  311,  312,  313,  314,  314,  314,  314,  314,
 /*  6770 */   314,  314,  314,  314,  314,  314,  292,  314,  294,  314,
 /*  6780 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  6790 */   306,  307,  308,  309,  310,  311,  312,  313,  292,  314,
 /*  6800 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  6810 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  6820 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  6830 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  6840 */   312,  313,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  6850 */   314,  314,  194,  314,  314,  314,  314,  314,  314,  314,
 /*  6860 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6870 */   314,  314,  314,  314,  314,  184,  185,  186,  187,  188,
 /*  6880 */   189,  190,  314,  314,  314,  194,  314,  314,  314,  314,
 /*  6890 */   314,  314,  314,  314,  314,  314,  314,  184,  185,  186,
 /*  6900 */   187,  188,  189,  190,  314,  314,  314,  194,  314,  314,
 /*  6910 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6920 */   314,  314,  314,  314,  314,  314,  314,  314,  184,  185,
 /*  6930 */   186,  187,  188,  189,  190,  314,  314,  314,  194,  314,
 /*  6940 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  6950 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  6960 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  6970 */   312,  313,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  6980 */   314,  314,  194,  292,  314,  294,  314,  296,  314,  298,
 /*  6990 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  7000 */   309,  310,  311,  312,  313,  292,  314,  294,  314,  296,
 /*  7010 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  7020 */   307,  308,  309,  310,  311,  312,  313,  184,  185,  186,
 /*  7030 */   187,  188,  189,  190,  314,  314,  292,  194,  294,  314,
 /*  7040 */   296,  314,  298,  314,  300,  314,  302,  303,  304,  305,
 /*  7050 */   306,  307,  308,  309,  310,  311,  312,  313,  314,  314,
 /*  7060 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  314,
 /*  7070 */   194,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7080 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  7090 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7100 */   312,  313,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7110 */   314,  314,  314,  184,  185,  186,  187,  188,  189,  190,
 /*  7120 */   314,  314,  314,  194,  314,  314,  314,  314,  314,  314,
 /*  7130 */   314,  314,  314,  314,  314,  292,  314,  294,  314,  296,
 /*  7140 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  7150 */   307,  308,  309,  310,  311,  312,  313,  184,  185,  186,
 /*  7160 */   187,  188,  189,  190,  314,  314,  314,  194,  292,  314,
 /*  7170 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  7180 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  7190 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  314,
 /*  7200 */   194,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7210 */   314,  314,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  7220 */   314,  292,  194,  294,  314,  296,  314,  298,  314,  300,
 /*  7230 */   314,  302,  303,  304,  305,  306,  307,  308,  309,  310,
 /*  7240 */   311,  312,  313,  314,  314,  184,  185,  186,  187,  188,
 /*  7250 */   189,  190,  314,  314,  314,  194,  314,  314,  314,  314,
 /*  7260 */   314,  314,  314,  314,  314,  292,  314,  294,  314,  296,
 /*  7270 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  7280 */   307,  308,  309,  310,  311,  312,  313,  314,  314,  314,
 /*  7290 */   314,  314,  314,  314,  314,  314,  314,  314,  292,  314,
 /*  7300 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  7310 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  7320 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  7330 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7340 */   312,  313,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  7350 */   314,  314,  194,  292,  314,  294,  314,  296,  314,  298,
 /*  7360 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  7370 */   309,  310,  311,  312,  313,  184,  185,  186,  187,  188,
 /*  7380 */   189,  190,  314,  314,  314,  194,  314,  314,  314,  314,
 /*  7390 */   314,  314,  314,  314,  314,  314,  314,  184,  185,  186,
 /*  7400 */   187,  188,  189,  190,  314,  314,  314,  194,  314,  314,
 /*  7410 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  184,
 /*  7420 */   185,  186,  187,  188,  189,  190,  314,  314,  314,  194,
 /*  7430 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7440 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7450 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  7460 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7470 */   312,  313,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7480 */   314,  314,  314,  292,  314,  294,  314,  296,  314,  298,
 /*  7490 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  7500 */   309,  310,  311,  312,  313,  292,  314,  294,  314,  296,
 /*  7510 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  7520 */   307,  308,  309,  310,  311,  312,  313,  292,  314,  294,
 /*  7530 */   314,  296,  314,  298,  314,  300,  314,  302,  303,  304,
 /*  7540 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  184,
 /*  7550 */   185,  186,  187,  188,  189,  190,  314,  314,  314,  194,
 /*  7560 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7570 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7580 */   314,  314,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  7590 */   314,  314,  194,  314,  314,  314,  314,  314,  314,  314,
 /*  7600 */   314,  314,  314,  314,  184,  185,  186,  187,  188,  189,
 /*  7610 */   190,  314,  314,  314,  194,  314,  314,  314,  314,  314,
 /*  7620 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7630 */   314,  314,  314,  314,  314,  184,  185,  186,  187,  188,
 /*  7640 */   189,  190,  314,  314,  314,  194,  314,  314,  314,  314,
 /*  7650 */   314,  314,  314,  314,  314,  314,  314,  292,  314,  294,
 /*  7660 */   314,  296,  314,  298,  314,  300,  314,  302,  303,  304,
 /*  7670 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  184,
 /*  7680 */   185,  186,  187,  188,  189,  190,  314,  314,  314,  194,
 /*  7690 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  7700 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7710 */   312,  313,  292,  314,  294,  314,  296,  314,  298,  314,
 /*  7720 */   300,  314,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7730 */   310,  311,  312,  313,  184,  185,  186,  187,  188,  189,
 /*  7740 */   190,  314,  314,  292,  194,  294,  314,  296,  314,  298,
 /*  7750 */   314,  300,  314,  302,  303,  304,  305,  306,  307,  308,
 /*  7760 */   309,  310,  311,  312,  313,  314,  314,  184,  185,  186,
 /*  7770 */   187,  188,  189,  190,  314,  314,  314,  194,  314,  314,
 /*  7780 */   314,  314,  314,  314,  314,  314,  314,  292,  314,  294,
 /*  7790 */   314,  296,  314,  298,  314,  300,  314,  302,  303,  304,
 /*  7800 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
 /*  7810 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7820 */   184,  185,  186,  187,  188,  189,  190,  314,  314,  314,
 /*  7830 */   194,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  7840 */   314,  314,  292,  314,  294,  314,  296,  314,  298,  314,
 /*  7850 */   300,  314,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7860 */   310,  311,  312,  313,  184,  185,  186,  187,  188,  189,
 /*  7870 */   190,  314,  314,  314,  194,  292,  314,  294,  314,  296,
 /*  7880 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  7890 */   307,  308,  309,  310,  311,  312,  313,  184,  185,  186,
 /*  7900 */   187,  188,  189,  190,  314,  314,  314,  194,  314,  314,
 /*  7910 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  184,
 /*  7920 */   185,  186,  187,  188,  189,  190,  314,  314,  292,  194,
 /*  7930 */   294,  314,  296,  314,  298,  314,  300,  314,  302,  303,
 /*  7940 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  7950 */   314,  314,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  7960 */   314,  314,  194,  314,  314,  314,  314,  314,  314,  314,
 /*  7970 */   314,  314,  292,  314,  294,  314,  296,  314,  298,  314,
 /*  7980 */   300,  314,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7990 */   310,  311,  312,  313,  314,  314,  314,  314,  314,  314,
 /*  8000 */   314,  314,  314,  314,  314,  292,  314,  294,  314,  296,
 /*  8010 */   314,  298,  314,  300,  314,  302,  303,  304,  305,  306,
 /*  8020 */   307,  308,  309,  310,  311,  312,  313,  292,  314,  294,
 /*  8030 */   314,  296,  314,  298,  314,  300,  314,  302,  303,  304,
 /*  8040 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  184,
 /*  8050 */   185,  186,  187,  188,  189,  190,  314,  314,  314,  194,
 /*  8060 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  8070 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  8080 */   312,  313,  184,  185,  186,  187,  188,  189,  190,  314,
 /*  8090 */   314,  314,  194,  314,  314,  314,  314,  314,  314,  314,
 /*  8100 */   314,  314,  314,  314,  184,  185,  186,  187,  188,  189,
 /*  8110 */   190,  314,  314,  314,  194,  314,  314,  314,  314,  314,
 /*  8120 */   314,  314,  314,  314,  314,  314,  184,  185,  186,  187,
 /*  8130 */   188,  189,  190,  314,  314,  314,  194,  314,  314,  314,
 /*  8140 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8150 */   314,  314,  314,  314,  314,  314,  314,  292,  314,  294,
 /*  8160 */   314,  296,  314,  298,  314,  300,  314,  302,  303,  304,
 /*  8170 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  314,
 /*  8180 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8190 */   292,  314,  294,  314,  296,  314,  298,  314,  300,  314,
 /*  8200 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  8210 */   312,  313,  292,  314,  294,  314,  296,  314,  298,  314,
 /*  8220 */   300,  314,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  8230 */   310,  311,  312,  313,  292,  314,  294,  314,  296,  314,
 /*  8240 */   298,  314,  300,  314,  302,  303,  304,  305,  306,  307,
 /*  8250 */   308,  309,  310,  311,  312,  313,  184,  185,  186,  187,
 /*  8260 */   188,  189,  190,  314,  314,  314,  194,  314,  314,  314,
 /*  8270 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8280 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  184,
 /*  8290 */   185,  186,  187,  188,  189,  190,  314,  314,  314,  194,
 /*  8300 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8310 */   314,  184,  185,  186,  187,  188,  189,  190,  314,  314,
 /*  8320 */     3,  194,  314,    6,  314,  314,  314,  314,   11,  314,
 /*  8330 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8340 */   314,  314,  314,  314,  314,  314,   29,  314,  314,  314,
 /*  8350 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8360 */   314,  314,  314,  314,  292,  314,  294,  314,  296,  314,
 /*  8370 */   298,  314,  300,   56,  302,  303,  304,  305,  306,  307,
 /*  8380 */   308,  309,  310,  311,  312,  313,  314,   70,  314,   72,
 /*  8390 */    73,  185,  186,  187,  188,  189,  190,  292,  314,  294,
 /*  8400 */   194,  296,  314,  298,  314,  300,  314,  302,  303,  304,
 /*  8410 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  292,
 /*  8420 */   314,  294,  314,  296,  314,  298,  314,  300,  314,  302,
 /*  8430 */   303,  304,  305,  306,  307,  308,  309,  310,  311,  312,
 /*  8440 */   313,  314,  314,  314,  314,  185,  186,  187,  188,  189,
 /*  8450 */   190,  314,  314,  314,  194,  314,  314,  314,  314,  314,
 /*  8460 */   314,  314,  314,  314,  147,  148,  149,  150,  151,  152,
 /*  8470 */   153,  154,  155,  156,  157,  158,  159,  160,  161,  162,
 /*  8480 */   163,    3,  314,  169,    6,  171,  172,  173,  314,   11,
 /*  8490 */   314,  177,  314,  314,  314,  314,  314,  314,  292,  314,
 /*  8500 */   294,  314,  296,  314,  298,  314,  300,   29,  302,  303,
 /*  8510 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  8520 */   314,  207,  314,  209,  210,  211,  212,  213,  214,  215,
 /*  8530 */   216,  217,  218,  219,   56,  314,  314,  314,  314,  225,
 /*  8540 */   226,  314,  314,  314,  314,  314,  314,  314,   70,  314,
 /*  8550 */    72,   73,  292,  314,  294,  314,  296,  314,  298,  314,
 /*  8560 */   300,  314,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  8570 */   310,  311,  312,  313,  314,  185,  314,  187,  188,  189,
 /*  8580 */   314,  191,  314,  314,  194,  314,  314,  314,  314,  314,
 /*  8590 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8600 */   314,  314,  314,  187,  188,  189,  314,  314,  314,  185,
 /*  8610 */   194,  187,  188,  189,  314,  191,  314,  314,  194,  229,
 /*  8620 */   230,  231,  232,  314,  314,  147,  148,  149,  150,  151,
 /*  8630 */   152,  153,  154,  155,  156,  157,  158,  159,  160,  161,
 /*  8640 */   162,  163,    3,  314,  314,    6,  314,  314,  314,  259,
 /*  8650 */   314,  261,   13,  229,  230,  231,  232,  185,  186,  187,
 /*  8660 */   188,  189,  190,  314,  314,  314,  194,  251,   29,  314,
 /*  8670 */   314,  314,  314,  314,  284,  285,  314,  314,  314,    3,
 /*  8680 */   290,  291,    6,  259,  314,  261,  314,  314,  314,   13,
 /*  8690 */   300,  314,  302,  314,    3,  314,   57,    6,  314,  314,
 /*  8700 */   314,  311,  312,  313,  314,   29,  314,  314,  284,  285,
 /*  8710 */   314,  314,  314,  314,  290,  291,  300,  314,  302,  314,
 /*  8720 */    29,  314,  314,  314,  300,  314,  302,  311,  312,  313,
 /*  8730 */   314,  314,  314,   57,  314,  311,  312,  313,  183,  314,
 /*  8740 */   185,  186,  187,  188,  189,  190,  314,  314,   57,  194,
 /*  8750 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8760 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  8770 */   314,  314,  300,  314,  302,  314,  304,  305,  306,  307,
 /*  8780 */   308,  309,  310,  311,  312,  313,  147,  148,  149,  150,
 /*  8790 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  8800 */   161,  314,  314,  314,  314,  314,  185,  314,  187,  188,
 /*  8810 */   189,  314,  314,  314,  314,  194,  314,  314,  314,  314,
 /*  8820 */   314,  314,  314,  147,  148,  149,  150,  151,  152,  153,
 /*  8830 */   154,  155,  156,  157,  158,  159,  160,  161,  147,  148,
 /*  8840 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*  8850 */   159,  160,  161,  314,  314,  300,  235,  302,  314,  238,
 /*  8860 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  185,
 /*  8870 */   314,  187,  188,  189,  314,  314,  314,  314,  194,  314,
 /*  8880 */   259,  314,  314,  314,  314,  314,  314,  314,  185,  268,
 /*  8890 */   187,  188,  189,  314,  191,  314,  314,  194,  314,  314,
 /*  8900 */   314,  314,  314,  314,  314,  314,  314,  286,  287,  314,
 /*  8910 */   314,  290,  291,  314,  314,  314,  314,  314,  314,  235,
 /*  8920 */   314,  300,  238,  302,  314,  314,  314,  314,  314,  314,
 /*  8930 */   314,  314,  311,  312,  313,  232,  314,  314,  314,  314,
 /*  8940 */   314,  314,  314,  259,  314,  314,  314,  314,  314,  314,
 /*  8950 */   314,  314,  268,  314,  314,  314,  314,  314,  314,  314,
 /*  8960 */   314,  314,  259,  185,  261,  187,  188,  189,  314,  191,
 /*  8970 */   286,  287,  194,  314,  290,  291,  314,  314,  314,  314,
 /*  8980 */   314,  314,  314,  314,  300,  314,  302,  284,  285,  314,
 /*  8990 */   314,  314,  314,  290,  291,  311,  312,  313,  314,  314,
 /*  9000 */   314,  314,  314,  300,  314,  302,  314,  314,  314,  314,
 /*  9010 */   232,  314,  314,  314,  311,  312,  313,  314,  185,  314,
 /*  9020 */   187,  188,  189,  314,  191,  314,  185,  194,  187,  188,
 /*  9030 */   189,  314,  191,  314,  314,  194,  314,  259,  314,  261,
 /*  9040 */   314,  314,  314,  314,  314,  314,  314,  187,  188,  189,
 /*  9050 */   314,  314,  314,  314,  194,  314,  314,  314,  314,  314,
 /*  9060 */   314,  314,  284,  285,  314,  232,  314,  314,  290,  291,
 /*  9070 */   314,  314,  314,  232,  314,  314,  314,  314,  300,  314,
 /*  9080 */   302,  314,  314,  314,  314,  314,  314,  314,  314,  311,
 /*  9090 */   312,  313,  259,  314,  261,  314,  314,  314,  314,  314,
 /*  9100 */   259,  314,  261,  314,  314,  314,  314,  314,  314,  314,
 /*  9110 */   250,  251,  314,  314,  314,  314,  314,  284,  285,  314,
 /*  9120 */   314,  314,  314,  290,  291,  284,  285,  314,  314,  314,
 /*  9130 */   314,  290,  291,  300,  314,  302,  314,  314,  314,  314,
 /*  9140 */   314,  300,  314,  302,  311,  312,  313,  314,  314,  314,
 /*  9150 */   314,  314,  311,  312,  313,  185,  314,  187,  188,  189,
 /*  9160 */   300,  191,  302,  314,  194,  314,  314,  314,  314,  314,
 /*  9170 */   314,  311,  312,  313,  185,  314,  187,  188,  189,  314,
 /*  9180 */   191,  314,  314,  194,  314,  314,  314,  314,  314,  314,
 /*  9190 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9200 */   314,  314,  232,  314,  314,  314,  314,  314,  314,  314,
 /*  9210 */   314,  314,  314,  185,  314,  187,  188,  189,  314,  314,
 /*  9220 */   314,  232,  194,  314,  314,  314,  314,  314,  314,  259,
 /*  9230 */   314,  261,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9240 */   314,  314,  314,  314,  314,  314,  314,  314,  259,  314,
 /*  9250 */   261,  314,  314,  314,  284,  285,  314,  314,  314,  314,
 /*  9260 */   290,  291,  314,  235,  314,  314,  238,  314,  314,  314,
 /*  9270 */   300,  314,  302,  284,  285,  314,  314,  314,  314,  290,
 /*  9280 */   291,  311,  312,  313,  314,  314,  314,  259,  314,  300,
 /*  9290 */   314,  302,  314,  314,  314,  314,  268,  314,  314,  314,
 /*  9300 */   311,  312,  313,  185,  314,  187,  188,  189,  314,  314,
 /*  9310 */   314,  314,  194,  314,  286,  287,  314,  314,  290,  291,
 /*  9320 */   314,  314,  314,  314,  314,  314,  314,  314,  300,  314,
 /*  9330 */   302,  314,  314,  314,  314,  314,  314,  314,  314,  311,
 /*  9340 */   312,  313,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9350 */   185,  314,  187,  188,  189,  314,  238,  239,  314,  194,
 /*  9360 */   314,  314,  314,  314,  185,  314,  187,  188,  189,  314,
 /*  9370 */   314,  314,  314,  194,  314,  314,  314,  259,  314,  314,
 /*  9380 */   314,  314,  314,  314,  314,  314,  268,  314,  314,  314,
 /*  9390 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9400 */   314,  314,  314,  314,  286,  287,  314,  314,  290,  291,
 /*  9410 */   314,  314,  314,  314,  314,  314,  314,  314,  300,  314,
 /*  9420 */   302,  314,  314,  314,  259,  314,  314,  314,  314,  311,
 /*  9430 */   312,  313,  314,  268,  314,  270,  314,  272,  259,  314,
 /*  9440 */   261,  314,  263,  314,  265,  314,  314,  314,  314,  314,
 /*  9450 */   314,  286,  287,  314,  314,  290,  291,  314,  314,  314,
 /*  9460 */   314,  314,  314,  284,  285,  300,  314,  302,  314,  290,
 /*  9470 */   291,  314,  314,  314,  314,  314,  311,  312,  313,  300,
 /*  9480 */   314,  302,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9490 */   311,  312,  313,  185,  314,  187,  188,  189,  314,  314,
 /*  9500 */   314,  185,  194,  187,  188,  189,  314,  314,  314,  314,
 /*  9510 */   194,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9520 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9530 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9540 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9550 */   185,  314,  187,  188,  189,  314,  314,  314,  314,  194,
 /*  9560 */   314,  314,  314,  314,  314,  314,  314,  259,  314,  261,
 /*  9570 */   314,  263,  314,  265,  314,  259,  314,  261,  314,  263,
 /*  9580 */   314,  265,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9590 */   314,  314,  284,  285,  314,  314,  314,  314,  290,  291,
 /*  9600 */   284,  285,  314,  314,  314,  314,  290,  291,  300,  314,
 /*  9610 */   302,  314,  314,  314,  314,  314,  300,  314,  302,  311,
 /*  9620 */   312,  313,  314,  314,  259,  314,  261,  311,  312,  313,
 /*  9630 */   265,  314,  314,  314,  314,  314,  314,  185,  314,  187,
 /*  9640 */   188,  189,  314,  314,  314,  314,  194,  314,  314,  284,
 /*  9650 */   285,  314,  314,  288,  314,  290,  291,  314,  314,  314,
 /*  9660 */   314,  314,  314,  314,  314,  300,  314,  302,  314,  314,
 /*  9670 */   314,  314,  314,  314,  314,  314,  311,  312,  313,  185,
 /*  9680 */   314,  187,  188,  189,  314,  314,  314,  314,  194,  314,
 /*  9690 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9700 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9710 */   314,  259,  314,  261,  314,  263,  314,  265,  314,  314,
 /*  9720 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9730 */   314,  314,  314,  314,  314,  314,  284,  285,  314,  314,
 /*  9740 */   314,  314,  290,  291,  314,  314,  314,  314,  314,  314,
 /*  9750 */   314,  314,  300,  259,  302,  261,  314,  263,  314,  265,
 /*  9760 */   314,  314,  314,  311,  312,  313,  314,  185,  314,  187,
 /*  9770 */   188,  189,  314,  314,  314,  314,  194,  314,  284,  285,
 /*  9780 */   314,  314,  314,  314,  290,  291,  314,  314,  314,  314,
 /*  9790 */   314,  314,  314,  314,  300,  314,  302,  314,  314,  314,
 /*  9800 */   314,  314,  314,  314,  314,  311,  312,  313,  314,  314,
 /*  9810 */   314,  314,  185,  314,  187,  188,  189,  314,  314,  314,
 /*  9820 */   314,  194,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9830 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9840 */   314,  259,  314,  261,  314,  263,  314,  265,  314,  314,
 /*  9850 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9860 */   314,  314,  314,  314,  314,  314,  284,  285,  314,  314,
 /*  9870 */   314,  314,  290,  291,  185,  314,  187,  188,  189,  314,
 /*  9880 */   314,  314,  300,  194,  302,  314,  259,  314,  261,  314,
 /*  9890 */   263,  314,  265,  311,  312,  313,  314,  314,  314,  314,
 /*  9900 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /*  9910 */   314,  284,  285,  314,  314,  314,  314,  290,  291,  314,
 /*  9920 */   314,  314,  185,  314,  187,  188,  189,  300,  314,  302,
 /*  9930 */   314,  194,  314,  314,  314,  314,  314,  314,  311,  312,
 /*  9940 */   313,  314,  314,  314,  314,  314,  314,  314,  259,  314,
 /*  9950 */   314,  314,  314,  314,  314,  314,  314,  268,  314,  270,
 /*  9960 */   314,  272,  185,  314,  187,  188,  189,  314,  314,  314,
 /*  9970 */   314,  194,  314,  314,  314,  286,  287,  314,  314,  290,
 /*  9980 */   291,  314,  314,  314,  314,  314,  314,  314,  314,  300,
 /*  9990 */   314,  302,  314,  314,  314,  314,  259,  314,  314,  314,
 /* 10000 */   311,  312,  313,  314,  314,  268,  314,  314,  314,  272,
 /* 10010 */   314,  314,  235,  314,  314,  238,  314,  314,  314,  314,
 /* 10020 */   314,  314,  314,  286,  287,  314,  289,  290,  291,  314,
 /* 10030 */   314,  314,  314,  314,  314,  314,  259,  300,  314,  302,
 /* 10040 */   314,  314,  314,  314,  314,  268,  314,  314,  311,  312,
 /* 10050 */   313,  314,  185,  314,  187,  188,  189,  314,  314,  314,
 /* 10060 */   314,  194,  314,  286,  287,  314,  314,  290,  291,  314,
 /* 10070 */   314,  314,  314,  314,  314,  314,  314,  300,  314,  302,
 /* 10080 */   314,  314,  314,  314,  314,  314,  314,  314,  311,  312,
 /* 10090 */   313,  314,  314,  314,  314,  314,  168,  314,  314,  232,
 /* 10100 */   233,  314,  174,  175,  176,  314,  314,  314,  185,  314,
 /* 10110 */   187,  188,  189,  314,  191,  314,  314,  194,  314,  314,
 /* 10120 */   314,  314,  314,  314,  314,  314,  259,  314,  261,  314,
 /* 10130 */   314,  314,  314,  314,  314,  207,  314,  209,  210,  211,
 /* 10140 */   212,  213,  214,  215,  216,  217,  218,  219,  314,  314,
 /* 10150 */   314,  284,  285,  225,  226,  232,  314,  290,  291,  314,
 /* 10160 */   314,  314,  314,  314,  314,  314,  314,  300,  314,  302,
 /* 10170 */   314,  314,  314,  314,  314,  314,  314,  314,  311,  312,
 /* 10180 */   313,  314,  259,  314,  261,  314,  185,  314,  187,  188,
 /* 10190 */   189,  314,  191,  314,  314,  194,  314,  314,  314,  314,
 /* 10200 */   314,  314,  314,  314,  314,  314,  314,  284,  285,  314,
 /* 10210 */   314,  314,  314,  290,  291,  314,  314,  314,  314,  314,
 /* 10220 */   314,  314,  314,  300,  314,  302,  314,  314,  314,  314,
 /* 10230 */   314,  314,  314,  232,  311,  312,  313,  314,  314,  314,
 /* 10240 */   314,  185,  314,  187,  188,  189,  314,  314,  314,  185,
 /* 10250 */   194,  187,  188,  189,  314,  314,  314,  314,  194,  314,
 /* 10260 */   259,  314,  261,  314,  314,  314,  314,  314,  314,  314,
 /* 10270 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /* 10280 */   314,  314,  314,  314,  314,  284,  285,  314,  314,  314,
 /* 10290 */   314,  290,  291,  314,  314,  314,  185,  314,  187,  188,
 /* 10300 */   189,  300,  314,  302,  314,  194,  314,  314,  314,  314,
 /* 10310 */   314,  314,  311,  312,  313,  259,  314,  261,  314,  314,
 /* 10320 */   314,  265,  314,  259,  314,  314,  314,  314,  314,  314,
 /* 10330 */   314,  314,  268,  314,  314,  314,  272,  314,  314,  314,
 /* 10340 */   284,  285,  314,  314,  314,  314,  290,  291,  314,  238,
 /* 10350 */   286,  287,  314,  314,  290,  291,  300,  314,  302,  314,
 /* 10360 */   314,  314,  314,  314,  300,  314,  302,  311,  312,  313,
 /* 10370 */   259,  314,  314,  314,  314,  311,  312,  313,  185,  268,
 /* 10380 */   187,  188,  189,  314,  314,  314,  314,  194,  314,  314,
 /* 10390 */   314,  314,  314,  314,  314,  314,  314,  286,  287,  314,
 /* 10400 */   314,  290,  291,  314,  314,  314,  314,  314,  314,  314,
 /* 10410 */   314,  300,  314,  302,  314,  314,  314,  314,  314,  314,
 /* 10420 */   314,  314,  311,  312,  313,  314,  314,  185,  314,  187,
 /* 10430 */   188,  189,  314,  314,  314,  185,  194,  187,  188,  189,
 /* 10440 */   314,  314,  314,  314,  194,  314,  314,  314,  314,  314,
 /* 10450 */   314,  314,  259,  314,  261,  314,  314,  314,  265,  314,
 /* 10460 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /* 10470 */   314,  314,  314,  314,  314,  314,  314,  284,  285,  314,
 /* 10480 */   314,  314,  314,  290,  291,  185,  314,  187,  188,  189,
 /* 10490 */   314,  314,  314,  300,  194,  302,  314,  314,  314,  314,
 /* 10500 */   314,  259,  314,  261,  311,  312,  313,  265,  314,  259,
 /* 10510 */   314,  314,  314,  314,  314,  314,  314,  314,  268,  314,
 /* 10520 */   314,  314,  272,  314,  314,  314,  284,  285,  314,  314,
 /* 10530 */   314,  314,  290,  291,  314,  314,  286,  287,  314,  314,
 /* 10540 */   290,  291,  300,  314,  302,  314,  314,  314,  314,  314,
 /* 10550 */   300,  314,  302,  311,  312,  313,  314,  314,  314,  259,
 /* 10560 */   314,  311,  312,  313,  314,  314,  314,  185,  268,  187,
 /* 10570 */   188,  189,  272,  314,  314,  314,  194,  314,  314,  314,
 /* 10580 */   314,  314,  314,  314,  314,  314,  286,  287,  314,  314,
 /* 10590 */   290,  291,  314,  314,  314,  314,  314,  314,  314,  314,
 /* 10600 */   300,  314,  302,  314,  314,  314,  314,  314,  314,  314,
 /* 10610 */   314,  311,  312,  313,  232,  314,  314,  314,  314,  314,
 /* 10620 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /* 10630 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /* 10640 */   314,  259,  314,  261,  314,  314,  314,  314,  314,  314,
 /* 10650 */   314,  314,  314,  314,  314,  314,  314,  314,  314,  314,
 /* 10660 */   314,  314,  314,  314,  314,  314,  284,  285,  314,  314,
 /* 10670 */   314,  314,  290,  291,  314,  314,  314,  314,  314,  314,
 /* 10680 */   314,  314,  300,  314,  302,  314,  314,  314,  314,  314,
 /* 10690 */   314,  314,  314,  311,  312,  313,
);
  const YY_SHIFT_USE_DFLT = -49;
  const YY_SHIFT_MAX = 605;
static $yy_shift_ofst = array(
 /*     0 */    -1, 3387,   -3,  156,  315,  474,  633,  792,  951, 1110,
 /*    10 */  1269, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*    20 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*    30 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*    40 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*    50 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*    60 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*    70 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*    80 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*    90 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
 /*   100 */  1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 3575,
 /*   110 */  3599, 1428, 1428, 1428, 1428, 1587, 1746, 1905, 2064, 2064,
 /*   120 */  2064, 2223, 1607, 2382, 2382, 2382, 2382, 3633, 3794, 3824,
 /*   130 */  3854, 4015, 4045, 4075, 4236, 8317, 8317, 8317, 8478, 8478,
 /*   140 */  8478, 8478, 8478, 8478, 8478, 8478, 8317, 8317, 8317, 8478,
 /*   150 */  8478, 8478,  158,  158, 4266, 4427, 8317, 8478, 8478, 8317,
 /*   160 */  8317, 8478, 3106,  627,  627, 2541, 2541, 2682, 2823, 2964,
 /*   170 */  1452, 8691, 8691,   18,  815, 3105, 3246, 1771, 8639, 8676,
 /*   180 */    18,   18,  815,  815, 3866, 3866, 3866, 3866, 3866,    0,
 /*   190 */  2684,  361,  361,  361,  361,  361,  361,  361,  361,  361,
 /*   200 */   361,  361,  361,  361,  361,  361,  361, 2684, 2684, 1276,
 /*   210 */  1276, 1276, 2684, 2684, 1276, 1276, 2966,  -14, 4119, 3247,
 /*   220 */  2968,  387,  387,  387,  472,  472,  377,  294,  294,  377,
 /*   230 */   377,  377, 3377, 4120, 1933, 4270, 4522, 3868, 3868,  317,
 /*   240 */   317,  317,  317,  317,  317,  317,  317,  317,  377,  377,
 /*   250 */   377,  377,  171,  659,   37,   37,   37,   37, 3809,  503,
 /*   260 */   661, 2542,  693, 1158, 1420, 1420, 1170,  852,  852,  985,
 /*   270 */   852,  852,  852,  852,  852,  615,  464,    7, 1105,  941,
 /*   280 */   970, 1259, 1415,   14,   14,  -48,  154,  392,  392,    2,
 /*   290 */   926, 1243, 1291, 1454, 1422,  477,  477,  615, 1720, 1443,
 /*   300 */  1720,  615, 1454,  615,  615,  615, 1602,  615,  477,  477,
 /*   310 */   477, 1720, 1720, 1609,  997, 1283, 1613, 1614, 1737, 1742,
 /*   320 */  1743, 1895, 1154, 1154, 1154, 1154, 1290, 1385, 1433, 1497,
 /*   330 */  1559, 1154, 1559, 1559, 1600, 1576, 1624, 1594, 1603, 1689,
 /*   340 */  1600, 1559, 1559, 1559, 1559, 1559, 1730, 1559, 1765,   14,
 /*   350 */    14, 1770, 1770, 1770, 1809,  -48,  -48, 1809, 1812, 1559,
 /*   360 */  1559, 1559, 1559, 1812, 1559, 1559, 1812, 1559, 1559, 1559,
 /*   370 */  1559, 1559, 1559, 1154, 1154, 1154, 1154, 1765, 1608, 1205,
 /*   380 */  1417, 1740,  791,  791, 1722, 1878, 1879, 1924, 1925, 1478,
 /*   390 */   671, 1474, 1486, 1490, 1615, 1766,  791,  791,  791, 2036,
 /*   400 */  2068, 2069, 2056, 2058, 2062, 2066, 2067, 2074, 2088, 2087,
 /*   410 */  2027, 2028, 2091, 2095, 2092, 2096, 2042, 2099, 2104, 2113,
 /*   420 */  2116, 2115, 2123, 2122, 2127, 2086, 2132, 2131, 2134, 2133,
 /*   430 */  2137, 2195, 2216, 2215, 2219, 2236, 2225, 2237, 2242, 2241,
 /*   440 */  2244, 2243, 2246, 2196, 2247, 2248, 2199, 2249, 2254, 2201,
 /*   450 */  2251, 2255, 2209, 2259, 2263, 2224, 2264, 2267, 2272, 2276,
 /*   460 */  2280, 2283, 2286, 2289, 2288, 2291, 2290, 2293, 2292, 2296,
 /*   470 */  2354, 2357, 2356, 2330, 2331, 2333, 2380, 2395, 2384, 2396,
 /*   480 */  2401, 2400, 2403, 2402, 2405, 2404, 2407, 2358, 2359, 2406,
 /*   490 */  2413, 2360, 2410, 2414, 2368, 2418, 2422, 2375, 2423, 2433,
 /*   500 */  2432, 2435, 2439, 2442, 2445, 2448, 2447, 2450, 2449, 2452,
 /*   510 */  2464, 2451, 2455, 2465, 2515, 2535, 2488, 2512, 2562, 2553,
 /*   520 */  2564, 2444, 2570, 2569, 2571, 2572, 2576, 2579, 2582, 2581,
 /*   530 */  2590, 2593, 2598, 2601, 2604, 2607, 2475, 2545, 2609, 2476,
 /*   540 */  2547, 2612, 2673, 2676, 2678, 2679, 2681, 2683, 2686, 2687,
 /*   550 */  2688, 2692, 2694, 2696, 2695, 2697, 2693, 2722, 2666, 2665,
 /*   560 */  2703, 2670, 2672, 2677, 2724, 2689, 2666, 2674, 2732, 2737,
 /*   570 */  2739, 2699, 2700, 2746, 2748, 2749, 2745, 2752, 2751, 2753,
 /*   580 */  2817, 2819, 2829, 2833, 2825, 2824, 2842, 2834, 2862, 2873,
 /*   590 */  2874, 2877, 2879, 2846, 2847, 2837, 2844, 2845, 2848, 2849,
 /*   600 */  2850, 2870, 2872, 2875, 2876, 2834,
);
  const YY_REDUCE_USE_DFLT = -280;
  const YY_REDUCE_MAX = 377;
static $yy_reduce_ofst = array(
 /*     0 */  1596, 3330, 2412, 2544, 2685, 2713, 2843, 2976, 3117, 4163,
 /*    10 */  4323, 4348, 4414, 4484, 4508, 4575, 4641, 4669, 4707, 4801,
 /*    20 */  4854, 4876, 4898, 4934, 5064, 5086, 5108, 5147, 5238, 5277,
 /*    30 */  5299, 5332, 5368, 5429, 5462, 5517, 5559, 5592, 5614, 5647,
 /*    40 */  5744, 5777, 5799, 5821, 5951, 5984, 6006, 6037, 6081, 6136,
 /*    50 */  6169, 6222, 6266, 6299, 6321, 6354, 6451, 6484, 6506, 6528,
 /*    60 */  6658, 6691, 6713, 6744, 6788, 6843, 6876, 6929, 6973, 7006,
 /*    70 */  7028, 7061, 7158, 7191, 7213, 7235, 7365, 7398, 7420, 7451,
 /*    80 */  7495, 7550, 7583, 7636, 7680, 7713, 7735, 7768, 7865, 7898,
 /*    90 */  7920, 7942, 8072, 8105, 8127, 8206, 8260, 3508, 3950, 1140,
 /*   100 */  1776, 1935, 2094, 2253, 4139, -132,  186,  345,  504, 8390,
 /*   110 */  8424,   27,  663,  822,  981, 3368, 3728, 4179, 4721, 4955,
 /*   120 */  8472, 8555, 8314, 3579, 3579, 3579, 3579, 8621, 8684, 8703,
 /*   130 */  8778, 8833, 8841, 8970, 8989, 9028, 9118, 9165, 9179, 9308,
 /*   140 */  9316, 9365, 9452, 9494, 9582, 9627, 9689, 9737, 9777, 9867,
 /*   150 */  9923, 10001, 3279, 9928, 10056, 10064, 10111, 10193, 10242, 10250,
 /*   160 */  10300, 10382, 1281,  136,  295, 2554, 2986, 3287, 3803, 3126,
 /*   170 */  3526, 5027, 8860,  582, 3271,  676, 1475, 8416, 8416, 8416,
 /*   180 */   900,  900, 3304, 4325, 4647, 4653, 4860, 5035, 5750, 1775,
 /*   190 */  3801,  161,  481,  799,  958, 1117, 1437, 1753, 1912, 1934,
 /*   200 */  2071, 2093, 2230, 2252, 2374, 2389, 2411, 3496, 3569, 3394,
 /*   210 */  3806, 3867, 2552, 3388,  675, 3429,  333,  -15,  836,  679,
 /*   220 */   678,  987,  993, 1150,  593,  911, -118,  -12,  165,   29,
 /*   230 */   200, 1123, -279,  838, -144,  307,  784,  996, 1310, 1101,
 /*   240 */  1102, 1260, 1445, 1601, 1604, 1896, 1897, 1919,  502,  652,
 /*   250 */   820, 1288,  -85,   74,  318,  505,  823, 1106, -273, -169,
 /*   260 */     6,   15,  148,  202,  398,  417,  346,  507,  521,  338,
 /*   270 */   642,  835,  837,  942,  990,  594,   43,  621,  800,  961,
 /*   280 */  1046, 1118, 1261,  362,  466, 1262, -263, -272, -252, -137,
 /*   290 */  -119,  -88,  -56,  -45,  -39,   55,   76,  371,  242,  410,
 /*   300 */   547,  653,  -45,  682,  689,  753,  561,  771,  720,  732,
 /*   310 */   818,  706,  719,  866,  977,  945,  946,  946,  946,  946,
 /*   320 */   946,  946, 1086, 1142, 1162, 1167, 1135, 1292, 1201, 1213,
 /*   330 */  1396, 1448, 1425, 1434, 1366, 1381, 1393, 1457, 1473, 1482,
 /*   340 */  1495, 1595, 1598, 1599, 1606, 1621, 1541, 1622, 1591, 1628,
 /*   350 */  1628, 1605, 1670, 1690, 1686, 1682, 1682, 1712, 1718, 1748,
 /*   360 */  1751, 1752, 1758, 1724, 1759, 1761, 1735, 1773, 1774, 1780,
 /*   370 */  1781, 1786, 1787, 1790, 1815, 1819, 1880, 1843,
);
static $yy_default = array(
 /*     0 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    10 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    20 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    30 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    40 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    50 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    60 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    70 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    80 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*    90 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   100 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   110 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   120 */  1604, 1087, 1604, 1081, 1082, 1083, 1086, 1291, 1295, 1604,
 /*   130 */  1604, 1604, 1269, 1604, 1273, 1290, 1298, 1604, 1604, 1604,
 /*   140 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1294, 1278,
 /*   150 */  1268, 1272, 1604, 1604, 1604, 1604, 1296, 1604, 1604, 1604,
 /*   160 */  1604, 1276, 1127, 1604, 1604, 1604, 1179, 1604, 1161, 1604,
 /*   170 */  1604, 1604, 1604, 1286, 1135, 1172, 1604, 1604, 1604, 1604,
 /*   180 */  1285, 1287, 1126, 1134, 1604, 1604, 1374, 1381, 1384, 1080,
 /*   190 */  1604, 1072, 1074, 1114, 1115, 1112, 1110, 1113, 1111, 1118,
 /*   200 */  1119, 1123, 1125, 1131, 1133, 1139, 1141, 1604, 1604, 1604,
 /*   210 */  1604, 1359, 1604, 1604, 1363, 1365, 1604, 1157, 1604, 1604,
 /*   220 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1151, 1158, 1604,
 /*   230 */  1604, 1604, 1465, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   240 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   250 */  1604, 1604, 1604, 1604, 1150, 1156, 1159, 1152, 1464, 1604,
 /*   260 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   270 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1064, 1604, 1604,
 /*   280 */  1604, 1604, 1604, 1062, 1063, 1264, 1455, 1604, 1604, 1604,
 /*   290 */  1398, 1604, 1604, 1490, 1604, 1468, 1483, 1604, 1604, 1604,
 /*   300 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1469, 1474,
 /*   310 */  1475, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   320 */  1604, 1604, 1052, 1053, 1054, 1055, 1190, 1191, 1447, 1451,
 /*   330 */  1604, 1079, 1604, 1604, 1377, 1369, 1361, 1390, 1394, 1386,
 /*   340 */  1378, 1604, 1604, 1604, 1604, 1604, 1340, 1604, 1197, 1060,
 /*   350 */  1061, 1604, 1604, 1604, 1604, 1263, 1265, 1604, 1604, 1604,
 /*   360 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   370 */  1604, 1604, 1604, 1056, 1057, 1058, 1059, 1198, 1604, 1579,
 /*   380 */  1604, 1604, 1466, 1482, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   390 */  1604, 1604, 1604, 1604, 1604, 1604, 1467, 1472, 1473, 1604,
 /*   400 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   410 */  1446, 1450, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   420 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   430 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   440 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   450 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   460 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   470 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   480 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   490 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   500 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   510 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   520 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   530 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   540 */  1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   550 */  1604, 1604, 1604, 1604, 1604, 1604, 1299, 1297, 1375, 1368,
 /*   560 */  1360, 1604, 1389, 1393, 1604, 1385, 1376, 1604, 1604, 1604,
 /*   570 */  1604, 1339, 1604, 1604, 1604, 1604, 1604, 1604, 1604, 1604,
 /*   580 */  1604, 1604, 1279, 1277, 1604, 1604, 1604, 1195, 1604, 1604,
 /*   590 */  1070, 1604, 1068, 1216, 1217, 1604, 1604, 1604, 1604, 1604,
 /*   600 */  1604, 1604, 1604, 1604, 1604, 1196, 1044, 1194, 1316, 1317,
 /*   610 */  1318, 1320, 1333, 1334, 1335, 1336, 1337, 1577, 1578, 1598,
 /*   620 */  1599, 1600, 1601, 1580, 1581, 1582, 1583, 1584, 1585, 1586,
 /*   630 */  1587, 1588, 1589, 1590, 1591, 1592, 1593, 1594, 1595, 1596,
 /*   640 */  1597, 1319, 1321, 1322, 1329, 1330, 1331, 1332, 1327, 1438,
 /*   650 */  1439, 1328, 1323, 1325, 1324, 1326, 1045, 1046, 1047, 1071,
 /*   660 */  1146, 1188, 1193, 1189, 1192, 1149, 1180, 1182, 1346, 1347,
 /*   670 */  1352, 1448, 1452, 1454, 1456, 1478, 1484, 1479, 1485, 1489,
 /*   680 */  1491, 1492, 1493, 1494, 1495, 1496, 1497, 1498, 1499, 1486,
 /*   690 */  1487, 1501, 1502, 1503, 1504, 1505, 1506, 1508, 1509, 1510,
 /*   700 */  1511, 1512, 1354, 1353, 1514, 1515, 1516, 1517, 1518, 1519,
 /*   710 */  1520, 1521, 1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529,
 /*   720 */  1530, 1531, 1532, 1533, 1534, 1535, 1536, 1537, 1538, 1539,
 /*   730 */  1540, 1356, 1541, 1542, 1543, 1544, 1545, 1546, 1547, 1548,
 /*   740 */  1549, 1550, 1551, 1553, 1555, 1077, 1078, 1147, 1155, 1154,
 /*   750 */  1160, 1162, 1165, 1558, 1559, 1560, 1563, 1564, 1565, 1566,
 /*   760 */  1567, 1573, 1574, 1575, 1576, 1572, 1571, 1570, 1569, 1568,
 /*   770 */  1561, 1562, 1163, 1164, 1166, 1351, 1167, 1170, 1168, 1169,
 /*   780 */  1171, 1173, 1174, 1175, 1176, 1177, 1178, 1144, 1145, 1088,
 /*   790 */  1089, 1090, 1091, 1092, 1093, 1094, 1095, 1084, 1096, 1097,
 /*   800 */  1098, 1099, 1100, 1101, 1102, 1103, 1085, 1282, 1283, 1284,
 /*   810 */  1288, 1300, 1372, 1370, 1418, 1419, 1362, 1424, 1425, 1430,
 /*   820 */  1431, 1434, 1435, 1440, 1441, 1442, 1443, 1444, 1445, 1602,
 /*   830 */  1603, 1426, 1366, 1367, 1436, 1437, 1364, 1420, 1371, 1379,
 /*   840 */  1380, 1391, 1395, 1397, 1401, 1402, 1403, 1399, 1400, 1404,
 /*   850 */  1405, 1408, 1412, 1414, 1415, 1416, 1417, 1409, 1413, 1410,
 /*   860 */  1411, 1406, 1407, 1396, 1392, 1382, 1383, 1387, 1421, 1422,
 /*   870 */  1427, 1428, 1432, 1433, 1429, 1423, 1388, 1373, 1301, 1289,
 /*   880 */  1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311,
 /*   890 */  1312, 1313, 1314, 1315, 1338, 1341, 1342, 1343, 1344, 1345,
 /*   900 */  1292, 1293, 1557, 1556, 1554, 1552, 1355, 1513, 1507, 1500,
 /*   910 */  1480, 1481, 1488, 1470, 1471, 1476, 1477, 1457, 1458, 1459,
 /*   920 */  1460, 1461, 1462, 1463, 1453, 1449, 1349, 1348, 1350, 1183,
 /*   930 */  1184, 1185, 1186, 1187, 1181, 1148, 1153, 1075, 1142, 1143,
 /*   940 */  1073, 1076, 1106, 1107, 1280, 1357, 1358, 1281, 1104, 1108,
 /*   950 */  1105, 1109, 1116, 1117, 1120, 1122, 1121, 1124, 1136, 1128,
 /*   960 */  1130, 1129, 1132, 1137, 1138, 1140, 1065, 1069, 1066, 1067,
 /*   970 */  1199, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211,
 /*   980 */  1212, 1213, 1214, 1254, 1215, 1218, 1255, 1256, 1257, 1258,
 /*   990 */  1219, 1220, 1221, 1222, 1223, 1224, 1251, 1252, 1253, 1225,
 /*  1000 */  1226, 1227, 1228, 1229, 1230, 1261, 1262, 1266, 1267, 1274,
 /*  1010 */  1275, 1270, 1271, 1231, 1232, 1259, 1260, 1233, 1245, 1249,
 /*  1020 */  1250, 1236, 1246, 1234, 1237, 1248, 1235, 1238, 1247, 1239,
 /*  1030 */  1242, 1240, 1243, 1241, 1244, 1200, 1201, 1202, 1048, 1049,
 /*  1040 */  1050, 1051,
);

  /* fallback */

  private static $yyFallback = array(
  );

  private static $yyTokenName = array( 
  '$',             'PRAGMA',        'BASE',          'IRIREF',      
  'DOT',           'PREFIX',        'PNAME_NS',      'SELECT',      
  'DISTINCT',      'REDUCED',       'STAR',          'LPARENTHESE', 
  'AS',            'RPARENTHESE',   'CONSTRUCT',     'LBRACE',      
  'RBRACE',        'WHERE',         'DESCRIBE',      'ASK',         
  'FROM',          'NAMED',         'GROUP',         'BY',          
  'HAVING',        'ORDER',         'ASC',           'DESC',        
  'LIMIT',         'INTEGER',       'OFFSET',        'VALUES',      
  'SEMICOLON',     'LOAD',          'SILENT',        'INTO',        
  'CLEAR',         'DROP',          'CREATE',        'ADD',         
  'TO',            'MOVE',          'COPY',          'INSERTDATA',  
  'DELETEDATA',    'DELETEWHERE',   'WITH',          'DELETE',      
  'INSERT',        'USING',         'GRAPH',         'DEFAULT',     
  'ALL',           'OPTIONAL',      'SERVICE',       'BIND',        
  'NIL',           'UNDEF',         'SMINUS',        'UNION',       
  'GroupGraphPattern',  'FILTER',        'COMMA',         'A',           
  'VBAR',          'SLASH',         'HAT',           'PLUS',        
  'QUESTION',      'EXCLAMATION',   'LBRACKET',      'RBRACKET',    
  'VAR1',          'VAR2',          'OR',            'AND',         
  'EQUAL',         'NEQUAL',        'SMALLERTHEN',   'GREATERTHEN', 
  'SMALLERTHENQ',  'GREATERTHENQ',  'IN',            'NOT',         
  'MINUS',         'STR',           'LANG',          'LANGMATCHES', 
  'DATATYPE',      'BOUND',         'URI',           'BNODE',       
  'RAND',          'ABS',           'CEIL',          'FLOOR',       
  'ROUND',         'CONCAT',        'STRLEN',        'UCASE',       
  'LCASE',         'ENCODE_FOR_URI',  'CONTAINS',      'STRSTARTS',   
  'STRENDS',       'STBEFORE',      'STRAFTER',      'YEAR',        
  'MONTH',         'DAY',           'HOURS',         'MINUTES',     
  'SECONDS',       'TIMEZONE',      'TZ',            'NOW',         
  'UUID',          'STRUUID',       'MD5',           'SHA1',        
  'SHA256',        'SHA384',        'SHA512',        'COALESCE',    
  'IF',            'STRLANG',       'STRDT',         'SAMETERM',    
  'ISIRI',         'ISURI',         'ISBLANK',       'ISLITERAL',   
  'ISNUMERIC',     'REGEX',         'SUBSTR',        'REPLACE',     
  'EXISTS',        'COUNT',         'SUM',           'MIN',         
  'MAX',           'AVG',           'SAMPLE',        'GROUP_CONCAT',
  'SEPARATOR',     'LANGTAG',       'DHAT',          'DECIMAL',     
  'DOUBLE',        'INTEGER_POSITIVE',  'DECIMAL_POSITIVE',  'DOUBLE_POSITIVE',
  'INTEGER_NEGATIVE',  'DECIMAL_NEGATIVE',  'DOUBLE_NEGATIVE',  'TRUE',        
  'FALSE',         'STRING_LITERAL1',  'STRING_LITERAL2',  'STRING_LITERAL_LONG1',
  'STRING_LITERAL_LONG2',  'PNAME_LN',      'BLANK_NODE_LABEL',  'ANON',        
  'error',         'start',         'query',         'update',      
  'prologue',      'selectQuery',   'valuesClause',  'constructQuery',
  'describeQuery',  'askQuery',      'prefixDeclX',   'baseDecl',    
  'prefixDecl',    'selectClause',  'datasetClauseX',  'whereclause', 
  'solutionModifier',  'datasetClause',  'subSelect',     'selectClauseX',
  'expression',    'var',           'builtInCall',   'rdfLiteral',  
  'numericLiteral',  'booleanLiteral',  'functionCall',  'triplesTemplate',
  'varOrIriX',     'varOrIri',      'iri',           'groupGraphPattern',
  'groupClause',   'havingClause',  'orderClause',   'limitOffsetClauses',
  'groupConditionX',  'constraintX',   'orderConditionX',  'orderCondition',
  'limitClause',   'offsetClause',  'dataBlock',     'update1',     
  'updateX',       'load',          'clear',         'drop',        
  'add',           'move',          'copy',          'create',      
  'insertData',    'deleteData',    'deletewhere',   'modify',      
  'graphRef',      'graphRefAll',   'graphOrDefault',  'quadData',    
  'quadPattern',   'deleteClause',  'insertClause',  'usingClauseX',
  'usingClause',   'quads',         'quadsX',        'quadsNotTriples',
  'triplesSameSubject',  'triplesTemplateX',  'groupGraphPatternSub',  'triplesBlock',
  'groupGraphPatternSubX',  'graphPatternNotTriples',  'triplesSameSubjectPath',  'triplesBlockX',
  'groupOrUnionGraphPattern',  'optionalGraphPattern',  'minusGraphPattern',  'graphGraphPattern',
  'serviceGraphPattern',  'filter',        'bind',          'inlineData',  
  'inlineDataOneVar',  'inlineDataFull',  'dataBlockValueX',  'dataBlockValue',
  'varX',          'inlineDataFullX',  'nilX',          'groupOrUnionGraphPatternX',
  'argList',       'argListX',      'expressionList',  'varOrTerm',   
  'propertyListNotEmpty',  'triplesNode',   'verb',          'objectList',  
  'propertyListNotEmptyX',  'graphNode',     'objectListX',   'propertyListPathNotEmpty',
  'triplesNodePath',  'pathAlternative',  'objectListPath',  'propertyListPathNotEmptyX',
  'graphNodePath',  'objectListPathX',  'pathSequence',  'pathAlternativeX',
  'pathEltOrInverse',  'pathSequenceX',  'pathElt',       'pathPrimary', 
  'pathMod',       'pathNegatedPropertySet',  'pathOneInPropertySet',  'pathNegatedPropertySetX',
  'collection',    'blankNodePropertyList',  'collectionPath',  'blankNodePropertyListPath',
  'graphNodeX',    'graphNodePathX',  'graphTerm',     'blankNode',   
  'conditionalAndExpression',  'conditionalOrExpressionX',  'relationalExpression',  'conditionalAndExpressionX',
  'additiveExpression',  'relationalExpressionX',  'multiplicativeExpression',  'additiveExpressionX',
  'numericLiteralPositive',  'additiveExpressionY',  'numericLiteralNegative',  'unaryExpression',
  'primaryExpression',  'aggregate',     'regexExpression',  'existsFunc',  
  'notExistsFunc',  'subStringExpression',  'strReplaceExpression',  'string',      
  'numericLiteralUnsigned',  'prefixedName',
  );

  private static $yyRuleName = array(
 /*   0 */ "start ::= query",
 /*   1 */ "start ::= update",
 /*   2 */ "query ::= prologue selectQuery valuesClause",
 /*   3 */ "query ::= prologue constructQuery valuesClause",
 /*   4 */ "query ::= prologue describeQuery valuesClause",
 /*   5 */ "query ::= prologue askQuery valuesClause",
 /*   6 */ "query ::= selectQuery valuesClause",
 /*   7 */ "query ::= constructQuery valuesClause",
 /*   8 */ "query ::= describeQuery valuesClause",
 /*   9 */ "query ::= askQuery valuesClause",
 /*  10 */ "query ::= prologue selectQuery",
 /*  11 */ "query ::= prologue constructQuery",
 /*  12 */ "query ::= prologue describeQuery",
 /*  13 */ "query ::= prologue askQuery",
 /*  14 */ "query ::= selectQuery",
 /*  15 */ "query ::= constructQuery",
 /*  16 */ "query ::= describeQuery",
 /*  17 */ "query ::= askQuery",
 /*  18 */ "prologue ::= prefixDeclX baseDecl prefixDeclX",
 /*  19 */ "prologue ::= baseDecl prefixDeclX",
 /*  20 */ "prologue ::= prefixDeclX baseDecl",
 /*  21 */ "prologue ::= baseDecl",
 /*  22 */ "prologue ::= prefixDeclX",
 /*  23 */ "prefixDeclX ::= prefixDeclX prefixDecl",
 /*  24 */ "prefixDeclX ::= prefixDecl",
 /*  25 */ "baseDecl ::= BASE IRIREF DOT",
 /*  26 */ "baseDecl ::= BASE IRIREF",
 /*  27 */ "prefixDecl ::= PREFIX PNAME_NS IRIREF DOT",
 /*  28 */ "prefixDecl ::= PREFIX PNAME_NS IRIREF",
 /*  29 */ "selectQuery ::= selectClause datasetClauseX whereclause solutionModifier",
 /*  30 */ "selectQuery ::= selectClause datasetClauseX whereclause",
 /*  31 */ "selectQuery ::= selectClause whereclause solutionModifier",
 /*  32 */ "selectQuery ::= selectClause whereclause",
 /*  33 */ "datasetClauseX ::= datasetClauseX datasetClause",
 /*  34 */ "datasetClauseX ::= datasetClause",
 /*  35 */ "subSelect ::= selectClause whereclause solutionModifier valuesClause",
 /*  36 */ "subSelect ::= selectClause whereclause valuesClause",
 /*  37 */ "subSelect ::= selectClause whereclause solutionModifier",
 /*  38 */ "subSelect ::= selectClause whereclause",
 /*  39 */ "selectClause ::= SELECT DISTINCT selectClauseX",
 /*  40 */ "selectClause ::= SELECT REDUCED selectClauseX",
 /*  41 */ "selectClause ::= SELECT STAR selectClauseX",
 /*  42 */ "selectClause ::= SELECT DISTINCT STAR",
 /*  43 */ "selectClause ::= SELECT REDUCED STAR",
 /*  44 */ "selectClause ::= SELECT selectClauseX",
 /*  45 */ "selectClause ::= SELECT STAR",
 /*  46 */ "selectClauseX ::= selectClauseX LPARENTHESE expression AS var RPARENTHESE",
 /*  47 */ "selectClauseX ::= selectClauseX LPARENTHESE expression RPARENTHESE",
 /*  48 */ "selectClauseX ::= selectClauseX builtInCall",
 /*  49 */ "selectClauseX ::= selectClauseX rdfLiteral",
 /*  50 */ "selectClauseX ::= selectClauseX numericLiteral",
 /*  51 */ "selectClauseX ::= selectClauseX booleanLiteral",
 /*  52 */ "selectClauseX ::= selectClauseX var",
 /*  53 */ "selectClauseX ::= selectClauseX functionCall",
 /*  54 */ "selectClauseX ::= LPARENTHESE expression AS var RPARENTHESE",
 /*  55 */ "selectClauseX ::= LPARENTHESE expression RPARENTHESE",
 /*  56 */ "selectClauseX ::= builtInCall",
 /*  57 */ "selectClauseX ::= rdfLiteral",
 /*  58 */ "selectClauseX ::= numericLiteral",
 /*  59 */ "selectClauseX ::= booleanLiteral",
 /*  60 */ "selectClauseX ::= var",
 /*  61 */ "selectClauseX ::= functionCall",
 /*  62 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause solutionModifier",
 /*  63 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause solutionModifier",
 /*  64 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE solutionModifier",
 /*  65 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE solutionModifier",
 /*  66 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause solutionModifier",
 /*  67 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause solutionModifier",
 /*  68 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause",
 /*  69 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause",
 /*  70 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause",
 /*  71 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause",
 /*  72 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE",
 /*  73 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE",
 /*  74 */ "constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE solutionModifier",
 /*  75 */ "constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE solutionModifier",
 /*  76 */ "constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE",
 /*  77 */ "constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE",
 /*  78 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause solutionModifier",
 /*  79 */ "describeQuery ::= DESCRIBE varOrIriX whereclause solutionModifier",
 /*  80 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX solutionModifier",
 /*  81 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause",
 /*  82 */ "describeQuery ::= DESCRIBE varOrIriX solutionModifier",
 /*  83 */ "describeQuery ::= DESCRIBE varOrIriX whereclause",
 /*  84 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX",
 /*  85 */ "describeQuery ::= DESCRIBE varOrIriX",
 /*  86 */ "describeQuery ::= DESCRIBE STAR datasetClauseX whereclause solutionModifier",
 /*  87 */ "describeQuery ::= DESCRIBE STAR whereclause solutionModifier",
 /*  88 */ "describeQuery ::= DESCRIBE STAR datasetClauseX solutionModifier",
 /*  89 */ "describeQuery ::= DESCRIBE STAR datasetClauseX whereclause",
 /*  90 */ "describeQuery ::= DESCRIBE STAR solutionModifier",
 /*  91 */ "describeQuery ::= DESCRIBE STAR whereclause",
 /*  92 */ "describeQuery ::= DESCRIBE STAR datasetClauseX",
 /*  93 */ "describeQuery ::= DESCRIBE STAR",
 /*  94 */ "varOrIriX ::= varOrIriX varOrIri",
 /*  95 */ "varOrIriX ::= varOrIri",
 /*  96 */ "askQuery ::= ASK datasetClauseX whereclause solutionModifier",
 /*  97 */ "askQuery ::= ASK datasetClauseX whereclause",
 /*  98 */ "askQuery ::= ASK whereclause solutionModifier",
 /*  99 */ "askQuery ::= ASK whereclause",
 /* 100 */ "datasetClause ::= FROM NAMED iri",
 /* 101 */ "datasetClause ::= FROM iri",
 /* 102 */ "whereclause ::= WHERE groupGraphPattern",
 /* 103 */ "whereclause ::= groupGraphPattern",
 /* 104 */ "solutionModifier ::= groupClause havingClause orderClause limitOffsetClauses",
 /* 105 */ "solutionModifier ::= havingClause orderClause limitOffsetClauses",
 /* 106 */ "solutionModifier ::= groupClause orderClause limitOffsetClauses",
 /* 107 */ "solutionModifier ::= groupClause havingClause limitOffsetClauses",
 /* 108 */ "solutionModifier ::= groupClause havingClause orderClause",
 /* 109 */ "solutionModifier ::= groupClause havingClause",
 /* 110 */ "solutionModifier ::= groupClause orderClause",
 /* 111 */ "solutionModifier ::= groupClause limitOffsetClauses",
 /* 112 */ "solutionModifier ::= orderClause limitOffsetClauses",
 /* 113 */ "solutionModifier ::= havingClause limitOffsetClauses",
 /* 114 */ "solutionModifier ::= havingClause orderClause",
 /* 115 */ "solutionModifier ::= groupClause",
 /* 116 */ "solutionModifier ::= havingClause",
 /* 117 */ "solutionModifier ::= orderClause",
 /* 118 */ "solutionModifier ::= limitOffsetClauses",
 /* 119 */ "groupClause ::= GROUP BY groupConditionX",
 /* 120 */ "groupConditionX ::= groupConditionX LPARENTHESE expression AS var RPARENTHESE",
 /* 121 */ "groupConditionX ::= groupConditionX builtInCall",
 /* 122 */ "groupConditionX ::= groupConditionX functionCall",
 /* 123 */ "groupConditionX ::= groupConditionX LPARENTHESE expression RPARENTHESE",
 /* 124 */ "groupConditionX ::= groupConditionX var",
 /* 125 */ "groupConditionX ::= LPARENTHESE expression AS var RPARENTHESE",
 /* 126 */ "groupConditionX ::= builtInCall",
 /* 127 */ "groupConditionX ::= functionCall",
 /* 128 */ "groupConditionX ::= LPARENTHESE expression RPARENTHESE",
 /* 129 */ "groupConditionX ::= var",
 /* 130 */ "havingClause ::= HAVING constraintX",
 /* 131 */ "constraintX ::= constraintX LPARENTHESE expression RPARENTHESE",
 /* 132 */ "constraintX ::= constraintX builtInCall",
 /* 133 */ "constraintX ::= constraintX functionCall",
 /* 134 */ "constraintX ::= LPARENTHESE expression RPARENTHESE",
 /* 135 */ "constraintX ::= builtInCall",
 /* 136 */ "constraintX ::= functionCall",
 /* 137 */ "orderClause ::= ORDER BY orderConditionX",
 /* 138 */ "orderConditionX ::= orderConditionX orderCondition",
 /* 139 */ "orderConditionX ::= orderCondition",
 /* 140 */ "orderCondition ::= ASC LPARENTHESE expression RPARENTHESE",
 /* 141 */ "orderCondition ::= DESC LPARENTHESE expression RPARENTHESE",
 /* 142 */ "orderCondition ::= LPARENTHESE expression RPARENTHESE",
 /* 143 */ "orderCondition ::= builtInCall",
 /* 144 */ "orderCondition ::= functionCall",
 /* 145 */ "orderCondition ::= var",
 /* 146 */ "limitOffsetClauses ::= limitClause offsetClause",
 /* 147 */ "limitOffsetClauses ::= offsetClause limitClause",
 /* 148 */ "limitOffsetClauses ::= limitClause",
 /* 149 */ "limitOffsetClauses ::= offsetClause",
 /* 150 */ "limitClause ::= LIMIT INTEGER",
 /* 151 */ "offsetClause ::= OFFSET INTEGER",
 /* 152 */ "valuesClause ::= VALUES dataBlock",
 /* 153 */ "update ::= prologue update1 updateX",
 /* 154 */ "update ::= update1 updateX",
 /* 155 */ "update ::= prologue update1",
 /* 156 */ "update ::= update1",
 /* 157 */ "updateX ::= updateX SEMICOLON prologue update1",
 /* 158 */ "updateX ::= updateX SEMICOLON update1",
 /* 159 */ "updateX ::= SEMICOLON prologue update1",
 /* 160 */ "updateX ::= SEMICOLON update1",
 /* 161 */ "update1 ::= load",
 /* 162 */ "update1 ::= clear",
 /* 163 */ "update1 ::= drop",
 /* 164 */ "update1 ::= add",
 /* 165 */ "update1 ::= move",
 /* 166 */ "update1 ::= copy",
 /* 167 */ "update1 ::= create",
 /* 168 */ "update1 ::= insertData",
 /* 169 */ "update1 ::= deleteData",
 /* 170 */ "update1 ::= deletewhere",
 /* 171 */ "update1 ::= modify",
 /* 172 */ "load ::= LOAD SILENT iri INTO graphRef",
 /* 173 */ "load ::= LOAD iri INTO graphRef",
 /* 174 */ "load ::= LOAD SILENT iri",
 /* 175 */ "load ::= LOAD iri",
 /* 176 */ "clear ::= CLEAR SILENT graphRefAll",
 /* 177 */ "clear ::= CLEAR graphRefAll",
 /* 178 */ "drop ::= DROP SILENT graphRefAll",
 /* 179 */ "drop ::= DROP graphRefAll",
 /* 180 */ "create ::= CREATE SILENT graphRef",
 /* 181 */ "create ::= CREATE graphRef",
 /* 182 */ "add ::= ADD SILENT graphOrDefault TO graphOrDefault",
 /* 183 */ "add ::= ADD graphOrDefault TO graphOrDefault",
 /* 184 */ "move ::= MOVE SILENT graphOrDefault TO graphOrDefault",
 /* 185 */ "move ::= MOVE graphOrDefault TO graphOrDefault",
 /* 186 */ "copy ::= COPY SILENT graphOrDefault TO graphOrDefault",
 /* 187 */ "copy ::= COPY graphOrDefault TO graphOrDefault",
 /* 188 */ "insertData ::= INSERTDATA quadData",
 /* 189 */ "deleteData ::= DELETEDATA quadData",
 /* 190 */ "deletewhere ::= DELETEWHERE quadPattern",
 /* 191 */ "modify ::= WITH iri deleteClause insertClause usingClauseX WHERE groupGraphPattern",
 /* 192 */ "modify ::= WITH iri deleteClause usingClauseX WHERE groupGraphPattern",
 /* 193 */ "modify ::= WITH iri insertClause usingClauseX WHERE groupGraphPattern",
 /* 194 */ "modify ::= WITH iri deleteClause insertClause WHERE groupGraphPattern",
 /* 195 */ "modify ::= WITH iri deleteClause WHERE groupGraphPattern",
 /* 196 */ "modify ::= WITH iri insertClause WHERE groupGraphPattern",
 /* 197 */ "modify ::= deleteClause insertClause usingClauseX WHERE groupGraphPattern",
 /* 198 */ "modify ::= deleteClause usingClauseX WHERE groupGraphPattern",
 /* 199 */ "modify ::= insertClause usingClauseX WHERE groupGraphPattern",
 /* 200 */ "modify ::= deleteClause insertClause WHERE groupGraphPattern",
 /* 201 */ "modify ::= deleteClause WHERE groupGraphPattern",
 /* 202 */ "modify ::= insertClause WHERE groupGraphPattern",
 /* 203 */ "usingClauseX ::= usingClauseX usingClause",
 /* 204 */ "usingClauseX ::= usingClause",
 /* 205 */ "deleteClause ::= DELETE quadPattern",
 /* 206 */ "insertClause ::= INSERT quadPattern",
 /* 207 */ "usingClause ::= USING NAMED iri",
 /* 208 */ "usingClause ::= USING iri",
 /* 209 */ "graphOrDefault ::= GRAPH iri",
 /* 210 */ "graphOrDefault ::= DEFAULT",
 /* 211 */ "graphOrDefault ::= iri",
 /* 212 */ "graphRef ::= GRAPH iri",
 /* 213 */ "graphRefAll ::= graphRef",
 /* 214 */ "graphRefAll ::= DEFAULT",
 /* 215 */ "graphRefAll ::= NAMED",
 /* 216 */ "graphRefAll ::= ALL",
 /* 217 */ "quadPattern ::= LBRACE quads RBRACE",
 /* 218 */ "quadPattern ::= LBRACE RBRACE",
 /* 219 */ "quadData ::= LBRACE quads RBRACE",
 /* 220 */ "quadData ::= LBRACE RBRACE",
 /* 221 */ "quads ::= triplesTemplate quadsX",
 /* 222 */ "quads ::= triplesTemplate",
 /* 223 */ "quads ::= quadsX",
 /* 224 */ "quadsX ::= quadsX quadsNotTriples DOT triplesTemplate",
 /* 225 */ "quadsX ::= quadsX quadsNotTriples triplesTemplate",
 /* 226 */ "quadsX ::= quadsX quadsNotTriples DOT",
 /* 227 */ "quadsX ::= quadsX quadsNotTriples",
 /* 228 */ "quadsX ::= quadsNotTriples DOT triplesTemplate",
 /* 229 */ "quadsX ::= quadsNotTriples triplesTemplate",
 /* 230 */ "quadsX ::= quadsNotTriples DOT",
 /* 231 */ "quadsX ::= quadsNotTriples",
 /* 232 */ "quadsNotTriples ::= GRAPH varOrIri LBRACE triplesTemplate RBRACE",
 /* 233 */ "quadsNotTriples ::= GRAPH varOrIri LBRACE RBRACE",
 /* 234 */ "triplesTemplate ::= triplesSameSubject DOT triplesTemplateX DOT",
 /* 235 */ "triplesTemplate ::= triplesSameSubject DOT triplesTemplateX",
 /* 236 */ "triplesTemplate ::= triplesSameSubject DOT",
 /* 237 */ "triplesTemplate ::= triplesSameSubject",
 /* 238 */ "triplesTemplateX ::= triplesTemplateX DOT triplesSameSubject",
 /* 239 */ "triplesTemplateX ::= triplesSameSubject",
 /* 240 */ "groupGraphPattern ::= LBRACE groupGraphPatternSub RBRACE",
 /* 241 */ "groupGraphPattern ::= LBRACE subSelect RBRACE",
 /* 242 */ "groupGraphPattern ::= LBRACE RBRACE",
 /* 243 */ "groupGraphPatternSub ::= triplesBlock groupGraphPatternSubX",
 /* 244 */ "groupGraphPatternSub ::= triplesBlock",
 /* 245 */ "groupGraphPatternSub ::= groupGraphPatternSubX",
 /* 246 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT triplesBlock",
 /* 247 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples triplesBlock",
 /* 248 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT",
 /* 249 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples",
 /* 250 */ "groupGraphPatternSubX ::= graphPatternNotTriples DOT triplesBlock",
 /* 251 */ "groupGraphPatternSubX ::= graphPatternNotTriples triplesBlock",
 /* 252 */ "groupGraphPatternSubX ::= graphPatternNotTriples DOT",
 /* 253 */ "groupGraphPatternSubX ::= graphPatternNotTriples",
 /* 254 */ "triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX DOT",
 /* 255 */ "triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX",
 /* 256 */ "triplesBlock ::= triplesSameSubjectPath DOT",
 /* 257 */ "triplesBlock ::= triplesSameSubjectPath",
 /* 258 */ "triplesBlockX ::= triplesBlockX DOT triplesSameSubjectPath",
 /* 259 */ "triplesBlockX ::= triplesSameSubjectPath",
 /* 260 */ "graphPatternNotTriples ::= groupOrUnionGraphPattern",
 /* 261 */ "graphPatternNotTriples ::= optionalGraphPattern",
 /* 262 */ "graphPatternNotTriples ::= minusGraphPattern",
 /* 263 */ "graphPatternNotTriples ::= graphGraphPattern",
 /* 264 */ "graphPatternNotTriples ::= serviceGraphPattern",
 /* 265 */ "graphPatternNotTriples ::= filter",
 /* 266 */ "graphPatternNotTriples ::= bind",
 /* 267 */ "graphPatternNotTriples ::= inlineData",
 /* 268 */ "optionalGraphPattern ::= OPTIONAL groupGraphPattern",
 /* 269 */ "graphGraphPattern ::= GRAPH varOrIri groupGraphPattern",
 /* 270 */ "serviceGraphPattern ::= SERVICE SILENT varOrIri groupGraphPattern",
 /* 271 */ "serviceGraphPattern ::= SERVICE varOrIri groupGraphPattern",
 /* 272 */ "bind ::= BIND LPARENTHESE expression AS var RPARENTHESE",
 /* 273 */ "inlineData ::= VALUES dataBlock",
 /* 274 */ "dataBlock ::= inlineDataOneVar",
 /* 275 */ "dataBlock ::= inlineDataFull",
 /* 276 */ "inlineDataOneVar ::= var LBRACE dataBlockValueX RBRACE",
 /* 277 */ "inlineDataOneVar ::= var LBRACE RBRACE",
 /* 278 */ "dataBlockValueX ::= dataBlockValueX dataBlockValue",
 /* 279 */ "dataBlockValueX ::= dataBlockValue",
 /* 280 */ "inlineDataFull ::= LPARENTHESE varX RPARENTHESE LBRACE inlineDataFullX RBRACE",
 /* 281 */ "inlineDataFull ::= NIL LBRACE nilX RBRACE",
 /* 282 */ "inlineDataFull ::= NIL LBRACE RBRACE",
 /* 283 */ "nilX ::= nilX NIL",
 /* 284 */ "nilX ::= NIL",
 /* 285 */ "varX ::= varX var",
 /* 286 */ "varX ::= var",
 /* 287 */ "inlineDataFullX ::= inlineDataFullX LPARENTHESE dataBlockValueX RPARENTHESE",
 /* 288 */ "inlineDataFullX ::= inlineDataFullX NIL",
 /* 289 */ "inlineDataFullX ::= LPARENTHESE dataBlockValueX RPARENTHESE",
 /* 290 */ "inlineDataFullX ::= NIL",
 /* 291 */ "dataBlockValue ::= iri",
 /* 292 */ "dataBlockValue ::= rdfLiteral",
 /* 293 */ "dataBlockValue ::= numericLiteral",
 /* 294 */ "dataBlockValue ::= booleanLiteral",
 /* 295 */ "dataBlockValue ::= UNDEF",
 /* 296 */ "minusGraphPattern ::= SMINUS groupGraphPattern",
 /* 297 */ "groupOrUnionGraphPattern ::= groupGraphPattern groupOrUnionGraphPatternX",
 /* 298 */ "groupOrUnionGraphPattern ::= groupGraphPattern",
 /* 299 */ "groupOrUnionGraphPatternX ::= groupOrUnionGraphPatternX UNION groupGraphPattern",
 /* 300 */ "groupOrUnionGraphPatternX ::= UNION GroupGraphPattern",
 /* 301 */ "filter ::= FILTER LPARENTHESE expression RPARENTHESE",
 /* 302 */ "filter ::= FILTER builtInCall",
 /* 303 */ "filter ::= FILTER functionCall",
 /* 304 */ "functionCall ::= iri argList",
 /* 305 */ "argList ::= LPARENTHESE DISTINCT expression argListX RPARENTHESE",
 /* 306 */ "argList ::= LPARENTHESE expression argListX RPARENTHESE",
 /* 307 */ "argList ::= LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 308 */ "argList ::= LPARENTHESE expression RPARENTHESE",
 /* 309 */ "argList ::= NIL",
 /* 310 */ "argListX ::= argListX COMMA expression",
 /* 311 */ "argListX ::= COMMA expression",
 /* 312 */ "expressionList ::= LPARENTHESE expression argListX RPARENTHESE",
 /* 313 */ "expressionList ::= LPARENTHESE expression RPARENTHESE",
 /* 314 */ "expressionList ::= NIL",
 /* 315 */ "triplesSameSubject ::= varOrTerm propertyListNotEmpty",
 /* 316 */ "triplesSameSubject ::= triplesNode propertyListNotEmpty",
 /* 317 */ "triplesSameSubject ::= triplesNode",
 /* 318 */ "propertyListNotEmpty ::= verb objectList propertyListNotEmptyX",
 /* 319 */ "propertyListNotEmpty ::= verb objectList",
 /* 320 */ "propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON verb objectList",
 /* 321 */ "propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON",
 /* 322 */ "propertyListNotEmptyX ::= SEMICOLON verb objectList",
 /* 323 */ "propertyListNotEmptyX ::= SEMICOLON",
 /* 324 */ "verb ::= varOrIri",
 /* 325 */ "verb ::= A",
 /* 326 */ "objectList ::= graphNode objectListX",
 /* 327 */ "objectList ::= graphNode",
 /* 328 */ "objectListX ::= objectListX COMMA graphNode",
 /* 329 */ "objectListX ::= COMMA graphNode",
 /* 330 */ "triplesSameSubjectPath ::= varOrTerm propertyListPathNotEmpty",
 /* 331 */ "triplesSameSubjectPath ::= triplesNodePath propertyListPathNotEmpty",
 /* 332 */ "triplesSameSubjectPath ::= triplesNodePath",
 /* 333 */ "propertyListPathNotEmpty ::= pathAlternative objectListPath propertyListPathNotEmptyX",
 /* 334 */ "propertyListPathNotEmpty ::= var objectListPath propertyListPathNotEmptyX",
 /* 335 */ "propertyListPathNotEmpty ::= pathAlternative objectListPath",
 /* 336 */ "propertyListPathNotEmpty ::= var objectListPath",
 /* 337 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON pathAlternative objectList",
 /* 338 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON var objectList",
 /* 339 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON",
 /* 340 */ "propertyListPathNotEmptyX ::= SEMICOLON pathAlternative objectList",
 /* 341 */ "propertyListPathNotEmptyX ::= SEMICOLON var objectList",
 /* 342 */ "propertyListPathNotEmptyX ::= SEMICOLON",
 /* 343 */ "objectListPath ::= graphNodePath objectListPathX",
 /* 344 */ "objectListPath ::= graphNodePath",
 /* 345 */ "objectListPathX ::= objectListPathX COMMA graphNodePath",
 /* 346 */ "objectListPathX ::= COMMA graphNodePath",
 /* 347 */ "pathAlternative ::= pathSequence pathAlternativeX",
 /* 348 */ "pathAlternative ::= pathSequence",
 /* 349 */ "pathAlternativeX ::= pathAlternativeX VBAR pathSequence",
 /* 350 */ "pathAlternativeX ::= VBAR pathSequence",
 /* 351 */ "pathSequence ::= pathEltOrInverse pathSequenceX",
 /* 352 */ "pathSequence ::= pathEltOrInverse",
 /* 353 */ "pathSequenceX ::= pathSequenceX SLASH pathEltOrInverse",
 /* 354 */ "pathSequenceX ::= SLASH pathEltOrInverse",
 /* 355 */ "pathElt ::= pathPrimary pathMod",
 /* 356 */ "pathElt ::= pathPrimary",
 /* 357 */ "pathEltOrInverse ::= HAT pathElt",
 /* 358 */ "pathEltOrInverse ::= pathElt",
 /* 359 */ "pathMod ::= STAR",
 /* 360 */ "pathMod ::= PLUS",
 /* 361 */ "pathMod ::= QUESTION",
 /* 362 */ "pathPrimary ::= LPARENTHESE pathAlternative RPARENTHESE",
 /* 363 */ "pathPrimary ::= EXCLAMATION pathNegatedPropertySet",
 /* 364 */ "pathPrimary ::= A",
 /* 365 */ "pathPrimary ::= iri",
 /* 366 */ "pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet pathNegatedPropertySetX RPARENTHESE",
 /* 367 */ "pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet RPARENTHESE",
 /* 368 */ "pathNegatedPropertySet ::= LPARENTHESE RPARENTHESE",
 /* 369 */ "pathNegatedPropertySet ::= pathOneInPropertySet",
 /* 370 */ "pathNegatedPropertySetX ::= pathNegatedPropertySetX VBAR pathOneInPropertySet",
 /* 371 */ "pathNegatedPropertySetX ::= VBAR pathOneInPropertySet",
 /* 372 */ "pathOneInPropertySet ::= HAT iri",
 /* 373 */ "pathOneInPropertySet ::= HAT A",
 /* 374 */ "pathOneInPropertySet ::= A",
 /* 375 */ "pathOneInPropertySet ::= iri",
 /* 376 */ "triplesNode ::= collection",
 /* 377 */ "triplesNode ::= blankNodePropertyList",
 /* 378 */ "blankNodePropertyList ::= LBRACKET propertyListNotEmpty RBRACKET",
 /* 379 */ "triplesNodePath ::= collectionPath",
 /* 380 */ "triplesNodePath ::= blankNodePropertyListPath",
 /* 381 */ "blankNodePropertyListPath ::= LBRACKET propertyListPathNotEmpty RBRACKET",
 /* 382 */ "collection ::= LPARENTHESE graphNodeX RPARENTHESE",
 /* 383 */ "graphNodeX ::= graphNodeX graphNode",
 /* 384 */ "graphNodeX ::= graphNode",
 /* 385 */ "collectionPath ::= LPARENTHESE graphNodePathX RPARENTHESE",
 /* 386 */ "graphNodePathX ::= graphNodePathX graphNodePath",
 /* 387 */ "graphNodePathX ::= graphNodePath",
 /* 388 */ "graphNode ::= varOrTerm",
 /* 389 */ "graphNode ::= triplesNode",
 /* 390 */ "graphNodePath ::= varOrTerm",
 /* 391 */ "graphNodePath ::= triplesNodePath",
 /* 392 */ "varOrTerm ::= var",
 /* 393 */ "varOrTerm ::= graphTerm",
 /* 394 */ "varOrIri ::= var",
 /* 395 */ "varOrIri ::= iri",
 /* 396 */ "var ::= VAR1",
 /* 397 */ "var ::= VAR2",
 /* 398 */ "graphTerm ::= iri",
 /* 399 */ "graphTerm ::= rdfLiteral",
 /* 400 */ "graphTerm ::= numericLiteral",
 /* 401 */ "graphTerm ::= booleanLiteral",
 /* 402 */ "graphTerm ::= blankNode",
 /* 403 */ "graphTerm ::= NIL",
 /* 404 */ "expression ::= conditionalAndExpression conditionalOrExpressionX",
 /* 405 */ "expression ::= conditionalAndExpression",
 /* 406 */ "conditionalOrExpressionX ::= conditionalOrExpressionX OR conditionalAndExpression",
 /* 407 */ "conditionalOrExpressionX ::= OR conditionalAndExpression",
 /* 408 */ "conditionalAndExpression ::= relationalExpression conditionalAndExpressionX",
 /* 409 */ "conditionalAndExpression ::= relationalExpression",
 /* 410 */ "conditionalAndExpressionX ::= conditionalAndExpressionX AND relationalExpression",
 /* 411 */ "conditionalAndExpressionX ::= AND relationalExpression",
 /* 412 */ "relationalExpression ::= additiveExpression relationalExpressionX",
 /* 413 */ "relationalExpression ::= additiveExpression",
 /* 414 */ "relationalExpressionX ::= EQUAL additiveExpression",
 /* 415 */ "relationalExpressionX ::= NEQUAL additiveExpression",
 /* 416 */ "relationalExpressionX ::= SMALLERTHEN additiveExpression",
 /* 417 */ "relationalExpressionX ::= GREATERTHEN additiveExpression",
 /* 418 */ "relationalExpressionX ::= SMALLERTHENQ additiveExpression",
 /* 419 */ "relationalExpressionX ::= GREATERTHENQ additiveExpression",
 /* 420 */ "relationalExpressionX ::= IN expressionList",
 /* 421 */ "relationalExpressionX ::= NOT IN expressionList",
 /* 422 */ "additiveExpression ::= multiplicativeExpression additiveExpressionX",
 /* 423 */ "additiveExpression ::= multiplicativeExpression",
 /* 424 */ "additiveExpressionX ::= additiveExpressionX numericLiteralPositive additiveExpressionY",
 /* 425 */ "additiveExpressionX ::= additiveExpressionX numericLiteralNegative additiveExpressionY",
 /* 426 */ "additiveExpressionX ::= additiveExpressionX numericLiteralPositive",
 /* 427 */ "additiveExpressionX ::= additiveExpressionX numericLiteralNegative",
 /* 428 */ "additiveExpressionX ::= additiveExpressionX PLUS multiplicativeExpression",
 /* 429 */ "additiveExpressionX ::= additiveExpressionX MINUS multiplicativeExpression",
 /* 430 */ "additiveExpressionX ::= numericLiteralPositive additiveExpressionY",
 /* 431 */ "additiveExpressionX ::= numericLiteralNegative additiveExpressionY",
 /* 432 */ "additiveExpressionX ::= numericLiteralPositive",
 /* 433 */ "additiveExpressionX ::= numericLiteralNegative",
 /* 434 */ "additiveExpressionX ::= PLUS multiplicativeExpression",
 /* 435 */ "additiveExpressionX ::= MINUS multiplicativeExpression",
 /* 436 */ "additiveExpressionY ::= additiveExpressionY STAR unaryExpression",
 /* 437 */ "additiveExpressionY ::= additiveExpressionY SLASH unaryExpression",
 /* 438 */ "additiveExpressionY ::= STAR unaryExpression",
 /* 439 */ "additiveExpressionY ::= SLASH unaryExpression",
 /* 440 */ "multiplicativeExpression ::= unaryExpression additiveExpressionY",
 /* 441 */ "multiplicativeExpression ::= unaryExpression",
 /* 442 */ "unaryExpression ::= EXCLAMATION primaryExpression",
 /* 443 */ "unaryExpression ::= PLUS primaryExpression",
 /* 444 */ "unaryExpression ::= MINUS primaryExpression",
 /* 445 */ "unaryExpression ::= primaryExpression",
 /* 446 */ "primaryExpression ::= LPARENTHESE expression RPARENTHESE",
 /* 447 */ "primaryExpression ::= builtInCall",
 /* 448 */ "primaryExpression ::= iri",
 /* 449 */ "primaryExpression ::= functionCall",
 /* 450 */ "primaryExpression ::= rdfLiteral",
 /* 451 */ "primaryExpression ::= numericLiteral",
 /* 452 */ "primaryExpression ::= booleanLiteral",
 /* 453 */ "primaryExpression ::= var",
 /* 454 */ "builtInCall ::= aggregate",
 /* 455 */ "builtInCall ::= regexExpression",
 /* 456 */ "builtInCall ::= existsFunc",
 /* 457 */ "builtInCall ::= notExistsFunc",
 /* 458 */ "builtInCall ::= STR LPARENTHESE expression RPARENTHESE",
 /* 459 */ "builtInCall ::= LANG LPARENTHESE expression RPARENTHESE",
 /* 460 */ "builtInCall ::= LANGMATCHES LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 461 */ "builtInCall ::= DATATYPE LPARENTHESE expression RPARENTHESE",
 /* 462 */ "builtInCall ::= BOUND LPARENTHESE var RPARENTHESE",
 /* 463 */ "builtInCall ::= URI LPARENTHESE expression RPARENTHESE",
 /* 464 */ "builtInCall ::= BNODE LPARENTHESE expression RPARENTHESE",
 /* 465 */ "builtInCall ::= BNODE NIL",
 /* 466 */ "builtInCall ::= RAND NIL",
 /* 467 */ "builtInCall ::= ABS LPARENTHESE expression RPARENTHESE",
 /* 468 */ "builtInCall ::= CEIL LPARENTHESE expression RPARENTHESE",
 /* 469 */ "builtInCall ::= FLOOR LPARENTHESE expression RPARENTHESE",
 /* 470 */ "builtInCall ::= ROUND LPARENTHESE expression RPARENTHESE",
 /* 471 */ "builtInCall ::= CONCAT expressionList",
 /* 472 */ "builtInCall ::= subStringExpression",
 /* 473 */ "builtInCall ::= STRLEN LPARENTHESE expression RPARENTHESE",
 /* 474 */ "builtInCall ::= strReplaceExpression",
 /* 475 */ "builtInCall ::= UCASE LPARENTHESE expression RPARENTHESE",
 /* 476 */ "builtInCall ::= LCASE LPARENTHESE expression RPARENTHESE",
 /* 477 */ "builtInCall ::= ENCODE_FOR_URI LPARENTHESE expression RPARENTHESE",
 /* 478 */ "builtInCall ::= CONTAINS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 479 */ "builtInCall ::= STRSTARTS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 480 */ "builtInCall ::= STRENDS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 481 */ "builtInCall ::= STBEFORE LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 482 */ "builtInCall ::= STRAFTER LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 483 */ "builtInCall ::= YEAR LPARENTHESE expression RPARENTHESE",
 /* 484 */ "builtInCall ::= MONTH LPARENTHESE expression RPARENTHESE",
 /* 485 */ "builtInCall ::= DAY LPARENTHESE expression RPARENTHESE",
 /* 486 */ "builtInCall ::= HOURS LPARENTHESE expression RPARENTHESE",
 /* 487 */ "builtInCall ::= MINUTES LPARENTHESE expression RPARENTHESE",
 /* 488 */ "builtInCall ::= SECONDS LPARENTHESE expression RPARENTHESE",
 /* 489 */ "builtInCall ::= TIMEZONE LPARENTHESE expression RPARENTHESE",
 /* 490 */ "builtInCall ::= TZ LPARENTHESE expression RPARENTHESE",
 /* 491 */ "builtInCall ::= NOW NIL",
 /* 492 */ "builtInCall ::= UUID NIL",
 /* 493 */ "builtInCall ::= STRUUID NIL",
 /* 494 */ "builtInCall ::= MD5 LPARENTHESE expression RPARENTHESE",
 /* 495 */ "builtInCall ::= SHA1 LPARENTHESE expression RPARENTHESE",
 /* 496 */ "builtInCall ::= SHA256 LPARENTHESE expression RPARENTHESE",
 /* 497 */ "builtInCall ::= SHA384 LPARENTHESE expression RPARENTHESE",
 /* 498 */ "builtInCall ::= SHA512 LPARENTHESE expression RPARENTHESE",
 /* 499 */ "builtInCall ::= COALESCE expressionList",
 /* 500 */ "builtInCall ::= IF LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 501 */ "builtInCall ::= STRLANG LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 502 */ "builtInCall ::= STRDT LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 503 */ "builtInCall ::= SAMETERM LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 504 */ "builtInCall ::= ISIRI LPARENTHESE expression RPARENTHESE",
 /* 505 */ "builtInCall ::= ISURI LPARENTHESE expression RPARENTHESE",
 /* 506 */ "builtInCall ::= ISBLANK LPARENTHESE expression RPARENTHESE",
 /* 507 */ "builtInCall ::= ISLITERAL LPARENTHESE expression RPARENTHESE",
 /* 508 */ "builtInCall ::= ISNUMERIC LPARENTHESE expression RPARENTHESE",
 /* 509 */ "regexExpression ::= REGEX LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 510 */ "regexExpression ::= REGEX LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 511 */ "subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 512 */ "subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 513 */ "strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression COMMA expression RPARENTHESE",
 /* 514 */ "strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 515 */ "existsFunc ::= EXISTS groupGraphPattern",
 /* 516 */ "notExistsFunc ::= NOT EXISTS groupGraphPattern",
 /* 517 */ "aggregate ::= COUNT LPARENTHESE DISTINCT STAR RPARENTHESE",
 /* 518 */ "aggregate ::= COUNT LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 519 */ "aggregate ::= COUNT LPARENTHESE STAR RPARENTHESE",
 /* 520 */ "aggregate ::= COUNT LPARENTHESE expression RPARENTHESE",
 /* 521 */ "aggregate ::= SUM LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 522 */ "aggregate ::= MIN LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 523 */ "aggregate ::= MAX LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 524 */ "aggregate ::= AVG LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 525 */ "aggregate ::= SAMPLE LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 526 */ "aggregate ::= SUM LPARENTHESE expression RPARENTHESE",
 /* 527 */ "aggregate ::= MIN LPARENTHESE expression RPARENTHESE",
 /* 528 */ "aggregate ::= MAX LPARENTHESE expression RPARENTHESE",
 /* 529 */ "aggregate ::= AVG LPARENTHESE expression RPARENTHESE",
 /* 530 */ "aggregate ::= SAMPLE LPARENTHESE expression RPARENTHESE",
 /* 531 */ "aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE",
 /* 532 */ "aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 533 */ "aggregate ::= GROUP_CONCAT LPARENTHESE expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE",
 /* 534 */ "aggregate ::= GROUP_CONCAT LPARENTHESE expression RPARENTHESE",
 /* 535 */ "rdfLiteral ::= string LANGTAG",
 /* 536 */ "rdfLiteral ::= string DHAT iri",
 /* 537 */ "rdfLiteral ::= string",
 /* 538 */ "numericLiteral ::= numericLiteralUnsigned",
 /* 539 */ "numericLiteral ::= numericLiteralPositive",
 /* 540 */ "numericLiteral ::= numericLiteralNegative",
 /* 541 */ "numericLiteralUnsigned ::= INTEGER",
 /* 542 */ "numericLiteralUnsigned ::= DECIMAL",
 /* 543 */ "numericLiteralUnsigned ::= DOUBLE",
 /* 544 */ "numericLiteralPositive ::= INTEGER_POSITIVE",
 /* 545 */ "numericLiteralPositive ::= DECIMAL_POSITIVE",
 /* 546 */ "numericLiteralPositive ::= DOUBLE_POSITIVE",
 /* 547 */ "numericLiteralNegative ::= INTEGER_NEGATIVE",
 /* 548 */ "numericLiteralNegative ::= DECIMAL_NEGATIVE",
 /* 549 */ "numericLiteralNegative ::= DOUBLE_NEGATIVE",
 /* 550 */ "booleanLiteral ::= TRUE",
 /* 551 */ "booleanLiteral ::= FALSE",
 /* 552 */ "string ::= STRING_LITERAL1",
 /* 553 */ "string ::= STRING_LITERAL2",
 /* 554 */ "string ::= STRING_LITERAL_LONG1",
 /* 555 */ "string ::= STRING_LITERAL_LONG2",
 /* 556 */ "iri ::= IRIREF",
 /* 557 */ "iri ::= prefixedName",
 /* 558 */ "prefixedName ::= PNAME_LN",
 /* 559 */ "prefixedName ::= PNAME_NS",
 /* 560 */ "blankNode ::= BLANK_NODE_LABEL",
 /* 561 */ "blankNode ::= ANON",
  );

  public function trace($yyTraceFILE, $yyTracePrompt)
  {
    $this->yyTraceFILE = $yyTraceFILE;
    $this->yyTracePrompt = $yyTracePrompt;

    if ($yyTraceFILE === null)
      $this->yyTracePrompt = null;
    else if ($yyTracePrompt === null)
      $this->yyTraceFILE = null;
  }

  public function yy_token_name($tokenType)
  {
    if (isset(self::$yyTokenName[$tokenType]))
      return self::$yyTokenName[$tokenType];

    return "Unknown";
  }

  private function yy_destructor($yymajor, $yypminor)
  {
    switch ($yymajor)
    {
      default:  
        break;
    }
  }

  private function yy_pop_parser_stack() 
  {
    if ($this->yyidx < 0) 
      return 0;

    $yytos = $this->yystack[$this->yyidx];

    if ($this->yyTraceFILE) 
      fprintf($this->yyTraceFILE,"%sPopping %s\n", $this->yyTracePrompt, self::$yyTokenName[$yytos->major]);

    $this->yy_destructor( $yytos->major, $yytos->minor);
    unset($this->yystack[$this->yyidx]);
    $this->yyidx--;

    return $yytos->major;
  }

  public function __destruct()
  {
    while($this->yyidx >= 0)
      $this->yy_pop_parser_stack();
  }

  private function yy_find_shift_action($iLookAhead) 
  {
    $i = 0;
    $stateno = $this->yystack[$this->yyidx]->stateno;

    if ($stateno > self::YY_SHIFT_MAX || ($i = self::$yy_shift_ofst[$stateno]) == self::YY_SHIFT_USE_DFLT)
      return self::$yy_default[$stateno];

    if ($iLookAhead == self::YYNOCODE)
      return $this->YY_NO_ACTION;

    $i += $iLookAhead;
    if ($i < 0 || $i >= count(self::$yy_action) || self::$yy_lookahead[$i] != $iLookAhead)
    {
      if ($iLookAhead > 0)
      {
        if (isset(self::$yyFallback[$iLookAhead]) && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) 
        {
          if ($this->yyTraceFILE) 
            fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n", $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], self::$yyTokenName[$iFallback]);

          return $this->yy_find_shift_action($iFallback);
        }
        if (defined('ASPPisParser::YYWILDCARD'))
        {
          $j = $i - $iLookAhead + self::YYWILDCARD;
          if ($j >= 0 && $j < count(self::$yy_action) && self::$yy_lookahead[$j] == self::YYWILDCARD)
          {
            if ($this->yyTraceFILE) 
              fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n", $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], self::$yyTokenName[self::YYWILDCARD]);

            return self::$yy_action[$j];
          }
        }
      }

      return self::$yy_default[$stateno];
    }
    else
      return self::$yy_action[$i];
  }

  private function yy_find_reduce_action($stateno, $iLookAhead)
  {
    $i = 0;

    if ($stateno > self::YY_REDUCE_MAX || ($i = self::$yy_reduce_ofst[$stateno]) == self::YY_REDUCE_USE_DFLT)
      return self::$yy_default[$stateno];

    if ($iLookAhead == self::YYNOCODE)
      return $this->YY_NO_ACTION;

    $i += $iLookAhead;
    if ($i < 0 || $i >= count(self::$yy_action) || self::$yy_lookahead[$i] != $iLookAhead)
      return self::$yy_default[$stateno];

    return self::$yy_action[$i];
  }

  private function yy_shift($yyNewState, $yyMajor, $yypMinor)
  {
    $this->yyidx++;

    if (isset($this->yystack[$this->yyidx])) 
    {
      $yytos = $this->yystack[$this->yyidx];
    } 
    else 
    {
      $yytos = new stdClass;
      $this->yystack[$this->yyidx] = $yytos;
    }

    $yytos->stateno = $yyNewState;
    $yytos->major = $yyMajor;
    $yytos->minor = $yypMinor;

    if ($this->yyTraceFILE) 
    {
      fprintf($this->yyTraceFILE,"%sShift %d\n", $this->yyTracePrompt, $yyNewState);
      fprintf($this->yyTraceFILE,"%sStack:", $this->yyTracePrompt);

      for ($i = 1; $i <= $this->yyidx; $i++) 
      {
        $ent = $this->yystack[$i];
        fprintf($this->yyTraceFILE, " %s", self::$yyTokenName[$ent->major]);
      }

      fprintf($this->yyTraceFILE, "\n");
    }
  }

  private function __overflow_dead_code() 
  {
  }

  private static $yyRuleInfo = array(
  165, 1,
  165, 1,
  166, 3,
  166, 3,
  166, 3,
  166, 3,
  166, 2,
  166, 2,
  166, 2,
  166, 2,
  166, 2,
  166, 2,
  166, 2,
  166, 2,
  166, 1,
  166, 1,
  166, 1,
  166, 1,
  168, 3,
  168, 2,
  168, 2,
  168, 1,
  168, 1,
  174, 2,
  174, 1,
  175, 3,
  175, 2,
  176, 4,
  176, 3,
  169, 4,
  169, 3,
  169, 3,
  169, 2,
  178, 2,
  178, 1,
  182, 4,
  182, 3,
  182, 3,
  182, 2,
  177, 3,
  177, 3,
  177, 3,
  177, 3,
  177, 3,
  177, 2,
  177, 2,
  183, 6,
  183, 4,
  183, 2,
  183, 2,
  183, 2,
  183, 2,
  183, 2,
  183, 2,
  183, 5,
  183, 3,
  183, 1,
  183, 1,
  183, 1,
  183, 1,
  183, 1,
  183, 1,
  171, 7,
  171, 6,
  171, 7,
  171, 6,
  171, 6,
  171, 5,
  171, 5,
  171, 4,
  171, 6,
  171, 5,
  171, 6,
  171, 5,
  171, 6,
  171, 5,
  171, 5,
  171, 4,
  172, 5,
  172, 4,
  172, 4,
  172, 4,
  172, 3,
  172, 3,
  172, 3,
  172, 2,
  172, 5,
  172, 4,
  172, 4,
  172, 4,
  172, 3,
  172, 3,
  172, 3,
  172, 2,
  192, 2,
  192, 1,
  173, 4,
  173, 3,
  173, 3,
  173, 2,
  181, 3,
  181, 2,
  179, 2,
  179, 1,
  180, 4,
  180, 3,
  180, 3,
  180, 3,
  180, 3,
  180, 2,
  180, 2,
  180, 2,
  180, 2,
  180, 2,
  180, 2,
  180, 1,
  180, 1,
  180, 1,
  180, 1,
  196, 3,
  200, 6,
  200, 2,
  200, 2,
  200, 4,
  200, 2,
  200, 5,
  200, 1,
  200, 1,
  200, 3,
  200, 1,
  197, 2,
  201, 4,
  201, 2,
  201, 2,
  201, 3,
  201, 1,
  201, 1,
  198, 3,
  202, 2,
  202, 1,
  203, 4,
  203, 4,
  203, 3,
  203, 1,
  203, 1,
  203, 1,
  199, 2,
  199, 2,
  199, 1,
  199, 1,
  204, 2,
  205, 2,
  170, 2,
  167, 3,
  167, 2,
  167, 2,
  167, 1,
  208, 4,
  208, 3,
  208, 3,
  208, 2,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  207, 1,
  209, 5,
  209, 4,
  209, 3,
  209, 2,
  210, 3,
  210, 2,
  211, 3,
  211, 2,
  215, 3,
  215, 2,
  212, 5,
  212, 4,
  213, 5,
  213, 4,
  214, 5,
  214, 4,
  216, 2,
  217, 2,
  218, 2,
  219, 7,
  219, 6,
  219, 6,
  219, 6,
  219, 5,
  219, 5,
  219, 5,
  219, 4,
  219, 4,
  219, 4,
  219, 3,
  219, 3,
  227, 2,
  227, 1,
  225, 2,
  226, 2,
  228, 3,
  228, 2,
  222, 2,
  222, 1,
  222, 1,
  220, 2,
  221, 1,
  221, 1,
  221, 1,
  221, 1,
  224, 3,
  224, 2,
  223, 3,
  223, 2,
  229, 2,
  229, 1,
  229, 1,
  230, 4,
  230, 3,
  230, 3,
  230, 2,
  230, 3,
  230, 2,
  230, 2,
  230, 1,
  231, 5,
  231, 4,
  191, 4,
  191, 3,
  191, 2,
  191, 1,
  233, 3,
  233, 1,
  195, 3,
  195, 3,
  195, 2,
  234, 2,
  234, 1,
  234, 1,
  236, 4,
  236, 3,
  236, 3,
  236, 2,
  236, 3,
  236, 2,
  236, 2,
  236, 1,
  235, 4,
  235, 3,
  235, 2,
  235, 1,
  239, 3,
  239, 1,
  237, 1,
  237, 1,
  237, 1,
  237, 1,
  237, 1,
  237, 1,
  237, 1,
  237, 1,
  241, 2,
  243, 3,
  244, 4,
  244, 3,
  246, 6,
  247, 2,
  206, 1,
  206, 1,
  248, 4,
  248, 3,
  250, 2,
  250, 1,
  249, 6,
  249, 4,
  249, 3,
  254, 2,
  254, 1,
  252, 2,
  252, 1,
  253, 4,
  253, 2,
  253, 3,
  253, 1,
  251, 1,
  251, 1,
  251, 1,
  251, 1,
  251, 1,
  242, 2,
  240, 2,
  240, 1,
  255, 3,
  255, 2,
  245, 4,
  245, 2,
  245, 2,
  190, 2,
  256, 5,
  256, 4,
  256, 4,
  256, 3,
  256, 1,
  257, 3,
  257, 2,
  258, 4,
  258, 3,
  258, 1,
  232, 2,
  232, 2,
  232, 1,
  260, 3,
  260, 2,
  264, 4,
  264, 2,
  264, 3,
  264, 1,
  262, 1,
  262, 1,
  263, 2,
  263, 1,
  266, 3,
  266, 2,
  238, 2,
  238, 2,
  238, 1,
  267, 3,
  267, 3,
  267, 2,
  267, 2,
  271, 4,
  271, 4,
  271, 2,
  271, 3,
  271, 3,
  271, 1,
  270, 2,
  270, 1,
  273, 3,
  273, 2,
  269, 2,
  269, 1,
  275, 3,
  275, 2,
  274, 2,
  274, 1,
  277, 3,
  277, 2,
  278, 2,
  278, 1,
  276, 2,
  276, 1,
  280, 1,
  280, 1,
  280, 1,
  279, 3,
  279, 2,
  279, 1,
  279, 1,
  281, 4,
  281, 3,
  281, 2,
  281, 1,
  283, 3,
  283, 2,
  282, 2,
  282, 2,
  282, 1,
  282, 1,
  261, 1,
  261, 1,
  285, 3,
  268, 1,
  268, 1,
  287, 3,
  284, 3,
  288, 2,
  288, 1,
  286, 3,
  289, 2,
  289, 1,
  265, 1,
  265, 1,
  272, 1,
  272, 1,
  259, 1,
  259, 1,
  193, 1,
  193, 1,
  185, 1,
  185, 1,
  290, 1,
  290, 1,
  290, 1,
  290, 1,
  290, 1,
  290, 1,
  184, 2,
  184, 1,
  293, 3,
  293, 2,
  292, 2,
  292, 1,
  295, 3,
  295, 2,
  294, 2,
  294, 1,
  297, 2,
  297, 2,
  297, 2,
  297, 2,
  297, 2,
  297, 2,
  297, 2,
  297, 3,
  296, 2,
  296, 1,
  299, 3,
  299, 3,
  299, 2,
  299, 2,
  299, 3,
  299, 3,
  299, 2,
  299, 2,
  299, 1,
  299, 1,
  299, 2,
  299, 2,
  301, 3,
  301, 3,
  301, 2,
  301, 2,
  298, 2,
  298, 1,
  303, 2,
  303, 2,
  303, 2,
  303, 1,
  304, 3,
  304, 1,
  304, 1,
  304, 1,
  304, 1,
  304, 1,
  304, 1,
  304, 1,
  186, 1,
  186, 1,
  186, 1,
  186, 1,
  186, 4,
  186, 4,
  186, 6,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 2,
  186, 2,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 2,
  186, 1,
  186, 4,
  186, 1,
  186, 4,
  186, 4,
  186, 4,
  186, 6,
  186, 6,
  186, 6,
  186, 6,
  186, 6,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 2,
  186, 2,
  186, 2,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 2,
  186, 8,
  186, 6,
  186, 6,
  186, 6,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  186, 4,
  306, 8,
  306, 6,
  309, 8,
  309, 6,
  310, 10,
  310, 8,
  307, 2,
  308, 3,
  305, 5,
  305, 5,
  305, 4,
  305, 4,
  305, 5,
  305, 5,
  305, 5,
  305, 5,
  305, 5,
  305, 4,
  305, 4,
  305, 4,
  305, 4,
  305, 4,
  305, 9,
  305, 5,
  305, 8,
  305, 4,
  187, 2,
  187, 3,
  187, 1,
  188, 1,
  188, 1,
  188, 1,
  312, 1,
  312, 1,
  312, 1,
  300, 1,
  300, 1,
  300, 1,
  302, 1,
  302, 1,
  302, 1,
  189, 1,
  189, 1,
  311, 1,
  311, 1,
  311, 1,
  311, 1,
  194, 1,
  194, 1,
  313, 1,
  313, 1,
  291, 1,
  291, 1,
  );

  private function yy_reduce($yyruleno)
  {
    $yygoto = 0;              /* The next state */
    $yyact = 0;               /* The next action */
    $yygotominor = null;      /* The LHS of the rule reduced */
    $yymsp = null;            /* The top of the parser's stack */
    $yysize = 0;              /* Amount to pop the stack */

    $yymsp = $this->yystack[$this->yyidx];

    if ($this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno]))
      fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt, self::$yyRuleName[$yyruleno]);

    switch($yyruleno)
    {
      case 0: /* start ::= query */
      case 1: /* start ::= update */
#line 138 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $this->main->root = $this->yystack[$this->yyidx + 0]->minor; }
#line 3878 "resource/ASPPisParser.php"
        break;
      case 2: /* query ::= prologue selectQuery valuesClause */
      case 3: /* query ::= prologue constructQuery valuesClause */
      case 4: /* query ::= prologue describeQuery valuesClause */
      case 5: /* query ::= prologue askQuery valuesClause */
#line 141 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 500; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3886 "resource/ASPPisParser.php"
        break;
      case 6: /* query ::= selectQuery valuesClause */
      case 7: /* query ::= constructQuery valuesClause */
      case 8: /* query ::= describeQuery valuesClause */
      case 9: /* query ::= askQuery valuesClause */
      case 10: /* query ::= prologue selectQuery */
      case 11: /* query ::= prologue constructQuery */
      case 12: /* query ::= prologue describeQuery */
      case 13: /* query ::= prologue askQuery */
#line 145 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 500; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3898 "resource/ASPPisParser.php"
        break;
      case 14: /* query ::= selectQuery */
      case 15: /* query ::= constructQuery */
      case 16: /* query ::= describeQuery */
      case 17: /* query ::= askQuery */
#line 153 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor;  $yygotominor->type = 500; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3906 "resource/ASPPisParser.php"
        break;
      case 18: /* prologue ::= prefixDeclX baseDecl prefixDeclX */
#line 158 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3911 "resource/ASPPisParser.php"
        break;
      case 19: /* prologue ::= baseDecl prefixDeclX */
      case 20: /* prologue ::= prefixDeclX baseDecl */
#line 159 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3917 "resource/ASPPisParser.php"
        break;
      case 21: /* prologue ::= baseDecl */
      case 22: /* prologue ::= prefixDeclX */
#line 161 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3923 "resource/ASPPisParser.php"
        break;
      case 23: /* prefixDeclX ::= prefixDeclX prefixDecl */
#line 163 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 502; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3928 "resource/ASPPisParser.php"
        break;
      case 24: /* prefixDeclX ::= prefixDecl */
#line 164 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 502; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3933 "resource/ASPPisParser.php"
        break;
      case 25: /* baseDecl ::= BASE IRIREF DOT */
#line 166 "resource/ASPPisParser.y"
{ $this->base = $this->yystack[$this->yyidx + -1]->minor->value; $yygotominor = new NTToken(); $yygotominor->type = 503; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -2]->minor->value) . ' ' . $this->yystack[$this->yyidx + -1]->minor->value . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3938 "resource/ASPPisParser.php"
        break;
      case 26: /* baseDecl ::= BASE IRIREF */
#line 167 "resource/ASPPisParser.y"
{ $this->base = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor = new NTToken(); $yygotominor->type = 503; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -1]->minor->value) . ' ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3943 "resource/ASPPisParser.php"
        break;
      case 27: /* prefixDecl ::= PREFIX PNAME_NS IRIREF DOT */
#line 169 "resource/ASPPisParser.y"
{ $this->addNS($this->yystack[$this->yyidx + -2]->minor->value, $this->yystack[$this->yyidx + -1]->minor->value); $yygotominor = new NTToken(); $yygotominor->type = 504; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -3]->minor->value) . ' ' . $this->yystack[$this->yyidx + -2]->minor->value . $this->yystack[$this->yyidx + -1]->minor->value . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3948 "resource/ASPPisParser.php"
        break;
      case 28: /* prefixDecl ::= PREFIX PNAME_NS IRIREF */
#line 170 "resource/ASPPisParser.y"
{ $this->addNS($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value); $yygotominor = new NTToken(); $yygotominor->type = 504; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -2]->minor->value) . ' ' . $this->yystack[$this->yyidx + -1]->minor->value . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3953 "resource/ASPPisParser.php"
        break;
      case 29: /* selectQuery ::= selectClause datasetClauseX whereclause solutionModifier */
#line 172 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3958 "resource/ASPPisParser.php"
        break;
      case 30: /* selectQuery ::= selectClause datasetClauseX whereclause */
#line 173 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3963 "resource/ASPPisParser.php"
        break;
      case 31: /* selectQuery ::= selectClause whereclause solutionModifier */
#line 174 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3968 "resource/ASPPisParser.php"
        break;
      case 32: /* selectQuery ::= selectClause whereclause */
#line 175 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3973 "resource/ASPPisParser.php"
        break;
      case 33: /* datasetClauseX ::= datasetClauseX datasetClause */
#line 176 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 506; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3978 "resource/ASPPisParser.php"
        break;
      case 34: /* datasetClauseX ::= datasetClause */
#line 177 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor;  $yygotominor->type = 506;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 3983 "resource/ASPPisParser.php"
        break;
      case 35: /* subSelect ::= selectClause whereclause solutionModifier valuesClause */
#line 180 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3988 "resource/ASPPisParser.php"
        break;
      case 36: /* subSelect ::= selectClause whereclause valuesClause */
      case 37: /* subSelect ::= selectClause whereclause solutionModifier */
#line 181 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3994 "resource/ASPPisParser.php"
        break;
      case 38: /* subSelect ::= selectClause whereclause */
#line 183 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 3999 "resource/ASPPisParser.php"
        break;
      case 39: /* selectClause ::= SELECT DISTINCT selectClauseX */
#line 185 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->query = 'SELECT DISTINCT' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4004 "resource/ASPPisParser.php"
        break;
      case 40: /* selectClause ::= SELECT REDUCED selectClauseX */
#line 186 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->query = 'SELECT REDUCED' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4009 "resource/ASPPisParser.php"
        break;
      case 41: /* selectClause ::= SELECT STAR selectClauseX */
#line 187 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->query = 'SELECT *' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4014 "resource/ASPPisParser.php"
        break;
      case 42: /* selectClause ::= SELECT DISTINCT STAR */
#line 188 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->query = 'SELECT DISTINCT *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4019 "resource/ASPPisParser.php"
        break;
      case 43: /* selectClause ::= SELECT REDUCED STAR */
#line 189 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->query = 'SELECT REDUCED *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4024 "resource/ASPPisParser.php"
        break;
      case 44: /* selectClause ::= SELECT selectClauseX */
#line 190 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->query = 'SELECT ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4029 "resource/ASPPisParser.php"
        break;
      case 45: /* selectClause ::= SELECT STAR */
#line 191 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->query = 'SELECT *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4034 "resource/ASPPisParser.php"
        break;
      case 46: /* selectClauseX ::= selectClauseX LPARENTHESE expression AS var RPARENTHESE */
#line 192 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -5]->minor->ssVars + $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -5]->minor->query . '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4039 "resource/ASPPisParser.php"
        break;
      case 47: /* selectClauseX ::= selectClauseX LPARENTHESE expression RPARENTHESE */
#line 193 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4044 "resource/ASPPisParser.php"
        break;
      case 48: /* selectClauseX ::= selectClauseX builtInCall */
      case 49: /* selectClauseX ::= selectClauseX rdfLiteral */
      case 50: /* selectClauseX ::= selectClauseX numericLiteral */
      case 51: /* selectClauseX ::= selectClauseX booleanLiteral */
      case 53: /* selectClauseX ::= selectClauseX functionCall */
#line 194 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4053 "resource/ASPPisParser.php"
        break;
      case 52: /* selectClauseX ::= selectClauseX var */
#line 198 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4058 "resource/ASPPisParser.php"
        break;
      case 54: /* selectClauseX ::= LPARENTHESE expression AS var RPARENTHESE */
#line 200 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4063 "resource/ASPPisParser.php"
        break;
      case 55: /* selectClauseX ::= LPARENTHESE expression RPARENTHESE */
#line 201 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 509; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4068 "resource/ASPPisParser.php"
        break;
      case 56: /* selectClauseX ::= builtInCall */
      case 57: /* selectClauseX ::= rdfLiteral */
      case 58: /* selectClauseX ::= numericLiteral */
      case 59: /* selectClauseX ::= booleanLiteral */
      case 60: /* selectClauseX ::= var */
      case 61: /* selectClauseX ::= functionCall */
#line 202 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 509; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4078 "resource/ASPPisParser.php"
        break;
      case 62: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause solutionModifier */
#line 209 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -4]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . '{' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4083 "resource/ASPPisParser.php"
        break;
      case 63: /* constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause solutionModifier */
#line 210 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4088 "resource/ASPPisParser.php"
        break;
      case 64: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE solutionModifier */
#line 211 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -5]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . '{' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4093 "resource/ASPPisParser.php"
        break;
      case 65: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE solutionModifier */
#line 212 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . ' WHERE' . PHP_EOL . '{ }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4098 "resource/ASPPisParser.php"
        break;
      case 66: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause solutionModifier */
#line 213 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4103 "resource/ASPPisParser.php"
        break;
      case 67: /* constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause solutionModifier */
#line 214 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4108 "resource/ASPPisParser.php"
        break;
      case 68: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause */
#line 215 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4113 "resource/ASPPisParser.php"
        break;
      case 69: /* constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause */
#line 216 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4118 "resource/ASPPisParser.php"
        break;
      case 70: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause */
#line 217 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4123 "resource/ASPPisParser.php"
        break;
      case 71: /* constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause */
#line 218 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4128 "resource/ASPPisParser.php"
        break;
      case 72: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE */
#line 219 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . 'WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '}'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4133 "resource/ASPPisParser.php"
        break;
      case 73: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE */
#line 220 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -3]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . 'WHERE { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4138 "resource/ASPPisParser.php"
        break;
      case 74: /* constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE solutionModifier */
#line 221 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4143 "resource/ASPPisParser.php"
        break;
      case 75: /* constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE solutionModifier */
#line 222 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE { }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4148 "resource/ASPPisParser.php"
        break;
      case 76: /* constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE */
#line 223 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '}'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4153 "resource/ASPPisParser.php"
        break;
      case 77: /* constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE */
#line 224 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4158 "resource/ASPPisParser.php"
        break;
      case 78: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause solutionModifier */
#line 226 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4163 "resource/ASPPisParser.php"
        break;
      case 79: /* describeQuery ::= DESCRIBE varOrIriX whereclause solutionModifier */
#line 227 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4168 "resource/ASPPisParser.php"
        break;
      case 80: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX solutionModifier */
      case 81: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause */
#line 228 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4174 "resource/ASPPisParser.php"
        break;
      case 82: /* describeQuery ::= DESCRIBE varOrIriX solutionModifier */
      case 83: /* describeQuery ::= DESCRIBE varOrIriX whereclause */
#line 230 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4180 "resource/ASPPisParser.php"
        break;
      case 84: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX */
#line 232 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4185 "resource/ASPPisParser.php"
        break;
      case 85: /* describeQuery ::= DESCRIBE varOrIriX */
#line 233 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4190 "resource/ASPPisParser.php"
        break;
      case 86: /* describeQuery ::= DESCRIBE STAR datasetClauseX whereclause solutionModifier */
#line 234 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4195 "resource/ASPPisParser.php"
        break;
      case 87: /* describeQuery ::= DESCRIBE STAR whereclause solutionModifier */
      case 89: /* describeQuery ::= DESCRIBE STAR datasetClauseX whereclause */
#line 235 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4201 "resource/ASPPisParser.php"
        break;
      case 88: /* describeQuery ::= DESCRIBE STAR datasetClauseX solutionModifier */
#line 236 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4206 "resource/ASPPisParser.php"
        break;
      case 90: /* describeQuery ::= DESCRIBE STAR solutionModifier */
      case 91: /* describeQuery ::= DESCRIBE STAR whereclause */
      case 92: /* describeQuery ::= DESCRIBE STAR datasetClauseX */
#line 238 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4213 "resource/ASPPisParser.php"
        break;
      case 93: /* describeQuery ::= DESCRIBE STAR */
#line 241 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4218 "resource/ASPPisParser.php"
        break;
      case 94: /* varOrIriX ::= varOrIriX varOrIri */
#line 242 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 512; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4223 "resource/ASPPisParser.php"
        break;
      case 95: /* varOrIriX ::= varOrIri */
#line 243 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 512; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4228 "resource/ASPPisParser.php"
        break;
      case 96: /* askQuery ::= ASK datasetClauseX whereclause solutionModifier */
#line 245 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4233 "resource/ASPPisParser.php"
        break;
      case 97: /* askQuery ::= ASK datasetClauseX whereclause */
#line 246 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4238 "resource/ASPPisParser.php"
        break;
      case 98: /* askQuery ::= ASK whereclause solutionModifier */
#line 247 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4243 "resource/ASPPisParser.php"
        break;
      case 99: /* askQuery ::= ASK whereclause */
#line 248 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 513; $yygotominor->query = 'ASK ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4248 "resource/ASPPisParser.php"
        break;
      case 100: /* datasetClause ::= FROM NAMED iri */
#line 250 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 514; $yygotominor->query = 'FROM NAMED ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4253 "resource/ASPPisParser.php"
        break;
      case 101: /* datasetClause ::= FROM iri */
#line 251 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 514; $yygotominor->query = 'FROM ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4258 "resource/ASPPisParser.php"
        break;
      case 102: /* whereclause ::= WHERE groupGraphPattern */
#line 253 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 515; $yygotominor->query = 'WHERE ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4263 "resource/ASPPisParser.php"
        break;
      case 103: /* whereclause ::= groupGraphPattern */
#line 254 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 515; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4268 "resource/ASPPisParser.php"
        break;
      case 104: /* solutionModifier ::= groupClause havingClause orderClause limitOffsetClauses */
#line 256 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4273 "resource/ASPPisParser.php"
        break;
      case 105: /* solutionModifier ::= havingClause orderClause limitOffsetClauses */
#line 257 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4278 "resource/ASPPisParser.php"
        break;
      case 106: /* solutionModifier ::= groupClause orderClause limitOffsetClauses */
      case 107: /* solutionModifier ::= groupClause havingClause limitOffsetClauses */
#line 258 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4284 "resource/ASPPisParser.php"
        break;
      case 108: /* solutionModifier ::= groupClause havingClause orderClause */
#line 260 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor); }
#line 4289 "resource/ASPPisParser.php"
        break;
      case 109: /* solutionModifier ::= groupClause havingClause */
      case 110: /* solutionModifier ::= groupClause orderClause */
      case 111: /* solutionModifier ::= groupClause limitOffsetClauses */
#line 261 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4296 "resource/ASPPisParser.php"
        break;
      case 112: /* solutionModifier ::= orderClause limitOffsetClauses */
      case 113: /* solutionModifier ::= havingClause limitOffsetClauses */
      case 114: /* solutionModifier ::= havingClause orderClause */
#line 264 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4303 "resource/ASPPisParser.php"
        break;
      case 115: /* solutionModifier ::= groupClause */
      case 116: /* solutionModifier ::= havingClause */
      case 117: /* solutionModifier ::= orderClause */
      case 118: /* solutionModifier ::= limitOffsetClauses */
#line 267 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 516; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4311 "resource/ASPPisParser.php"
        break;
      case 119: /* groupClause ::= GROUP BY groupConditionX */
#line 272 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 517; $yygotominor->query = 'GROUP BY ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4316 "resource/ASPPisParser.php"
        break;
      case 120: /* groupConditionX ::= groupConditionX LPARENTHESE expression AS var RPARENTHESE */
#line 273 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -5]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -5]->minor->query . ' (' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4321 "resource/ASPPisParser.php"
        break;
      case 121: /* groupConditionX ::= groupConditionX builtInCall */
      case 124: /* groupConditionX ::= groupConditionX var */
#line 274 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4327 "resource/ASPPisParser.php"
        break;
      case 122: /* groupConditionX ::= groupConditionX functionCall */
#line 275 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->hasFNC = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4332 "resource/ASPPisParser.php"
        break;
      case 123: /* groupConditionX ::= groupConditionX LPARENTHESE expression RPARENTHESE */
#line 276 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4337 "resource/ASPPisParser.php"
        break;
      case 125: /* groupConditionX ::= LPARENTHESE expression AS var RPARENTHESE */
#line 278 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4342 "resource/ASPPisParser.php"
        break;
      case 126: /* groupConditionX ::= builtInCall */
      case 129: /* groupConditionX ::= var */
#line 279 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 518; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4348 "resource/ASPPisParser.php"
        break;
      case 127: /* groupConditionX ::= functionCall */
#line 280 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 518; $yygotominor->hasFNC = true; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4353 "resource/ASPPisParser.php"
        break;
      case 128: /* groupConditionX ::= LPARENTHESE expression RPARENTHESE */
#line 281 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 518; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4358 "resource/ASPPisParser.php"
        break;
      case 130: /* havingClause ::= HAVING constraintX */
#line 284 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 519; $yygotominor->query = 'HAVING ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4363 "resource/ASPPisParser.php"
        break;
      case 131: /* constraintX ::= constraintX LPARENTHESE expression RPARENTHESE */
#line 285 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' (' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4368 "resource/ASPPisParser.php"
        break;
      case 132: /* constraintX ::= constraintX builtInCall */
#line 286 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4373 "resource/ASPPisParser.php"
        break;
      case 133: /* constraintX ::= constraintX functionCall */
#line 287 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->hasFNC = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4378 "resource/ASPPisParser.php"
        break;
      case 134: /* constraintX ::= LPARENTHESE expression RPARENTHESE */
#line 288 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 520; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4383 "resource/ASPPisParser.php"
        break;
      case 135: /* constraintX ::= builtInCall */
#line 289 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 520; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4388 "resource/ASPPisParser.php"
        break;
      case 136: /* constraintX ::= functionCall */
#line 290 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 520; $yygotominor->hasFNC = true;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4393 "resource/ASPPisParser.php"
        break;
      case 137: /* orderClause ::= ORDER BY orderConditionX */
#line 292 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 521; $yygotominor->query = 'ORDER BY ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4398 "resource/ASPPisParser.php"
        break;
      case 138: /* orderConditionX ::= orderConditionX orderCondition */
#line 293 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 522; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4403 "resource/ASPPisParser.php"
        break;
      case 139: /* orderConditionX ::= orderCondition */
#line 294 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 522; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4408 "resource/ASPPisParser.php"
        break;
      case 140: /* orderCondition ::= ASC LPARENTHESE expression RPARENTHESE */
#line 296 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = 'ASC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4413 "resource/ASPPisParser.php"
        break;
      case 141: /* orderCondition ::= DESC LPARENTHESE expression RPARENTHESE */
#line 297 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = 'DESC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4418 "resource/ASPPisParser.php"
        break;
      case 142: /* orderCondition ::= LPARENTHESE expression RPARENTHESE */
#line 298 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4423 "resource/ASPPisParser.php"
        break;
      case 143: /* orderCondition ::= builtInCall */
      case 144: /* orderCondition ::= functionCall */
      case 145: /* orderCondition ::= var */
#line 299 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 523; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4430 "resource/ASPPisParser.php"
        break;
      case 146: /* limitOffsetClauses ::= limitClause offsetClause */
      case 147: /* limitOffsetClauses ::= offsetClause limitClause */
#line 303 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 524; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4436 "resource/ASPPisParser.php"
        break;
      case 148: /* limitOffsetClauses ::= limitClause */
      case 149: /* limitOffsetClauses ::= offsetClause */
#line 305 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 524; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4442 "resource/ASPPisParser.php"
        break;
      case 150: /* limitClause ::= LIMIT INTEGER */
#line 308 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 525; $yygotominor->query = 'LIMIT ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4447 "resource/ASPPisParser.php"
        break;
      case 151: /* offsetClause ::= OFFSET INTEGER */
#line 310 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 526; $yygotominor->query = 'OFFSET ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4452 "resource/ASPPisParser.php"
        break;
      case 152: /* valuesClause ::= VALUES dataBlock */
#line 312 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 527; $yygotominor->query = 'VALUES ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4457 "resource/ASPPisParser.php"
        break;
      case 153: /* update ::= prologue update1 updateX */
#line 314 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4462 "resource/ASPPisParser.php"
        break;
      case 154: /* update ::= update1 updateX */
#line 315 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4467 "resource/ASPPisParser.php"
        break;
      case 155: /* update ::= prologue update1 */
#line 316 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4472 "resource/ASPPisParser.php"
        break;
      case 156: /* update ::= update1 */
#line 317 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 528; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4477 "resource/ASPPisParser.php"
        break;
      case 157: /* updateX ::= updateX SEMICOLON prologue update1 */
#line 318 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' ;' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4482 "resource/ASPPisParser.php"
        break;
      case 158: /* updateX ::= updateX SEMICOLON update1 */
#line 319 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ;' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4487 "resource/ASPPisParser.php"
        break;
      case 159: /* updateX ::= SEMICOLON prologue update1 */
#line 320 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ';' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4492 "resource/ASPPisParser.php"
        break;
      case 160: /* updateX ::= SEMICOLON update1 */
#line 321 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 529; $yygotominor->query = ';' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4497 "resource/ASPPisParser.php"
        break;
      case 161: /* update1 ::= load */
      case 162: /* update1 ::= clear */
      case 163: /* update1 ::= drop */
      case 164: /* update1 ::= add */
      case 165: /* update1 ::= move */
      case 166: /* update1 ::= copy */
      case 167: /* update1 ::= create */
      case 168: /* update1 ::= insertData */
      case 169: /* update1 ::= deleteData */
      case 170: /* update1 ::= deletewhere */
      case 171: /* update1 ::= modify */
#line 323 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 530; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4512 "resource/ASPPisParser.php"
        break;
      case 172: /* load ::= LOAD SILENT iri INTO graphRef */
#line 335 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 531; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'LOAD SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' INTO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4517 "resource/ASPPisParser.php"
        break;
      case 173: /* load ::= LOAD iri INTO graphRef */
#line 336 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 531; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'LOAD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' INTO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4522 "resource/ASPPisParser.php"
        break;
      case 174: /* load ::= LOAD SILENT iri */
#line 337 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 531; $yygotominor->query = 'LOAD SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4527 "resource/ASPPisParser.php"
        break;
      case 175: /* load ::= LOAD iri */
#line 338 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 531; $yygotominor->query = 'LOAD ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4532 "resource/ASPPisParser.php"
        break;
      case 176: /* clear ::= CLEAR SILENT graphRefAll */
#line 340 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 532; $yygotominor->query = 'CLEAR SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4537 "resource/ASPPisParser.php"
        break;
      case 177: /* clear ::= CLEAR graphRefAll */
#line 341 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 532; $yygotominor->query = 'CLEAR ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4542 "resource/ASPPisParser.php"
        break;
      case 178: /* drop ::= DROP SILENT graphRefAll */
#line 343 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 533; $yygotominor->query = 'DROP SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4547 "resource/ASPPisParser.php"
        break;
      case 179: /* drop ::= DROP graphRefAll */
#line 344 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 533; $yygotominor->query = 'DROP ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4552 "resource/ASPPisParser.php"
        break;
      case 180: /* create ::= CREATE SILENT graphRef */
#line 346 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 534; $yygotominor->query = 'CREATE SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4557 "resource/ASPPisParser.php"
        break;
      case 181: /* create ::= CREATE graphRef */
#line 347 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 534; $yygotominor->query = 'CREATE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4562 "resource/ASPPisParser.php"
        break;
      case 182: /* add ::= ADD SILENT graphOrDefault TO graphOrDefault */
#line 349 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 535; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ADD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4567 "resource/ASPPisParser.php"
        break;
      case 183: /* add ::= ADD graphOrDefault TO graphOrDefault */
#line 350 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 535; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ADD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4572 "resource/ASPPisParser.php"
        break;
      case 184: /* move ::= MOVE SILENT graphOrDefault TO graphOrDefault */
#line 352 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 536; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MOVE SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4577 "resource/ASPPisParser.php"
        break;
      case 185: /* move ::= MOVE graphOrDefault TO graphOrDefault */
#line 353 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 536; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MOVE ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4582 "resource/ASPPisParser.php"
        break;
      case 186: /* copy ::= COPY SILENT graphOrDefault TO graphOrDefault */
#line 355 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 537; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COPY SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4587 "resource/ASPPisParser.php"
        break;
      case 187: /* copy ::= COPY graphOrDefault TO graphOrDefault */
#line 356 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 537; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COPY ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4592 "resource/ASPPisParser.php"
        break;
      case 188: /* insertData ::= INSERTDATA quadData */
#line 358 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 538; $yygotominor->query = 'DELETE DATA ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4597 "resource/ASPPisParser.php"
        break;
      case 189: /* deleteData ::= DELETEDATA quadData */
#line 360 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){ throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE DATA" . $this->yystack[$this->yyidx + 0]->minor->query); } $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 539; $yygotominor->query = 'DELETE DATA ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4602 "resource/ASPPisParser.php"
        break;
      case 190: /* deletewhere ::= DELETEWHERE quadPattern */
#line 362 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE WHERE" . $this->yystack[$this->yyidx + 0]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 540; $yygotominor->query = 'DELETE WHERE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4607 "resource/ASPPisParser.php"
        break;
      case 191: /* modify ::= WITH iri deleteClause insertClause usingClauseX WHERE groupGraphPattern */
#line 364 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -5]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4612 "resource/ASPPisParser.php"
        break;
      case 192: /* modify ::= WITH iri deleteClause usingClauseX WHERE groupGraphPattern */
      case 193: /* modify ::= WITH iri insertClause usingClauseX WHERE groupGraphPattern */
      case 194: /* modify ::= WITH iri deleteClause insertClause WHERE groupGraphPattern */
#line 365 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4619 "resource/ASPPisParser.php"
        break;
      case 195: /* modify ::= WITH iri deleteClause WHERE groupGraphPattern */
      case 196: /* modify ::= WITH iri insertClause WHERE groupGraphPattern */
#line 368 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4625 "resource/ASPPisParser.php"
        break;
      case 197: /* modify ::= deleteClause insertClause usingClauseX WHERE groupGraphPattern */
#line 370 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4630 "resource/ASPPisParser.php"
        break;
      case 198: /* modify ::= deleteClause usingClauseX WHERE groupGraphPattern */
      case 199: /* modify ::= insertClause usingClauseX WHERE groupGraphPattern */
      case 200: /* modify ::= deleteClause insertClause WHERE groupGraphPattern */
#line 371 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4637 "resource/ASPPisParser.php"
        break;
      case 201: /* modify ::= deleteClause WHERE groupGraphPattern */
#line 374 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4642 "resource/ASPPisParser.php"
        break;
      case 202: /* modify ::= insertClause WHERE groupGraphPattern */
#line 375 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4647 "resource/ASPPisParser.php"
        break;
      case 203: /* usingClauseX ::= usingClauseX usingClause */
#line 376 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 542; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4652 "resource/ASPPisParser.php"
        break;
      case 204: /* usingClauseX ::= usingClause */
#line 377 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 542; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4657 "resource/ASPPisParser.php"
        break;
      case 205: /* deleteClause ::= DELETE quadPattern */
#line 379 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE" . $this->yystack[$this->yyidx + 0]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 543; $yygotominor->query = 'DELETE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4662 "resource/ASPPisParser.php"
        break;
      case 206: /* insertClause ::= INSERT quadPattern */
#line 381 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 544; $yygotominor->query = 'INSERT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4667 "resource/ASPPisParser.php"
        break;
      case 207: /* usingClause ::= USING NAMED iri */
#line 383 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 545; $yygotominor->query = 'USING NAMED ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4672 "resource/ASPPisParser.php"
        break;
      case 208: /* usingClause ::= USING iri */
#line 384 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 545; $yygotominor->query = 'USING ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4677 "resource/ASPPisParser.php"
        break;
      case 209: /* graphOrDefault ::= GRAPH iri */
#line 386 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 546; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4682 "resource/ASPPisParser.php"
        break;
      case 210: /* graphOrDefault ::= DEFAULT */
#line 387 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 546; $yygotominor->query = 'DEFAULT';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4687 "resource/ASPPisParser.php"
        break;
      case 211: /* graphOrDefault ::= iri */
#line 388 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 546;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4692 "resource/ASPPisParser.php"
        break;
      case 212: /* graphRef ::= GRAPH iri */
#line 390 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 547; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4697 "resource/ASPPisParser.php"
        break;
      case 213: /* graphRefAll ::= graphRef */
#line 392 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 548; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4702 "resource/ASPPisParser.php"
        break;
      case 214: /* graphRefAll ::= DEFAULT */
#line 393 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'DEFAULT';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4707 "resource/ASPPisParser.php"
        break;
      case 215: /* graphRefAll ::= NAMED */
#line 394 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'NAMED';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4712 "resource/ASPPisParser.php"
        break;
      case 216: /* graphRefAll ::= ALL */
#line 395 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'ALL';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4717 "resource/ASPPisParser.php"
        break;
      case 217: /* quadPattern ::= LBRACE quads RBRACE */
#line 397 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -2]->minor; $yygotominor->type = 549; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4722 "resource/ASPPisParser.php"
        break;
      case 218: /* quadPattern ::= LBRACE RBRACE */
#line 398 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 549; $yygotominor->query = '{ }';$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4727 "resource/ASPPisParser.php"
        break;
      case 219: /* quadData ::= LBRACE quads RBRACE */
#line 400 "resource/ASPPisParser.y"
{ if(!empty($this->yystack[$this->yyidx + -1]->minor->vars)){throw new Exception("QuadPattern arent allowed to contain variables: " . $this->yystack[$this->yyidx + -1]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 550; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4732 "resource/ASPPisParser.php"
        break;
      case 220: /* quadData ::= LBRACE RBRACE */
#line 401 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 550; $yygotominor->query = '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4737 "resource/ASPPisParser.php"
        break;
      case 221: /* quads ::= triplesTemplate quadsX */
#line 403 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 551; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4742 "resource/ASPPisParser.php"
        break;
      case 222: /* quads ::= triplesTemplate */
      case 223: /* quads ::= quadsX */
#line 404 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 551; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4748 "resource/ASPPisParser.php"
        break;
      case 224: /* quadsX ::= quadsX quadsNotTriples DOT triplesTemplate */
#line 406 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4753 "resource/ASPPisParser.php"
        break;
      case 225: /* quadsX ::= quadsX quadsNotTriples triplesTemplate */
#line 407 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4758 "resource/ASPPisParser.php"
        break;
      case 226: /* quadsX ::= quadsX quadsNotTriples DOT */
#line 408 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4763 "resource/ASPPisParser.php"
        break;
      case 227: /* quadsX ::= quadsX quadsNotTriples */
      case 229: /* quadsX ::= quadsNotTriples triplesTemplate */
#line 409 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4769 "resource/ASPPisParser.php"
        break;
      case 228: /* quadsX ::= quadsNotTriples DOT triplesTemplate */
#line 410 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4774 "resource/ASPPisParser.php"
        break;
      case 230: /* quadsX ::= quadsNotTriples DOT */
#line 412 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 552; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .';$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4779 "resource/ASPPisParser.php"
        break;
      case 231: /* quadsX ::= quadsNotTriples */
#line 413 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 552; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4784 "resource/ASPPisParser.php"
        break;
      case 232: /* quadsNotTriples ::= GRAPH varOrIri LBRACE triplesTemplate RBRACE */
#line 415 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 553; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . ' { ' .  PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4789 "resource/ASPPisParser.php"
        break;
      case 233: /* quadsNotTriples ::= GRAPH varOrIri LBRACE RBRACE */
#line 416 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 553; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -2]->minor->query . ' { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4794 "resource/ASPPisParser.php"
        break;
      case 234: /* triplesTemplate ::= triplesSameSubject DOT triplesTemplateX DOT */
#line 418 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4799 "resource/ASPPisParser.php"
        break;
      case 235: /* triplesTemplate ::= triplesSameSubject DOT triplesTemplateX */
#line 419 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4804 "resource/ASPPisParser.php"
        break;
      case 236: /* triplesTemplate ::= triplesSameSubject DOT */
#line 420 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4809 "resource/ASPPisParser.php"
        break;
      case 237: /* triplesTemplate ::= triplesSameSubject */
#line 421 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4814 "resource/ASPPisParser.php"
        break;
      case 238: /* triplesTemplateX ::= triplesTemplateX DOT triplesSameSubject */
#line 422 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 555; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4819 "resource/ASPPisParser.php"
        break;
      case 239: /* triplesTemplateX ::= triplesSameSubject */
#line 423 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 555; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4824 "resource/ASPPisParser.php"
        break;
      case 240: /* groupGraphPattern ::= LBRACE groupGraphPatternSub RBRACE */
      case 241: /* groupGraphPattern ::= LBRACE subSelect RBRACE */
#line 425 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 556; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4830 "resource/ASPPisParser.php"
        break;
      case 242: /* groupGraphPattern ::= LBRACE RBRACE */
#line 427 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 556; $yygotominor->query = '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4835 "resource/ASPPisParser.php"
        break;
      case 243: /* groupGraphPatternSub ::= triplesBlock groupGraphPatternSubX */
#line 429 "resource/ASPPisParser.y"
{ if(!empty($this->yystack[$this->yyidx + 0]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->bindVar, $this->yystack[$this->yyidx + -1]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 557; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4840 "resource/ASPPisParser.php"
        break;
      case 244: /* groupGraphPatternSub ::= triplesBlock */
      case 245: /* groupGraphPatternSub ::= groupGraphPatternSubX */
#line 430 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 557;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4846 "resource/ASPPisParser.php"
        break;
      case 246: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT triplesBlock */
#line 432 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -3]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} else if(!empty($this->yystack[$this->yyidx + -2]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->bindVar, $this->yystack[$this->yyidx + -3]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -3]->minor->bindVar + $this->yystack[$this->yyidx + -2]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4851 "resource/ASPPisParser.php"
        break;
      case 247: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples triplesBlock */
#line 433 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} else if(!empty($this->yystack[$this->yyidx + -1]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->bindVar, $this->yystack[$this->yyidx + -2]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -2]->minor->bindVar + $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4856 "resource/ASPPisParser.php"
        break;
      case 248: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT */
#line 434 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} else if(!empty($this->yystack[$this->yyidx + -1]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->bindVar, $this->yystack[$this->yyidx + -2]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -2]->minor->bindVar + $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4861 "resource/ASPPisParser.php"
        break;
      case 249: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples */
#line 435 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} else if(!empty($this->yystack[$this->yyidx + 0]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->bindVar, $this->yystack[$this->yyidx + -1]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -1]->minor->bindVar + $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4866 "resource/ASPPisParser.php"
        break;
      case 250: /* groupGraphPatternSubX ::= graphPatternNotTriples DOT triplesBlock */
#line 436 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4871 "resource/ASPPisParser.php"
        break;
      case 251: /* groupGraphPatternSubX ::= graphPatternNotTriples triplesBlock */
#line 437 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4876 "resource/ASPPisParser.php"
        break;
      case 252: /* groupGraphPatternSubX ::= graphPatternNotTriples DOT */
#line 438 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4881 "resource/ASPPisParser.php"
        break;
      case 253: /* groupGraphPatternSubX ::= graphPatternNotTriples */
#line 439 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4886 "resource/ASPPisParser.php"
        break;
      case 254: /* triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX DOT */
#line 441 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4891 "resource/ASPPisParser.php"
        break;
      case 255: /* triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX */
#line 442 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4896 "resource/ASPPisParser.php"
        break;
      case 256: /* triplesBlock ::= triplesSameSubjectPath DOT */
#line 443 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4901 "resource/ASPPisParser.php"
        break;
      case 257: /* triplesBlock ::= triplesSameSubjectPath */
#line 444 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4906 "resource/ASPPisParser.php"
        break;
      case 258: /* triplesBlockX ::= triplesBlockX DOT triplesSameSubjectPath */
#line 445 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 560; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4911 "resource/ASPPisParser.php"
        break;
      case 259: /* triplesBlockX ::= triplesSameSubjectPath */
#line 446 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 560; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4916 "resource/ASPPisParser.php"
        break;
      case 260: /* graphPatternNotTriples ::= groupOrUnionGraphPattern */
      case 261: /* graphPatternNotTriples ::= optionalGraphPattern */
      case 262: /* graphPatternNotTriples ::= minusGraphPattern */
      case 263: /* graphPatternNotTriples ::= graphGraphPattern */
      case 264: /* graphPatternNotTriples ::= serviceGraphPattern */
      case 265: /* graphPatternNotTriples ::= filter */
#line 448 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4926 "resource/ASPPisParser.php"
        break;
      case 266: /* graphPatternNotTriples ::= bind */
#line 454 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4931 "resource/ASPPisParser.php"
        break;
      case 267: /* graphPatternNotTriples ::= inlineData */
#line 455 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4936 "resource/ASPPisParser.php"
        break;
      case 268: /* optionalGraphPattern ::= OPTIONAL groupGraphPattern */
#line 457 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 562; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'OPTIONAL ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4941 "resource/ASPPisParser.php"
        break;
      case 269: /* graphGraphPattern ::= GRAPH varOrIri groupGraphPattern */
#line 459 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 563; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4946 "resource/ASPPisParser.php"
        break;
      case 270: /* serviceGraphPattern ::= SERVICE SILENT varOrIri groupGraphPattern */
#line 461 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 564; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SERVICE SILENT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4951 "resource/ASPPisParser.php"
        break;
      case 271: /* serviceGraphPattern ::= SERVICE varOrIri groupGraphPattern */
#line 462 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 564; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SERVICE ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4956 "resource/ASPPisParser.php"
        break;
      case 272: /* bind ::= BIND LPARENTHESE expression AS var RPARENTHESE */
#line 464 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 565; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->ssVars += $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->bindVar[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4961 "resource/ASPPisParser.php"
        break;
      case 273: /* inlineData ::= VALUES dataBlock */
#line 466 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 566; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4966 "resource/ASPPisParser.php"
        break;
      case 274: /* dataBlock ::= inlineDataOneVar */
      case 275: /* dataBlock ::= inlineDataFull */
#line 468 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 567; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4972 "resource/ASPPisParser.php"
        break;
      case 276: /* inlineDataOneVar ::= var LBRACE dataBlockValueX RBRACE */
#line 471 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 568; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' { ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4977 "resource/ASPPisParser.php"
        break;
      case 277: /* inlineDataOneVar ::= var LBRACE RBRACE */
#line 472 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 568; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4982 "resource/ASPPisParser.php"
        break;
      case 278: /* dataBlockValueX ::= dataBlockValueX dataBlockValue */
#line 473 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 569; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count + 1; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4987 "resource/ASPPisParser.php"
        break;
      case 279: /* dataBlockValueX ::= dataBlockValue */
#line 474 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 569; $yygotominor->count = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4992 "resource/ASPPisParser.php"
        break;
      case 280: /* inlineDataFull ::= LPARENTHESE varX RPARENTHESE LBRACE inlineDataFullX RBRACE */
#line 476 "resource/ASPPisParser.y"
{if($this->yystack[$this->yyidx + -1]->minor->count > 0 ){if($this->yystack[$this->yyidx + -4]->minor->count == $this->yystack[$this->yyidx + -1]->minor->count){ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -4]->minor->query . ' ) {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' }';}else{throw new Exception("Different Amount of Variables and Values for Value Clause : " . $this->yystack[$this->yyidx + -4]->minor->query . ' and ' . $this->yystack[$this->yyidx + -1]->minor->query);}}else{$yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -4]->minor->query . ' ) {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' }';}$yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4997 "resource/ASPPisParser.php"
        break;
      case 281: /* inlineDataFull ::= NIL LBRACE nilX RBRACE */
#line 477 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->query = '( ) { ' . $this->yystack[$this->yyidx + -1]->minor->query . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5002 "resource/ASPPisParser.php"
        break;
      case 282: /* inlineDataFull ::= NIL LBRACE RBRACE */
#line 478 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->query = '( ) { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5007 "resource/ASPPisParser.php"
        break;
      case 283: /* nilX ::= nilX NIL */
#line 479 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 571; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5012 "resource/ASPPisParser.php"
        break;
      case 284: /* nilX ::= NIL */
#line 480 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 571; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5017 "resource/ASPPisParser.php"
        break;
      case 285: /* varX ::= varX var */
#line 481 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 572; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count + 1; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5022 "resource/ASPPisParser.php"
        break;
      case 286: /* varX ::= var */
#line 482 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 572; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->count = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5027 "resource/ASPPisParser.php"
        break;
      case 287: /* inlineDataFullX ::= inlineDataFullX LPARENTHESE dataBlockValueX RPARENTHESE */
#line 483 "resource/ASPPisParser.y"
{if($this->yystack[$this->yyidx + -3]->minor->count > 0 ){if($this->yystack[$this->yyidx + -3]->minor->count == $this->yystack[$this->yyidx + -1]->minor->count){ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -3]->minor->count; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';}else{throw new Exception("Different Amount of Values for Value Clause : " . $this->yystack[$this->yyidx + -3]->minor->query . ' and ' . $this->yystack[$this->yyidx + -2]->minor->query);}}else{$yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';}$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5032 "resource/ASPPisParser.php"
        break;
      case 288: /* inlineDataFullX ::= inlineDataFullX NIL */
#line 484 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5037 "resource/ASPPisParser.php"
        break;
      case 289: /* inlineDataFullX ::= LPARENTHESE dataBlockValueX RPARENTHESE */
#line 485 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5042 "resource/ASPPisParser.php"
        break;
      case 290: /* inlineDataFullX ::= NIL */
#line 486 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5047 "resource/ASPPisParser.php"
        break;
      case 291: /* dataBlockValue ::= iri */
      case 292: /* dataBlockValue ::= rdfLiteral */
      case 293: /* dataBlockValue ::= numericLiteral */
      case 294: /* dataBlockValue ::= booleanLiteral */
#line 488 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 574; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5055 "resource/ASPPisParser.php"
        break;
      case 295: /* dataBlockValue ::= UNDEF */
#line 492 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 574; $yygotominor->query = 'UNDEF'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5060 "resource/ASPPisParser.php"
        break;
      case 296: /* minusGraphPattern ::= SMINUS groupGraphPattern */
#line 494 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 575; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MINUS ' . PHP_EOL .  $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5065 "resource/ASPPisParser.php"
        break;
      case 297: /* groupOrUnionGraphPattern ::= groupGraphPattern groupOrUnionGraphPatternX */
#line 496 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 576; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5070 "resource/ASPPisParser.php"
        break;
      case 298: /* groupOrUnionGraphPattern ::= groupGraphPattern */
#line 497 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 576; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5075 "resource/ASPPisParser.php"
        break;
      case 299: /* groupOrUnionGraphPatternX ::= groupOrUnionGraphPatternX UNION groupGraphPattern */
#line 498 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 577; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . ' UNION ' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5080 "resource/ASPPisParser.php"
        break;
      case 300: /* groupOrUnionGraphPatternX ::= UNION GroupGraphPattern */
#line 499 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 577; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'UNION ' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5085 "resource/ASPPisParser.php"
        break;
      case 301: /* filter ::= FILTER LPARENTHESE expression RPARENTHESE */
#line 501 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 578; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'FILTER ( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5090 "resource/ASPPisParser.php"
        break;
      case 302: /* filter ::= FILTER builtInCall */
      case 303: /* filter ::= FILTER functionCall */
#line 502 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 578; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'FILTER ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5096 "resource/ASPPisParser.php"
        break;
      case 304: /* functionCall ::= iri argList */
#line 505 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 579; $yygotominor->hasFNC = true; $yygotominor->hasAGG = true; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5101 "resource/ASPPisParser.php"
        break;
      case 305: /* argList ::= LPARENTHESE DISTINCT expression argListX RPARENTHESE */
#line 507 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( DISTINCT' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5106 "resource/ASPPisParser.php"
        break;
      case 306: /* argList ::= LPARENTHESE expression argListX RPARENTHESE */
#line 508 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars +  $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5111 "resource/ASPPisParser.php"
        break;
      case 307: /* argList ::= LPARENTHESE DISTINCT expression RPARENTHESE */
#line 509 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 580; $yygotominor->query = '( DISTINCT' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5116 "resource/ASPPisParser.php"
        break;
      case 308: /* argList ::= LPARENTHESE expression RPARENTHESE */
#line 510 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 580; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5121 "resource/ASPPisParser.php"
        break;
      case 309: /* argList ::= NIL */
#line 511 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->query = '( )' . PHP_EOL; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5126 "resource/ASPPisParser.php"
        break;
      case 310: /* argListX ::= argListX COMMA expression */
#line 512 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 581; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5131 "resource/ASPPisParser.php"
        break;
      case 311: /* argListX ::= COMMA expression */
#line 513 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 581; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5136 "resource/ASPPisParser.php"
        break;
      case 312: /* expressionList ::= LPARENTHESE expression argListX RPARENTHESE */
#line 515 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 582; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5141 "resource/ASPPisParser.php"
        break;
      case 313: /* expressionList ::= LPARENTHESE expression RPARENTHESE */
#line 516 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 582; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5146 "resource/ASPPisParser.php"
        break;
      case 314: /* expressionList ::= NIL */
#line 517 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 582; $yygotominor->query = '( )' . PHP_EOL; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5151 "resource/ASPPisParser.php"
        break;
      case 315: /* triplesSameSubject ::= varOrTerm propertyListNotEmpty */
      case 316: /* triplesSameSubject ::= triplesNode propertyListNotEmpty */
#line 519 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 583; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5157 "resource/ASPPisParser.php"
        break;
      case 317: /* triplesSameSubject ::= triplesNode */
#line 521 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 583; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5162 "resource/ASPPisParser.php"
        break;
      case 318: /* propertyListNotEmpty ::= verb objectList propertyListNotEmptyX */
#line 523 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 584; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5167 "resource/ASPPisParser.php"
        break;
      case 319: /* propertyListNotEmpty ::= verb objectList */
#line 524 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 584; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5172 "resource/ASPPisParser.php"
        break;
      case 320: /* propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON verb objectList */
#line 525 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5177 "resource/ASPPisParser.php"
        break;
      case 321: /* propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON */
#line 526 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query. ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5182 "resource/ASPPisParser.php"
        break;
      case 322: /* propertyListNotEmptyX ::= SEMICOLON verb objectList */
#line 527 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5187 "resource/ASPPisParser.php"
        break;
      case 323: /* propertyListNotEmptyX ::= SEMICOLON */
#line 528 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->query = ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5192 "resource/ASPPisParser.php"
        break;
      case 324: /* verb ::= varOrIri */
#line 530 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 586; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5197 "resource/ASPPisParser.php"
        break;
      case 325: /* verb ::= A */
#line 531 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 586; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5202 "resource/ASPPisParser.php"
        break;
      case 326: /* objectList ::= graphNode objectListX */
#line 533 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 587; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5207 "resource/ASPPisParser.php"
        break;
      case 327: /* objectList ::= graphNode */
#line 534 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 587; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5212 "resource/ASPPisParser.php"
        break;
      case 328: /* objectListX ::= objectListX COMMA graphNode */
#line 535 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 588; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5217 "resource/ASPPisParser.php"
        break;
      case 329: /* objectListX ::= COMMA graphNode */
#line 536 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 588; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5222 "resource/ASPPisParser.php"
        break;
      case 330: /* triplesSameSubjectPath ::= varOrTerm propertyListPathNotEmpty */
      case 331: /* triplesSameSubjectPath ::= triplesNodePath propertyListPathNotEmpty */
#line 538 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 589; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5228 "resource/ASPPisParser.php"
        break;
      case 332: /* triplesSameSubjectPath ::= triplesNodePath */
#line 540 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 589; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5233 "resource/ASPPisParser.php"
        break;
      case 333: /* propertyListPathNotEmpty ::= pathAlternative objectListPath propertyListPathNotEmptyX */
#line 542 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5238 "resource/ASPPisParser.php"
        break;
      case 334: /* propertyListPathNotEmpty ::= var objectListPath propertyListPathNotEmptyX */
#line 543 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5243 "resource/ASPPisParser.php"
        break;
      case 335: /* propertyListPathNotEmpty ::= pathAlternative objectListPath */
#line 544 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5248 "resource/ASPPisParser.php"
        break;
      case 336: /* propertyListPathNotEmpty ::= var objectListPath */
#line 545 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5253 "resource/ASPPisParser.php"
        break;
      case 337: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON pathAlternative objectList */
#line 546 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5258 "resource/ASPPisParser.php"
        break;
      case 338: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON var objectList */
#line 547 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5263 "resource/ASPPisParser.php"
        break;
      case 339: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON */
#line 548 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query. ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5268 "resource/ASPPisParser.php"
        break;
      case 340: /* propertyListPathNotEmptyX ::= SEMICOLON pathAlternative objectList */
#line 549 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5273 "resource/ASPPisParser.php"
        break;
      case 341: /* propertyListPathNotEmptyX ::= SEMICOLON var objectList */
#line 550 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5278 "resource/ASPPisParser.php"
        break;
      case 342: /* propertyListPathNotEmptyX ::= SEMICOLON */
#line 551 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->query = ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5283 "resource/ASPPisParser.php"
        break;
      case 343: /* objectListPath ::= graphNodePath objectListPathX */
#line 553 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 592; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5288 "resource/ASPPisParser.php"
        break;
      case 344: /* objectListPath ::= graphNodePath */
#line 554 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 592; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5293 "resource/ASPPisParser.php"
        break;
      case 345: /* objectListPathX ::= objectListPathX COMMA graphNodePath */
#line 555 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 593; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5298 "resource/ASPPisParser.php"
        break;
      case 346: /* objectListPathX ::= COMMA graphNodePath */
#line 556 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 593; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5303 "resource/ASPPisParser.php"
        break;
      case 347: /* pathAlternative ::= pathSequence pathAlternativeX */
#line 558 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 594; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5308 "resource/ASPPisParser.php"
        break;
      case 348: /* pathAlternative ::= pathSequence */
#line 559 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 594; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5313 "resource/ASPPisParser.php"
        break;
      case 349: /* pathAlternativeX ::= pathAlternativeX VBAR pathSequence */
#line 560 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 595; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5318 "resource/ASPPisParser.php"
        break;
      case 350: /* pathAlternativeX ::= VBAR pathSequence */
#line 561 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 595; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5323 "resource/ASPPisParser.php"
        break;
      case 351: /* pathSequence ::= pathEltOrInverse pathSequenceX */
#line 563 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 596; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5328 "resource/ASPPisParser.php"
        break;
      case 352: /* pathSequence ::= pathEltOrInverse */
#line 564 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 596; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5333 "resource/ASPPisParser.php"
        break;
      case 353: /* pathSequenceX ::= pathSequenceX SLASH pathEltOrInverse */
#line 565 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 597; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '/' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5338 "resource/ASPPisParser.php"
        break;
      case 354: /* pathSequenceX ::= SLASH pathEltOrInverse */
#line 566 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 597; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '/' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5343 "resource/ASPPisParser.php"
        break;
      case 355: /* pathElt ::= pathPrimary pathMod */
#line 568 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 598; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5348 "resource/ASPPisParser.php"
        break;
      case 356: /* pathElt ::= pathPrimary */
#line 569 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 598; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5353 "resource/ASPPisParser.php"
        break;
      case 357: /* pathEltOrInverse ::= HAT pathElt */
#line 571 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 599; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '^' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5358 "resource/ASPPisParser.php"
        break;
      case 358: /* pathEltOrInverse ::= pathElt */
#line 572 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 599; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5363 "resource/ASPPisParser.php"
        break;
      case 359: /* pathMod ::= STAR */
#line 574 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '*'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5368 "resource/ASPPisParser.php"
        break;
      case 360: /* pathMod ::= PLUS */
#line 575 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '+'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5373 "resource/ASPPisParser.php"
        break;
      case 361: /* pathMod ::= QUESTION */
#line 576 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '?'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5378 "resource/ASPPisParser.php"
        break;
      case 362: /* pathPrimary ::= LPARENTHESE pathAlternative RPARENTHESE */
#line 578 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5383 "resource/ASPPisParser.php"
        break;
      case 363: /* pathPrimary ::= EXCLAMATION pathNegatedPropertySet */
#line 579 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '!' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5388 "resource/ASPPisParser.php"
        break;
      case 364: /* pathPrimary ::= A */
#line 580 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5393 "resource/ASPPisParser.php"
        break;
      case 365: /* pathPrimary ::= iri */
#line 581 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5398 "resource/ASPPisParser.php"
        break;
      case 366: /* pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet pathNegatedPropertySetX RPARENTHESE */
#line 583 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5403 "resource/ASPPisParser.php"
        break;
      case 367: /* pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet RPARENTHESE */
#line 584 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5408 "resource/ASPPisParser.php"
        break;
      case 368: /* pathNegatedPropertySet ::= LPARENTHESE RPARENTHESE */
#line 585 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5413 "resource/ASPPisParser.php"
        break;
      case 369: /* pathNegatedPropertySet ::= pathOneInPropertySet */
#line 586 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5418 "resource/ASPPisParser.php"
        break;
      case 370: /* pathNegatedPropertySetX ::= pathNegatedPropertySetX VBAR pathOneInPropertySet */
#line 587 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 603; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5423 "resource/ASPPisParser.php"
        break;
      case 371: /* pathNegatedPropertySetX ::= VBAR pathOneInPropertySet */
#line 588 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 603; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5428 "resource/ASPPisParser.php"
        break;
      case 372: /* pathOneInPropertySet ::= HAT iri */
#line 590 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = '^' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5433 "resource/ASPPisParser.php"
        break;
      case 373: /* pathOneInPropertySet ::= HAT A */
#line 591 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 604; ; $yygotominor->query = '^rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5438 "resource/ASPPisParser.php"
        break;
      case 374: /* pathOneInPropertySet ::= A */
#line 592 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5443 "resource/ASPPisParser.php"
        break;
      case 375: /* pathOneInPropertySet ::= iri */
#line 593 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5448 "resource/ASPPisParser.php"
        break;
      case 376: /* triplesNode ::= collection */
      case 377: /* triplesNode ::= blankNodePropertyList */
#line 595 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 605; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5454 "resource/ASPPisParser.php"
        break;
      case 378: /* blankNodePropertyList ::= LBRACKET propertyListNotEmpty RBRACKET */
#line 598 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 606; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '[ ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ]'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5459 "resource/ASPPisParser.php"
        break;
      case 379: /* triplesNodePath ::= collectionPath */
      case 380: /* triplesNodePath ::= blankNodePropertyListPath */
#line 600 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 607; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5465 "resource/ASPPisParser.php"
        break;
      case 381: /* blankNodePropertyListPath ::= LBRACKET propertyListPathNotEmpty RBRACKET */
#line 603 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 608; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '[ ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ]'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5470 "resource/ASPPisParser.php"
        break;
      case 382: /* collection ::= LPARENTHESE graphNodeX RPARENTHESE */
#line 605 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 609; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5475 "resource/ASPPisParser.php"
        break;
      case 383: /* graphNodeX ::= graphNodeX graphNode */
#line 606 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 610; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5480 "resource/ASPPisParser.php"
        break;
      case 384: /* graphNodeX ::= graphNode */
#line 607 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 610; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5485 "resource/ASPPisParser.php"
        break;
      case 385: /* collectionPath ::= LPARENTHESE graphNodePathX RPARENTHESE */
#line 609 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 611; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5490 "resource/ASPPisParser.php"
        break;
      case 386: /* graphNodePathX ::= graphNodePathX graphNodePath */
#line 610 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 612; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5495 "resource/ASPPisParser.php"
        break;
      case 387: /* graphNodePathX ::= graphNodePath */
#line 611 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 612; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5500 "resource/ASPPisParser.php"
        break;
      case 388: /* graphNode ::= varOrTerm */
      case 389: /* graphNode ::= triplesNode */
#line 613 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 613; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5506 "resource/ASPPisParser.php"
        break;
      case 390: /* graphNodePath ::= varOrTerm */
      case 391: /* graphNodePath ::= triplesNodePath */
#line 616 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 614; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5512 "resource/ASPPisParser.php"
        break;
      case 392: /* varOrTerm ::= var */
#line 619 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 615; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5517 "resource/ASPPisParser.php"
        break;
      case 393: /* varOrTerm ::= graphTerm */
#line 620 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 615; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5522 "resource/ASPPisParser.php"
        break;
      case 394: /* varOrIri ::= var */
#line 622 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 616; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5527 "resource/ASPPisParser.php"
        break;
      case 395: /* varOrIri ::= iri */
#line 623 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 616; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5532 "resource/ASPPisParser.php"
        break;
      case 396: /* var ::= VAR1 */
      case 397: /* var ::= VAR2 */
#line 625 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 617; $yygotominor->vars = array(); $yygotominor->vars[$this->yystack[$this->yyidx + 0]->minor->value] = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5538 "resource/ASPPisParser.php"
        break;
      case 398: /* graphTerm ::= iri */
      case 399: /* graphTerm ::= rdfLiteral */
      case 400: /* graphTerm ::= numericLiteral */
      case 401: /* graphTerm ::= booleanLiteral */
#line 628 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5546 "resource/ASPPisParser.php"
        break;
      case 402: /* graphTerm ::= blankNode */
#line 632 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5551 "resource/ASPPisParser.php"
        break;
      case 403: /* graphTerm ::= NIL */
#line 633 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5556 "resource/ASPPisParser.php"
        break;
      case 404: /* expression ::= conditionalAndExpression conditionalOrExpressionX */
#line 635 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 619; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5561 "resource/ASPPisParser.php"
        break;
      case 405: /* expression ::= conditionalAndExpression */
#line 636 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 619; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor);$yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5566 "resource/ASPPisParser.php"
        break;
      case 406: /* conditionalOrExpressionX ::= conditionalOrExpressionX OR conditionalAndExpression */
#line 637 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 620; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' || ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5571 "resource/ASPPisParser.php"
        break;
      case 407: /* conditionalOrExpressionX ::= OR conditionalAndExpression */
#line 638 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 620; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|| ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5576 "resource/ASPPisParser.php"
        break;
      case 408: /* conditionalAndExpression ::= relationalExpression conditionalAndExpressionX */
#line 640 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 621; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5581 "resource/ASPPisParser.php"
        break;
      case 409: /* conditionalAndExpression ::= relationalExpression */
#line 641 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 621; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5586 "resource/ASPPisParser.php"
        break;
      case 410: /* conditionalAndExpressionX ::= conditionalAndExpressionX AND relationalExpression */
#line 642 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 622; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' && ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5591 "resource/ASPPisParser.php"
        break;
      case 411: /* conditionalAndExpressionX ::= AND relationalExpression */
#line 643 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 622; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '&& ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5596 "resource/ASPPisParser.php"
        break;
      case 412: /* relationalExpression ::= additiveExpression relationalExpressionX */
#line 645 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 623; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5601 "resource/ASPPisParser.php"
        break;
      case 413: /* relationalExpression ::= additiveExpression */
#line 646 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 623; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5606 "resource/ASPPisParser.php"
        break;
      case 414: /* relationalExpressionX ::= EQUAL additiveExpression */
#line 647 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5611 "resource/ASPPisParser.php"
        break;
      case 415: /* relationalExpressionX ::= NEQUAL additiveExpression */
#line 648 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '!= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5616 "resource/ASPPisParser.php"
        break;
      case 416: /* relationalExpressionX ::= SMALLERTHEN additiveExpression */
#line 649 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '< ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5621 "resource/ASPPisParser.php"
        break;
      case 417: /* relationalExpressionX ::= GREATERTHEN additiveExpression */
#line 650 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '> ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5626 "resource/ASPPisParser.php"
        break;
      case 418: /* relationalExpressionX ::= SMALLERTHENQ additiveExpression */
#line 651 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '<= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5631 "resource/ASPPisParser.php"
        break;
      case 419: /* relationalExpressionX ::= GREATERTHENQ additiveExpression */
#line 652 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '>= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5636 "resource/ASPPisParser.php"
        break;
      case 420: /* relationalExpressionX ::= IN expressionList */
#line 653 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'IN' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5641 "resource/ASPPisParser.php"
        break;
      case 421: /* relationalExpressionX ::= NOT IN expressionList */
#line 654 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'NOT IN' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5646 "resource/ASPPisParser.php"
        break;
      case 422: /* additiveExpression ::= multiplicativeExpression additiveExpressionX */
#line 656 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 625; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5651 "resource/ASPPisParser.php"
        break;
      case 423: /* additiveExpression ::= multiplicativeExpression */
#line 657 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 625; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5656 "resource/ASPPisParser.php"
        break;
      case 424: /* additiveExpressionX ::= additiveExpressionX numericLiteralPositive additiveExpressionY */
      case 425: /* additiveExpressionX ::= additiveExpressionX numericLiteralNegative additiveExpressionY */
#line 658 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5662 "resource/ASPPisParser.php"
        break;
      case 426: /* additiveExpressionX ::= additiveExpressionX numericLiteralPositive */
      case 427: /* additiveExpressionX ::= additiveExpressionX numericLiteralNegative */
#line 660 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5668 "resource/ASPPisParser.php"
        break;
      case 428: /* additiveExpressionX ::= additiveExpressionX PLUS multiplicativeExpression */
#line 662 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' + ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5673 "resource/ASPPisParser.php"
        break;
      case 429: /* additiveExpressionX ::= additiveExpressionX MINUS multiplicativeExpression */
#line 663 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' - ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5678 "resource/ASPPisParser.php"
        break;
      case 430: /* additiveExpressionX ::= numericLiteralPositive additiveExpressionY */
      case 431: /* additiveExpressionX ::= numericLiteralNegative additiveExpressionY */
#line 664 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5684 "resource/ASPPisParser.php"
        break;
      case 432: /* additiveExpressionX ::= numericLiteralPositive */
      case 433: /* additiveExpressionX ::= numericLiteralNegative */
#line 666 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5690 "resource/ASPPisParser.php"
        break;
      case 434: /* additiveExpressionX ::= PLUS multiplicativeExpression */
#line 668 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '+ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5695 "resource/ASPPisParser.php"
        break;
      case 435: /* additiveExpressionX ::= MINUS multiplicativeExpression */
#line 669 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '- ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5700 "resource/ASPPisParser.php"
        break;
      case 436: /* additiveExpressionY ::= additiveExpressionY STAR unaryExpression */
#line 670 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' * ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5705 "resource/ASPPisParser.php"
        break;
      case 437: /* additiveExpressionY ::= additiveExpressionY SLASH unaryExpression */
#line 671 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' / ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5710 "resource/ASPPisParser.php"
        break;
      case 438: /* additiveExpressionY ::= STAR unaryExpression */
#line 672 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '* ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5715 "resource/ASPPisParser.php"
        break;
      case 439: /* additiveExpressionY ::= SLASH unaryExpression */
#line 673 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '/ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5720 "resource/ASPPisParser.php"
        break;
      case 440: /* multiplicativeExpression ::= unaryExpression additiveExpressionY */
#line 675 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 628; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5725 "resource/ASPPisParser.php"
        break;
      case 441: /* multiplicativeExpression ::= unaryExpression */
#line 676 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 628; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5730 "resource/ASPPisParser.php"
        break;
      case 442: /* unaryExpression ::= EXCLAMATION primaryExpression */
#line 678 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '! ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5735 "resource/ASPPisParser.php"
        break;
      case 443: /* unaryExpression ::= PLUS primaryExpression */
#line 679 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '+ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5740 "resource/ASPPisParser.php"
        break;
      case 444: /* unaryExpression ::= MINUS primaryExpression */
#line 680 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '- ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5745 "resource/ASPPisParser.php"
        break;
      case 445: /* unaryExpression ::= primaryExpression */
#line 681 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5750 "resource/ASPPisParser.php"
        break;
      case 446: /* primaryExpression ::= LPARENTHESE expression RPARENTHESE */
#line 683 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5755 "resource/ASPPisParser.php"
        break;
      case 447: /* primaryExpression ::= builtInCall */
#line 684 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5760 "resource/ASPPisParser.php"
        break;
      case 448: /* primaryExpression ::= iri */
      case 450: /* primaryExpression ::= rdfLiteral */
      case 451: /* primaryExpression ::= numericLiteral */
      case 452: /* primaryExpression ::= booleanLiteral */
#line 685 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5768 "resource/ASPPisParser.php"
        break;
      case 449: /* primaryExpression ::= functionCall */
#line 686 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->hasFNC = true; $yygotominor->hasAGG = true; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5773 "resource/ASPPisParser.php"
        break;
      case 453: /* primaryExpression ::= var */
#line 690 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5778 "resource/ASPPisParser.php"
        break;
      case 454: /* builtInCall ::= aggregate */
      case 455: /* builtInCall ::= regexExpression */
      case 472: /* builtInCall ::= subStringExpression */
      case 474: /* builtInCall ::= strReplaceExpression */
#line 692 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5786 "resource/ASPPisParser.php"
        break;
      case 456: /* builtInCall ::= existsFunc */
      case 457: /* builtInCall ::= notExistsFunc */
#line 694 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5792 "resource/ASPPisParser.php"
        break;
      case 458: /* builtInCall ::= STR LPARENTHESE expression RPARENTHESE */
      case 459: /* builtInCall ::= LANG LPARENTHESE expression RPARENTHESE */
#line 696 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STR( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5798 "resource/ASPPisParser.php"
        break;
      case 460: /* builtInCall ::= LANGMATCHES LPARENTHESE expression COMMA expression RPARENTHESE */
#line 698 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'LANGMATCHES( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5803 "resource/ASPPisParser.php"
        break;
      case 461: /* builtInCall ::= DATATYPE LPARENTHESE expression RPARENTHESE */
#line 699 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DATATYPE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5808 "resource/ASPPisParser.php"
        break;
      case 462: /* builtInCall ::= BOUND LPARENTHESE var RPARENTHESE */
#line 700 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->query = 'BOUND( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5813 "resource/ASPPisParser.php"
        break;
      case 463: /* builtInCall ::= URI LPARENTHESE expression RPARENTHESE */
#line 701 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'URI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5818 "resource/ASPPisParser.php"
        break;
      case 464: /* builtInCall ::= BNODE LPARENTHESE expression RPARENTHESE */
#line 702 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->bNodes += $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'BNODE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5823 "resource/ASPPisParser.php"
        break;
      case 465: /* builtInCall ::= BNODE NIL */
#line 703 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->hasBN = true; $yygotominor->query = 'BNODE( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5828 "resource/ASPPisParser.php"
        break;
      case 466: /* builtInCall ::= RAND NIL */
#line 704 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'RAND( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5833 "resource/ASPPisParser.php"
        break;
      case 467: /* builtInCall ::= ABS LPARENTHESE expression RPARENTHESE */
#line 705 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ABS(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5838 "resource/ASPPisParser.php"
        break;
      case 468: /* builtInCall ::= CEIL LPARENTHESE expression RPARENTHESE */
#line 706 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars;$yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CEIL(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5843 "resource/ASPPisParser.php"
        break;
      case 469: /* builtInCall ::= FLOOR LPARENTHESE expression RPARENTHESE */
#line 707 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'FLOOR(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5848 "resource/ASPPisParser.php"
        break;
      case 470: /* builtInCall ::= ROUND LPARENTHESE expression RPARENTHESE */
#line 708 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ROUND(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5853 "resource/ASPPisParser.php"
        break;
      case 471: /* builtInCall ::= CONCAT expressionList */
#line 709 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars;$yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONCAT' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5858 "resource/ASPPisParser.php"
        break;
      case 473: /* builtInCall ::= STRLEN LPARENTHESE expression RPARENTHESE */
#line 711 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRLEN( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5863 "resource/ASPPisParser.php"
        break;
      case 475: /* builtInCall ::= UCASE LPARENTHESE expression RPARENTHESE */
#line 713 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'UCASE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5868 "resource/ASPPisParser.php"
        break;
      case 476: /* builtInCall ::= LCASE LPARENTHESE expression RPARENTHESE */
#line 714 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query =  'LCASE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5873 "resource/ASPPisParser.php"
        break;
      case 477: /* builtInCall ::= ENCODE_FOR_URI LPARENTHESE expression RPARENTHESE */
#line 715 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ENCODE_FOR_URI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5878 "resource/ASPPisParser.php"
        break;
      case 478: /* builtInCall ::= CONTAINS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 716 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CONTAINS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5883 "resource/ASPPisParser.php"
        break;
      case 479: /* builtInCall ::= STRSTARTS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 717 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRSTARTS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5888 "resource/ASPPisParser.php"
        break;
      case 480: /* builtInCall ::= STRENDS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 718 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRENDS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5893 "resource/ASPPisParser.php"
        break;
      case 481: /* builtInCall ::= STBEFORE LPARENTHESE expression COMMA expression RPARENTHESE */
#line 719 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STBEFORE( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5898 "resource/ASPPisParser.php"
        break;
      case 482: /* builtInCall ::= STRAFTER LPARENTHESE expression COMMA expression RPARENTHESE */
#line 720 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRAFTER( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5903 "resource/ASPPisParser.php"
        break;
      case 483: /* builtInCall ::= YEAR LPARENTHESE expression RPARENTHESE */
#line 721 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'YEAR( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5908 "resource/ASPPisParser.php"
        break;
      case 484: /* builtInCall ::= MONTH LPARENTHESE expression RPARENTHESE */
#line 722 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MONTH( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5913 "resource/ASPPisParser.php"
        break;
      case 485: /* builtInCall ::= DAY LPARENTHESE expression RPARENTHESE */
#line 723 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DAY( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5918 "resource/ASPPisParser.php"
        break;
      case 486: /* builtInCall ::= HOURS LPARENTHESE expression RPARENTHESE */
#line 724 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'HOURS( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5923 "resource/ASPPisParser.php"
        break;
      case 487: /* builtInCall ::= MINUTES LPARENTHESE expression RPARENTHESE */
#line 725 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MINUTES( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5928 "resource/ASPPisParser.php"
        break;
      case 488: /* builtInCall ::= SECONDS LPARENTHESE expression RPARENTHESE */
#line 726 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SECONDS( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5933 "resource/ASPPisParser.php"
        break;
      case 489: /* builtInCall ::= TIMEZONE LPARENTHESE expression RPARENTHESE */
#line 727 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'TIMEZONE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5938 "resource/ASPPisParser.php"
        break;
      case 490: /* builtInCall ::= TZ LPARENTHESE expression RPARENTHESE */
#line 728 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'TZ( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5943 "resource/ASPPisParser.php"
        break;
      case 491: /* builtInCall ::= NOW NIL */
#line 729 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'NOW( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5948 "resource/ASPPisParser.php"
        break;
      case 492: /* builtInCall ::= UUID NIL */
#line 730 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'UUID( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5953 "resource/ASPPisParser.php"
        break;
      case 493: /* builtInCall ::= STRUUID NIL */
#line 731 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'STRUUID( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5958 "resource/ASPPisParser.php"
        break;
      case 494: /* builtInCall ::= MD5 LPARENTHESE expression RPARENTHESE */
#line 732 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MD5( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5963 "resource/ASPPisParser.php"
        break;
      case 495: /* builtInCall ::= SHA1 LPARENTHESE expression RPARENTHESE */
#line 733 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA1( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5968 "resource/ASPPisParser.php"
        break;
      case 496: /* builtInCall ::= SHA256 LPARENTHESE expression RPARENTHESE */
#line 734 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA256( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5973 "resource/ASPPisParser.php"
        break;
      case 497: /* builtInCall ::= SHA384 LPARENTHESE expression RPARENTHESE */
#line 735 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA384( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5978 "resource/ASPPisParser.php"
        break;
      case 498: /* builtInCall ::= SHA512 LPARENTHESE expression RPARENTHESE */
#line 736 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA512( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5983 "resource/ASPPisParser.php"
        break;
      case 499: /* builtInCall ::= COALESCE expressionList */
#line 737 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COALESCE' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5988 "resource/ASPPisParser.php"
        break;
      case 500: /* builtInCall ::= IF LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 738 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'IF( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query .  ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5993 "resource/ASPPisParser.php"
        break;
      case 501: /* builtInCall ::= STRLANG LPARENTHESE expression COMMA expression RPARENTHESE */
#line 739 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRLANG( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5998 "resource/ASPPisParser.php"
        break;
      case 502: /* builtInCall ::= STRDT LPARENTHESE expression COMMA expression RPARENTHESE */
#line 740 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRDT( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6003 "resource/ASPPisParser.php"
        break;
      case 503: /* builtInCall ::= SAMETERM LPARENTHESE expression COMMA expression RPARENTHESE */
#line 741 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SAMETERM( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6008 "resource/ASPPisParser.php"
        break;
      case 504: /* builtInCall ::= ISIRI LPARENTHESE expression RPARENTHESE */
#line 742 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISIRI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6013 "resource/ASPPisParser.php"
        break;
      case 505: /* builtInCall ::= ISURI LPARENTHESE expression RPARENTHESE */
#line 743 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISURI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6018 "resource/ASPPisParser.php"
        break;
      case 506: /* builtInCall ::= ISBLANK LPARENTHESE expression RPARENTHESE */
#line 744 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISBLANK( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6023 "resource/ASPPisParser.php"
        break;
      case 507: /* builtInCall ::= ISLITERAL LPARENTHESE expression RPARENTHESE */
#line 745 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISLITERAL( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6028 "resource/ASPPisParser.php"
        break;
      case 508: /* builtInCall ::= ISNUMERIC LPARENTHESE expression RPARENTHESE */
#line 746 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISNUMERIC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6033 "resource/ASPPisParser.php"
        break;
      case 509: /* regexExpression ::= REGEX LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 748 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 632; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REGEX( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6038 "resource/ASPPisParser.php"
        break;
      case 510: /* regexExpression ::= REGEX LPARENTHESE expression COMMA expression RPARENTHESE */
#line 749 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 632; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REGEX( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6043 "resource/ASPPisParser.php"
        break;
      case 511: /* subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 751 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 633; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SUBSTR( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6048 "resource/ASPPisParser.php"
        break;
      case 512: /* subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression RPARENTHESE */
#line 752 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 633; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SUBSTR( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6053 "resource/ASPPisParser.php"
        break;
      case 513: /* strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression COMMA expression RPARENTHESE */
#line 754 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 634; $yygotominor->copyBools($this->yystack[$this->yyidx + -7]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -7]->minor->vars + $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -7]->minor->bNodes + $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REPLACE( ' . $this->yystack[$this->yyidx + -7]->minor->query . ', ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -9]->minor, $this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6058 "resource/ASPPisParser.php"
        break;
      case 514: /* strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 755 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 634; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REPLACE( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6063 "resource/ASPPisParser.php"
        break;
      case 515: /* existsFunc ::= EXISTS groupGraphPattern */
#line 757 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 635; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'EXISTS ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6068 "resource/ASPPisParser.php"
        break;
      case 516: /* notExistsFunc ::= NOT EXISTS groupGraphPattern */
#line 759 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 636; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'NOT EXISTS ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6073 "resource/ASPPisParser.php"
        break;
      case 517: /* aggregate ::= COUNT LPARENTHESE DISTINCT STAR RPARENTHESE */
#line 761 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( DISTINCT * )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6078 "resource/ASPPisParser.php"
        break;
      case 518: /* aggregate ::= COUNT LPARENTHESE DISTINCT expression RPARENTHESE */
#line 762 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6083 "resource/ASPPisParser.php"
        break;
      case 519: /* aggregate ::= COUNT LPARENTHESE STAR RPARENTHESE */
#line 763 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( * )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6088 "resource/ASPPisParser.php"
        break;
      case 520: /* aggregate ::= COUNT LPARENTHESE expression RPARENTHESE */
#line 764 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6093 "resource/ASPPisParser.php"
        break;
      case 521: /* aggregate ::= SUM LPARENTHESE DISTINCT expression RPARENTHESE */
#line 765 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SUM( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6098 "resource/ASPPisParser.php"
        break;
      case 522: /* aggregate ::= MIN LPARENTHESE DISTINCT expression RPARENTHESE */
#line 766 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MIN( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6103 "resource/ASPPisParser.php"
        break;
      case 523: /* aggregate ::= MAX LPARENTHESE DISTINCT expression RPARENTHESE */
#line 767 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MAX( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6108 "resource/ASPPisParser.php"
        break;
      case 524: /* aggregate ::= AVG LPARENTHESE DISTINCT expression RPARENTHESE */
#line 768 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'AVG( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6113 "resource/ASPPisParser.php"
        break;
      case 525: /* aggregate ::= SAMPLE LPARENTHESE DISTINCT expression RPARENTHESE */
#line 769 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SAMPLE( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6118 "resource/ASPPisParser.php"
        break;
      case 526: /* aggregate ::= SUM LPARENTHESE expression RPARENTHESE */
#line 770 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SUM( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6123 "resource/ASPPisParser.php"
        break;
      case 527: /* aggregate ::= MIN LPARENTHESE expression RPARENTHESE */
#line 771 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MIN( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6128 "resource/ASPPisParser.php"
        break;
      case 528: /* aggregate ::= MAX LPARENTHESE expression RPARENTHESE */
#line 772 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MAX( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6133 "resource/ASPPisParser.php"
        break;
      case 529: /* aggregate ::= AVG LPARENTHESE expression RPARENTHESE */
#line 773 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'AVG( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6138 "resource/ASPPisParser.php"
        break;
      case 530: /* aggregate ::= SAMPLE LPARENTHESE expression RPARENTHESE */
#line 774 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SAMPLE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6143 "resource/ASPPisParser.php"
        break;
      case 531: /* aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE */
#line 775 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( DISTINCT ' . $this->yystack[$this->yyidx + -5]->minor->query . ' ; SEPARATOR = ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6148 "resource/ASPPisParser.php"
        break;
      case 532: /* aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression RPARENTHESE */
#line 776 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6153 "resource/ASPPisParser.php"
        break;
      case 533: /* aggregate ::= GROUP_CONCAT LPARENTHESE expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE */
#line 777 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( ' . $this->yystack[$this->yyidx + -5]->minor->query . ' ; SEPARATOR = ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6158 "resource/ASPPisParser.php"
        break;
      case 534: /* aggregate ::= GROUP_CONCAT LPARENTHESE expression RPARENTHESE */
#line 778 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6163 "resource/ASPPisParser.php"
        break;
      case 535: /* rdfLiteral ::= string LANGTAG */
#line 780 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6168 "resource/ASPPisParser.php"
        break;
      case 536: /* rdfLiteral ::= string DHAT iri */
#line 781 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->value . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6173 "resource/ASPPisParser.php"
        break;
      case 537: /* rdfLiteral ::= string */
#line 782 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6178 "resource/ASPPisParser.php"
        break;
      case 538: /* numericLiteral ::= numericLiteralUnsigned */
      case 539: /* numericLiteral ::= numericLiteralPositive */
      case 540: /* numericLiteral ::= numericLiteralNegative */
#line 784 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 639; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6185 "resource/ASPPisParser.php"
        break;
      case 541: /* numericLiteralUnsigned ::= INTEGER */
      case 542: /* numericLiteralUnsigned ::= DECIMAL */
      case 543: /* numericLiteralUnsigned ::= DOUBLE */
#line 788 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 640; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6192 "resource/ASPPisParser.php"
        break;
      case 544: /* numericLiteralPositive ::= INTEGER_POSITIVE */
      case 545: /* numericLiteralPositive ::= DECIMAL_POSITIVE */
      case 546: /* numericLiteralPositive ::= DOUBLE_POSITIVE */
#line 792 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 641; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6199 "resource/ASPPisParser.php"
        break;
      case 547: /* numericLiteralNegative ::= INTEGER_NEGATIVE */
      case 548: /* numericLiteralNegative ::= DECIMAL_NEGATIVE */
      case 549: /* numericLiteralNegative ::= DOUBLE_NEGATIVE */
#line 796 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 642; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6206 "resource/ASPPisParser.php"
        break;
      case 550: /* booleanLiteral ::= TRUE */
#line 800 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 643; $yygotominor->query = "true";$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6211 "resource/ASPPisParser.php"
        break;
      case 551: /* booleanLiteral ::= FALSE */
#line 801 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 643; $yygotominor->query = "false";$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6216 "resource/ASPPisParser.php"
        break;
      case 552: /* string ::= STRING_LITERAL1 */
      case 553: /* string ::= STRING_LITERAL2 */
      case 554: /* string ::= STRING_LITERAL_LONG1 */
      case 555: /* string ::= STRING_LITERAL_LONG2 */
#line 803 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 644; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6224 "resource/ASPPisParser.php"
        break;
      case 556: /* iri ::= IRIREF */
#line 808 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 645; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6229 "resource/ASPPisParser.php"
        break;
      case 557: /* iri ::= prefixedName */
#line 809 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 645; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6234 "resource/ASPPisParser.php"
        break;
      case 558: /* prefixedName ::= PNAME_LN */
      case 559: /* prefixedName ::= PNAME_NS */
#line 811 "resource/ASPPisParser.y"
{if(!$this->checkNS($this->yystack[$this->yyidx + 0]->minor->value)){throw new Exception("Missing Prefix for " . $this->yystack[$this->yyidx + 0]->minor->value);} $yygotominor = new NTToken(); $yygotominor->type = 646; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6240 "resource/ASPPisParser.php"
        break;
      case 560: /* blankNode ::= BLANK_NODE_LABEL */
#line 814 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 647; $yygotominor->hasBN = true; $yygotominor->bNodes[$this->yystack[$this->yyidx + 0]->minor->value] = 1;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6245 "resource/ASPPisParser.php"
        break;
      case 561: /* blankNode ::= ANON */
#line 815 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 647; $yygotominor->hasBN = true;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6250 "resource/ASPPisParser.php"
        break;
      default:
        break;
    }

    $yygoto = self::$yyRuleInfo[2 * $yyruleno];
    $yysize = self::$yyRuleInfo[(2 * $yyruleno) + 1];

    $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;

    $this->yyidx -= $yysize;
    $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);

    if ($yyact < self::YYNSTATE)
      $this->yy_shift($yyact, $yygoto, $yygotominor);
    else if ($yyact == self::YYNSTATE + self::YYNRULE + 1)
      $this->yy_accept();
  }

  private function yy_parse_failed()
  {
    if ($this->yyTraceFILE)
      fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);

    while ($this->yyidx >= 0) 
      $this->yy_pop_parser_stack();

#line 131 "resource/ASPPisParser.y"

    throw new Exception('Couldnt finish Parsing (Unkown Problem)');
#line 6281 "resource/ASPPisParser.php"
  }

  private function yy_syntax_error($yymajor, $yyminor = null)
  {
    $message = 'Unexpected ' . $this->yy_token_name($yymajor);
    if (null !== $yyminor) {
      $message .= '(' . $yyminor->value . ')';
    }
  }

  private function yy_accept()
  {
    if ($this->yyTraceFILE)
      fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);

    while ($this->yyidx >= 0) 
      $this->yy_pop_parser_stack();
#line 127 "resource/ASPPisParser.y"


#line 6302 "resource/ASPPisParser.php"
  }

  public function doParse($yymajor, $yyminor = null)
  {
    $yyact = 0; /* The parser action. */
    $yyendofinput = 0; /* True if we are at the end of input */
    $yyerrorhit = 0; /* True if yymajor has invoked an error */

    /* (re)initialize the parser, if necessary */
    if ($this->yyidx < 0) 
    {
      $this->yyidx = 0;
      $this->yyerrcnt = - 1;
      $ent = new stdClass;
      $ent->stateno = 0;
      $ent->major = 0;
      $ent->minor = null;
      $this->yystack = array(0 => $ent);
      $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
      $this->YY_ACCEPT_ACTION = self::YYNSTATE + self::YYNRULE + 1;
      $this->YY_ERROR_ACTION = self::YYNSTATE + self::YYNRULE;
    }

    $yyendofinput = ($yymajor == 0);

    if ($this->yyTraceFILE) 
      fprintf($this->yyTraceFILE, "%sInput %s\n", $this->yyTracePrompt, self::$yyTokenName[$yymajor]);

    do 
    {
      $yyact = $this->yy_find_shift_action($yymajor);

      if ($yyact < self::YYNSTATE) 
      {
        $this->yy_shift($yyact, $yymajor, $yyminor);
        $this->yyerrcnt--;

        if ($yyendofinput && $this->yyidx >= 0) 
          $yymajor = 0;
        else
          $yymajor = self::YYNOCODE;
      } 
      else if ($yyact < self::YYNSTATE + self::YYNRULE) 
      {
        $this->yy_reduce($yyact - self::YYNSTATE);
      }
      else if ($yyact == $this->YY_ERROR_ACTION) 
      {
        if ($this->yyTraceFILE) 
          fprintf($this->yyTraceFILE, "%sSyntax Error!\n", $this->yyTracePrompt);

        if (defined('self::YYERRORSYMBOL')) 
        {
          if ($this->yyerrcnt < 0) 
            $this->yy_syntax_error($yymajor, $yyminor);

          $yymx = $this->yystack[$this->yyidx]->major;

          if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) 
          {
            if ($this->yyTraceFILE) 
              fprintf($this->yyTraceFILE, "%sDiscard input token %s\n", $this->yyTracePrompt, self::$yyTokenName[$yymajor]);

            $this->yy_destructor($yymajor, $yyminor);
            $yymajor = self::YYNOCODE;
          }
          else
          {
            while ($this->yyidx >= 0 && $yymx != self::YYERRORSYMBOL && ($yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, self::YYERRORSYMBOL)) >= self::YYNSTATE) 
              $this->yy_pop_parser_stack();

            if ($this->yyidx < 0 || $yymajor == 0) 
            {
              $this->yy_destructor($yymajor, $yyminor);
              $this->yy_parse_failed();
              $yymajor = self::YYNOCODE;
            }
            else if ($yymx != self::YYERRORSYMBOL) 
            {
              $this->yy_shift($yyact, self::YYERRORSYMBOL, 0);
            }
          }

          $this->yyerrcnt = 3;
          $yyerrorhit = 1;
        }
        else
        { 
          if ($this->yyerrcnt <= 0) 
            $this->yy_syntax_error($yymajor, $yyminor);

          $this->yyerrcnt = 3;
          $this->yy_destructor($yymajor, $yyminor);

          if ($yyendofinput) 
            $this->yy_parse_failed();

          $yymajor = self::YYNOCODE;
        }
      }
      else
      {
        $this->yy_accept();
        $yymajor = self::YYNOCODE;
      }
    }
    while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
  }
}

?>
