<?php

#line 11 "resource/ASPPisParser.y"
 /* this will be copied blindly */
namespace aSPPis\lib;
use \stdClass;
use \Exception;
class NTToken {
    /* arrays, the array will be considered as sets, as only a few situations need an actual check for duplicates. 
     * This is achieved in PHP with using the value as key and a uniformed value for all keys. 
     * Example: ?text will be saved in the array as array['?text'] = 1, that way if we merge it with another array through the union operator (+)
     * we will get a resultarray with only 1 key called ?text instead of 2 arbitrary keys with both having ?text as value.
     * Furthermore this allows for a quick isset check for searching duplicates
     */
    public $vars = array();
    /* need to somehow check Scoping for (only?) vars noted with AS, for subselects, only the selectclause AS vars are important except, 
     * if the subselect uses Select * -> then all AS vars are important and will be carried over
     */
    public $ssVars = array();
    /* ssVars in nested groupGraphPatter's do not interfere
     * for example is (from w3c test set - syntax-SELECTscope3.rq):
     *  SELECT *
     *  WHERE {
     *    {SELECT (1 AS ?X ) {}
     *    }
     *    {SELECT (1 AS ?X ) {}
     *    }
     *  }
     * a valid query, as both AS ?X calls are in different (non overlapping) ggp's, only used in ggp's (everything that contains them and can be turned into them again)
     */
    public $gGPssVars = array();
    public $bNodes = array();
    /* needs to be an array, because multiple binds can be reduced and be checked against one triplegroup preceding all binds */
    public $bindVar = array();
    /* non-arrays */
    public $query = null;
    public $counter = 0;
    //NTToken Type to differentiate different Tokens in the Syntax Tree, starts at 500 (TTokens use 1-164 right now, up to 500 is just a buffer)
    public $type = -1;
    //Childs of the NTToken to create the parse tree
    public $childs = array();
    /* booleans */
    public $hasBN = false;
    public $hasFNC = false;
    public $hasAGG = false;
    public $hasStar = false;

  /* to reduce the amount of isset calls the 'usual' smaller set should be set 1, returns null if NO duplicates are found
   * might be useful to return the duplicate for the error message tho (TODO)
   * array_intersect_key could be faster 
   */
  function noDuplicates($set1, $set2) {
		$noDuplicate = null;
        if ($set1 == null || $set2 == null) {
            return $noDuplicate;
        } else {
            foreach (array_keys($set1) as $key) {
                if (isset($set2[$key])) {
                    $noDuplicate = $key;
                    break;
                }
    	      }
        }
        return $noDuplicate;
	}

	function copyBools($tmpToken) {
		if ($this->hasBN == false) {
			  $this->hasBN = $tmpToken->hasBN;
		}
		if ($this->hasFNC == false) {
			  $this->hasFNC = $tmpToken->hasFNC;
		}
		if ($this->hasAGG == false) {
			  $this->hasAGG = $tmpToken->hasAGG;
		}
	}
}  
#line 80 "resource/ASPPisParser.php"

class ASPPisParser {
  private $yyidx = -1;               /* Index of top element in stack */
  private $yyerrcnt;                 /* Shifts left before out of the error */
  private $yystack = array();
  private $yyTraceFILE = null;
  private $yyTracePrompt = null;

#line 88 "resource/ASPPisParser.y"

/* putting the ns and base information in the parser class and adding access to the SparqlPHPParserMain.php, removes the necessity to use 
 * global variables/add another parameter to the parse function.
 */
public $main;
public $base = null;
public $allNS = array();

function __construct ($parent) {
    $this->main = $parent;
}

function addNS($alias, $iri) {
    $this->allNS[$alias] = $iri;
}

function checkNS($alias) {
    if ($alias == null) {
        return false;
    }
    //alias contains the part after the : as well, so it needs to be stripped, first locate the position
    $pos = strpos($alias, ':');
    if($pos !== false) {
        //keep : as an empty prefix is allowed
        $strippedAlias = substr($alias, 0, $pos + 1);
        if (isset($this->allNS[$strippedAlias])) {
            return true;
        }
    }
    return false;
}

//removed the base check, its actually not necessary/queries its allowed to have <x> as iri...
//actual iri reference transformation is rather complex ( http://www.ietf.org/rfc/rfc3986.txt )
//unsure if that is necessary for this project though
function checkBase($alias) {
    if (strcmp(substr($alias,1,7),'http://') == 0 || strcmp(substr($alias,1,8),'https://') == 0) {
        return true;
    } else {
        if(isset($this->base)) {
            return true;
        } else {
            return false;
        }
    }
}
#line 136 "resource/ASPPisParser.php"

  const TK_PRAGMA =  1;
  const TK_BASE =  2;
  const TK_IRIREF =  3;
  const TK_DOT =  4;
  const TK_PREFIX =  5;
  const TK_PNAME_NS =  6;
  const TK_SELECT =  7;
  const TK_DISTINCT =  8;
  const TK_REDUCED =  9;
  const TK_STAR = 10;
  const TK_LPARENTHESE = 11;
  const TK_AS = 12;
  const TK_RPARENTHESE = 13;
  const TK_CONSTRUCT = 14;
  const TK_LBRACE = 15;
  const TK_RBRACE = 16;
  const TK_WHERE = 17;
  const TK_DESCRIBE = 18;
  const TK_ASK = 19;
  const TK_FROM = 20;
  const TK_NAMED = 21;
  const TK_GROUP = 22;
  const TK_BY = 23;
  const TK_HAVING = 24;
  const TK_ORDER = 25;
  const TK_ASC = 26;
  const TK_DESC = 27;
  const TK_LIMIT = 28;
  const TK_INTEGER = 29;
  const TK_OFFSET = 30;
  const TK_VALUES = 31;
  const TK_SEMICOLON = 32;
  const TK_LOAD = 33;
  const TK_SILENT = 34;
  const TK_INTO = 35;
  const TK_CLEAR = 36;
  const TK_DROP = 37;
  const TK_CREATE = 38;
  const TK_ADD = 39;
  const TK_TO = 40;
  const TK_MOVE = 41;
  const TK_COPY = 42;
  const TK_INSERTDATA = 43;
  const TK_DELETEDATA = 44;
  const TK_DELETEWHERE = 45;
  const TK_WITH = 46;
  const TK_DELETE = 47;
  const TK_INSERT = 48;
  const TK_USING = 49;
  const TK_GRAPH = 50;
  const TK_DEFAULT = 51;
  const TK_ALL = 52;
  const TK_OPTIONAL = 53;
  const TK_SERVICE = 54;
  const TK_BIND = 55;
  const TK_NIL = 56;
  const TK_UNDEF = 57;
  const TK_SMINUS = 58;
  const TK_UNION = 59;
  const TK_FILTER = 60;
  const TK_COMMA = 61;
  const TK_A = 62;
  const TK_VBAR = 63;
  const TK_SLASH = 64;
  const TK_HAT = 65;
  const TK_PLUS = 66;
  const TK_QUESTION = 67;
  const TK_EXCLAMATION = 68;
  const TK_LBRACKET = 69;
  const TK_RBRACKET = 70;
  const TK_VAR1 = 71;
  const TK_VAR2 = 72;
  const TK_OR = 73;
  const TK_AND = 74;
  const TK_EQUAL = 75;
  const TK_NEQUAL = 76;
  const TK_SMALLERTHEN = 77;
  const TK_GREATERTHEN = 78;
  const TK_SMALLERTHENQ = 79;
  const TK_GREATERTHENQ = 80;
  const TK_IN = 81;
  const TK_NOT = 82;
  const TK_MINUS = 83;
  const TK_STR = 84;
  const TK_LANG = 85;
  const TK_LANGMATCHES = 86;
  const TK_DATATYPE = 87;
  const TK_BOUND = 88;
  const TK_URI = 89;
  const TK_BNODE = 90;
  const TK_RAND = 91;
  const TK_ABS = 92;
  const TK_CEIL = 93;
  const TK_FLOOR = 94;
  const TK_ROUND = 95;
  const TK_CONCAT = 96;
  const TK_STRLEN = 97;
  const TK_UCASE = 98;
  const TK_LCASE = 99;
  const TK_ENCODE_FOR_URI = 100;
  const TK_CONTAINS = 101;
  const TK_STRSTARTS = 102;
  const TK_STRENDS = 103;
  const TK_STBEFORE = 104;
  const TK_STRAFTER = 105;
  const TK_YEAR = 106;
  const TK_MONTH = 107;
  const TK_DAY = 108;
  const TK_HOURS = 109;
  const TK_MINUTES = 110;
  const TK_SECONDS = 111;
  const TK_TIMEZONE = 112;
  const TK_TZ = 113;
  const TK_NOW = 114;
  const TK_UUID = 115;
  const TK_STRUUID = 116;
  const TK_MD5 = 117;
  const TK_SHA1 = 118;
  const TK_SHA256 = 119;
  const TK_SHA384 = 120;
  const TK_SHA512 = 121;
  const TK_COALESCE = 122;
  const TK_IF = 123;
  const TK_STRLANG = 124;
  const TK_STRDT = 125;
  const TK_SAMETERM = 126;
  const TK_ISIRI = 127;
  const TK_ISURI = 128;
  const TK_ISBLANK = 129;
  const TK_ISLITERAL = 130;
  const TK_ISNUMERIC = 131;
  const TK_REGEX = 132;
  const TK_SUBSTR = 133;
  const TK_REPLACE = 134;
  const TK_EXISTS = 135;
  const TK_COUNT = 136;
  const TK_SUM = 137;
  const TK_MIN = 138;
  const TK_MAX = 139;
  const TK_AVG = 140;
  const TK_SAMPLE = 141;
  const TK_GROUP_CONCAT = 142;
  const TK_SEPARATOR = 143;
  const TK_LANGTAG = 144;
  const TK_DHAT = 145;
  const TK_DECIMAL = 146;
  const TK_DOUBLE = 147;
  const TK_INTEGER_POSITIVE = 148;
  const TK_DECIMAL_POSITIVE = 149;
  const TK_DOUBLE_POSITIVE = 150;
  const TK_INTEGER_NEGATIVE = 151;
  const TK_DECIMAL_NEGATIVE = 152;
  const TK_DOUBLE_NEGATIVE = 153;
  const TK_TRUE = 154;
  const TK_FALSE = 155;
  const TK_STRING_LITERAL1 = 156;
  const TK_STRING_LITERAL2 = 157;
  const TK_STRING_LITERAL_LONG1 = 158;
  const TK_STRING_LITERAL_LONG2 = 159;
  const TK_PNAME_LN = 160;
  const TK_BLANK_NODE_LABEL = 161;
  const TK_ANON = 162;

  const YYNOCODE = 314;
  const YYNSTATE = 1031;
  const YYNRULE = 555;

  private $YY_NO_ACTION;
  private $YY_ACCEPT_ACTION;
  private $YY_ERROR_ACTION;

  /* action tables */ 

static $yy_action = array(
 /*     0 */   619,  591,  363,  622,  588,    4,  588,  546,   14, 1587,
 /*    10 */   399,  400,  118,  374,  217,  375,  376,  377,  274,  281,
 /*    20 */   957,  220,  518,  354,  163,  406,  626,  295,  405,  308,
 /*    30 */   404,  218,  260,  364,  263,  254,  255,  315,  228,  268,
 /*    40 */   229,  230,  355,  358,  359,  270,  367,  364,  378,  673,
 /*    50 */   960,  961,  962,  963,  964,  965,  966,  967,  968,  969,
 /*    60 */   970,  242,  186,  116,  930,  115,  247,  279,  649,  650,
 /*    70 */   302,  406,  619,  788,  405,  622,  404,  782,  783,  520,
 /*    80 */   117,  411,  412,  414,  417,  419,  421,  385,  424,  425,
 /*    90 */   427,  429,  431,  298,  433,  435,  437,  439,  441,  444,
 /*   100 */   447,  450,  453,  456,  458,  460,  462,  464,  466,  468,
 /*   110 */   470,  472,  473,  474,  475,  477,  479,  481,  483,  300,
 /*   120 */   485,  489,  492,  495,  498,  500,  502,  504,  506,  508,
 /*   130 */   511,  514,  330,  521,  524,  526,  528,  530,  532,  534,
 /*   140 */   649,  650,  537,  627,  628,  629,  630,  631,  632,  633,
 /*   150 */   634,  635,  636,  637,  638,  639,  640,  621,  619,  975,
 /*   160 */   979,  622, 1033,   12,  591,  371,   14,  588,  185,  253,
 /*   170 */   926,  256,  257,  795,   90,  660,  266,  975,  981,  788,
 /*   180 */   210,  225,  326,  327,  626,  747,  685,  686,  687,  688,
 /*   190 */   704,  706,  326,  327,  620,  260,  364,  263,  254,  255,
 /*   200 */   315,  228,  977,  229,  230,  355,  358,  359,  270,  367,
 /*   210 */   364,  619,  163,  406,  622,    1,  405,  333,  404,  540,
 /*   220 */   259,  116,  518,  115,  163,  406,  649,  650,  405,  621,
 /*   230 */   404,  268,  976,  978,  649,  650,  648,  520,  117,  411,
 /*   240 */   412,  414,  417,  419,  421,  385,  424,  425,  427,  429,
 /*   250 */   431,  298,  433,  435,  437,  439,  441,  444,  447,  450,
 /*   260 */   453,  456,  458,  460,  462,  464,  466,  468,  470,  472,
 /*   270 */   473,  474,  475,  477,  479,  481,  483,  300,  485,  489,
 /*   280 */   492,  495,  498,  500,  502,  504,  506,  508,  511,  514,
 /*   290 */   330,  521,  524,  526,  528,  530,  532,  534,  276,  317,
 /*   300 */  1011,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*   310 */   636,  637,  638,  639,  640,  621,  619,  790,  322,  622,
 /*   320 */   323,  324,  325,  522,   14,  959,  220,  960,  961,  962,
 /*   330 */   963,  964,  965,  966,  967,  968,  969,  970,  637,  638,
 /*   340 */   639,  640,  626,  247,  279,   99,  100,  101,  102,  103,
 /*   350 */   104,  311,  576,  349,  832,  960,  961,  962,  963,  964,
 /*   360 */   965,  966,  967,  968,  969,  970,  379,  518,  621,  163,
 /*   370 */   406,  247,  279,  405,  823,  404,  156,  952,  824,  116,
 /*   380 */   405,  115,  404,  845,  649,  650,    1,  845,  333,  252,
 /*   390 */   309,  259,  310,  975,  974,  520,  117,  411,  412,  414,
 /*   400 */   417,  419,  421,  385,  424,  425,  427,  429,  431,  298,
 /*   410 */   433,  435,  437,  439,  441,  444,  447,  450,  453,  456,
 /*   420 */   458,  460,  462,  464,  466,  468,  470,  472,  473,  474,
 /*   430 */   475,  477,  479,  481,  483,  300,  485,  489,  492,  495,
 /*   440 */   498,  500,  502,  504,  506,  508,  511,  514,  330,  521,
 /*   450 */   524,  526,  528,  530,  532,  534,  278,  320, 1011,  627,
 /*   460 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*   470 */   638,  639,  640,  621,  619,  839,  849,  622,  157,   80,
 /*   480 */   306,  289,   14,  793,  274,  281,  957, 1025,  381,  960,
 /*   490 */   961,  962,  963,  964,  965,  966,  967,  968,  969,  970,
 /*   500 */   626,  189,  620,  926,  668,  247,  279,  620,  122,  842,
 /*   510 */   585,  620,  788,  259, 1024,  977,  960,  961,  962,  963,
 /*   520 */   964,  965,  966,  967,  968,  969,  970,  314,  261,  287,
 /*   530 */   930,  793,  247,  279,  382,  243,  190,  116,  930,  115,
 /*   540 */   248,  665,  649,  650,  268,  976,  978,  788,  326,  327,
 /*   550 */   288,  383,  793,  520,  117,  411,  412,  414,  417,  419,
 /*   560 */   421,  385,  424,  425,  427,  429,  431,  298,  433,  435,
 /*   570 */   437,  439,  441,  444,  447,  450,  453,  456,  458,  460,
 /*   580 */   462,  464,  466,  468,  470,  472,  473,  474,  475,  477,
 /*   590 */   479,  481,  483,  300,  485,  489,  492,  495,  498,  500,
 /*   600 */   502,  504,  506,  508,  511,  514,  330,  521,  524,  526,
 /*   610 */   528,  530,  532,  534,  975,  980,  384,  627,  628,  629,
 /*   620 */   630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
 /*   630 */   640,  621,  619,  620,  651,  622,  158,   81,  649,  650,
 /*   640 */    14,  183,  274,  281,  957,  823,  896,  272,  344,  824,
 /*   650 */   928,  260,  788,  386,  254,  255,  315,  228,  626,  229,
 /*   660 */   230,  355,  358,  359,  270,  367,  364,  594,  619,  420,
 /*   670 */  1009,  622, 1026,  977,  960,  961,  962,  963,  964,  965,
 /*   680 */   966,  967,  968,  969,  970,  591,  262,  618,  588,  732,
 /*   690 */   247,  279,  403,  244,  192,  116,  930,  115,  286,  267,
 /*   700 */   649,  650,  268,  976,  978,  788,  823,  649,  650,  342,
 /*   710 */   824,  520,  117,  411,  412,  414,  417,  419,  421,  385,
 /*   720 */   424,  425,  427,  429,  431,  298,  433,  435,  437,  439,
 /*   730 */   441,  444,  447,  450,  453,  456,  458,  460,  462,  464,
 /*   740 */   466,  468,  470,  472,  473,  474,  475,  477,  479,  481,
 /*   750 */   483,  300,  485,  489,  492,  495,  498,  500,  502,  504,
 /*   760 */   506,  508,  511,  514,  330,  521,  524,  526,  528,  530,
 /*   770 */   532,  534,  166,  620,  620,  627,  628,  629,  630,  631,
 /*   780 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*   790 */   619,  620,  253,  622,  620,   82,  280,  955,   14,  266,
 /*   800 */   221,  251,  925,  210,  225,  361,  249,  748,  927,  326,
 /*   810 */   327,  620,  749,  346,  326,  327,  626,  647,  260,  326,
 /*   820 */   327,  254,  255,  315,  228,  621,  229,  230,  355,  358,
 /*   830 */   359,  270,  367,  364,  620,  245,  200,  263,  930,  922,
 /*   840 */     1,  823,  333,  302,  343,  824,  580,  788,  593,  259,
 /*   850 */   920,  921,  972,  116,  666,  115,  174,  120,  649,  650,
 /*   860 */   869,  870,  871,  872,  873,  874,  875,  876,  519,  520,
 /*   870 */   117,  411,  412,  414,  417,  419,  421,  385,  424,  425,
 /*   880 */   427,  429,  431,  298,  433,  435,  437,  439,  441,  444,
 /*   890 */   447,  450,  453,  456,  458,  460,  462,  464,  466,  468,
 /*   900 */   470,  472,  473,  474,  475,  477,  479,  481,  483,  300,
 /*   910 */   485,  489,  492,  495,  498,  500,  502,  504,  506,  508,
 /*   920 */   511,  514,  330,  521,  524,  526,  528,  530,  532,  534,
 /*   930 */   367,  364,  620,  627,  628,  629,  630,  631,  632,  633,
 /*   940 */   634,  635,  636,  637,  638,  639,  640,  621,  619,  246,
 /*   950 */   277,  622,  350,   83,  957,  191,   14,  926,  113,  685,
 /*   960 */   686,  687,  688,  704,  706,  111,  788,  620,  619,  620,
 /*   970 */    26,  622,  620,  746,  626,  915,  620,  176,  196,  946,
 /*   980 */   930,  316, 1011,  331,  823,  548,  265,  947,  824,  788,
 /*   990 */   211,  222,  250,  750,  211,  222,  250,  750,  318, 1011,
 /*  1000 */   326,  327,  302,  823,  326,  327,  602,  824,  552,  887,
 /*  1010 */   888,  116,  114,  115,  780,  731,  649,  650,  302,  112,
 /*  1020 */   845,  985,  845,   27,  162,  778,  779,  520,  117,  411,
 /*  1030 */   412,  414,  417,  419,  421,  385,  424,  425,  427,  429,
 /*  1040 */   431,  298,  433,  435,  437,  439,  441,  444,  447,  450,
 /*  1050 */   453,  456,  458,  460,  462,  464,  466,  468,  470,  472,
 /*  1060 */   473,  474,  475,  477,  479,  481,  483,  300,  485,  489,
 /*  1070 */   492,  495,  498,  500,  502,  504,  506,  508,  511,  514,
 /*  1080 */   330,  521,  524,  526,  528,  530,  532,  534,  791,   90,
 /*  1090 */   554,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  1100 */   636,  637,  638,  639,  640,  621,  619,  346,  402,  622,
 /*  1110 */   762,   84,  620,  841,   14,  847,  319, 1011,  685,  686,
 /*  1120 */   687,  688,  704,  706,  275,  621,  620,  321, 1011,  535,
 /*  1130 */   619,  620,  626,  622,  685,  686,  687,  688,  704,  706,
 /*  1140 */   924,  199,  620,  926,  620,  620,  620,  326,  327,  649,
 /*  1150 */   650,  119,  788,  394,  869,  870,  871,  872,  873,  874,
 /*  1160 */   875,  876,  619,  356,  126,  622,  649,  650,  351,  116,
 /*  1170 */   957,  115,  774,  571,  649,  650,  302,  269,  986,  395,
 /*  1180 */   271,  851, 1008,  772,  773,  520,  117,  411,  412,  414,
 /*  1190 */   417,  419,  421,  385,  424,  425,  427,  429,  431,  298,
 /*  1200 */   433,  435,  437,  439,  441,  444,  447,  450,  453,  456,
 /*  1210 */   458,  460,  462,  464,  466,  468,  470,  472,  473,  474,
 /*  1220 */   475,  477,  479,  481,  483,  300,  485,  489,  492,  495,
 /*  1230 */   498,  500,  502,  504,  506,  508,  511,  514,  330,  521,
 /*  1240 */   524,  526,  528,  530,  532,  534,  654,  401,  620,  627,
 /*  1250 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*  1260 */   638,  639,  640,  621,  619,  607,  830,  622,  338,   85,
 /*  1270 */   837,  290,   14,  165,  833,  396,  619,  366,  643,  622,
 /*  1280 */   619,  987,  652,  622,  184,  369,  655,  621,  227,  373,
 /*  1290 */   626,  764,  685,  686,  687,  688,  704,  706,  301,  752,
 /*  1300 */   620,  195,  944,  926,  987,  620,  620,  608,  609,  263,
 /*  1310 */   538,  596,  788,  211,  222,  250,  750,  263,  645,  621,
 /*  1320 */   397,  263,  653,  326,  327,  617,  264,  116,  911,  115,
 /*  1330 */   834,  835,  649,  650,  595,  850,  303,  777,  212,  844,
 /*  1340 */   912,  213,  258,  520,  117,  411,  412,  414,  417,  419,
 /*  1350 */   421,  385,  424,  425,  427,  429,  431,  298,  433,  435,
 /*  1360 */   437,  439,  441,  444,  447,  450,  453,  456,  458,  460,
 /*  1370 */   462,  464,  466,  468,  470,  472,  473,  474,  475,  477,
 /*  1380 */   479,  481,  483,  300,  485,  489,  492,  495,  498,  500,
 /*  1390 */   502,  504,  506,  508,  511,  514,  330,  521,  524,  526,
 /*  1400 */   528,  530,  532,  534,   89,  620,  398,  627,  628,  629,
 /*  1410 */   630,  631,  632,  633,  634,  635,  636,  637,  638,  639,
 /*  1420 */   640,  621,  619,    1,  619,  622,  895,  622,  620,  619,
 /*  1430 */    14,    3,  622,  621,  401,  917,    1,  621,  333,  219,
 /*  1440 */   983,  259, 1007,  518,  606,  163,  406,  360,  626,  405,
 /*  1450 */   846,  404,  882,  656,  926,  218,  657,  362,  215,  659,
 /*  1460 */   658,  341,  214,  569,  649,  650,  345,  405,  170,  987,
 /*  1470 */   211,  222,  250,  750,   27,  404,  775,  661,   96,  263,
 /*  1480 */   326,  327,  663,   27,  409,  116,    1,  115,  822,  263,
 /*  1490 */   649,  650,  649,  650,  608,  609,  410,  649,  650,  598,
 /*  1500 */   232,  520,  117,  411,  412,  414,  417,  419,  421,  385,
 /*  1510 */   424,  425,  427,  429,  431,  298,  433,  435,  437,  439,
 /*  1520 */   441,  444,  447,  450,  453,  456,  458,  460,  462,  464,
 /*  1530 */   466,  468,  470,  472,  473,  474,  475,  477,  479,  481,
 /*  1540 */   483,  300,  485,  489,  492,  495,  498,  500,  502,  504,
 /*  1550 */   506,  508,  511,  514,  330,  521,  524,  526,  528,  530,
 /*  1560 */   532,  534,  794,   90,  840,  627,  628,  629,  630,  631,
 /*  1570 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /*  1580 */   619,  621,  619,  622,   21,  622,  621,  669,   14,  177,
 /*  1590 */   198,  951,  930,  620,   98,  365,  197,  949,  926,  368,
 /*  1600 */   891,  788,  211,  222,  250,  750,  626,  788,  211,  222,
 /*  1610 */   250,  750,  326,  327,  231,  745,  987,  182,  326,  327,
 /*  1620 */   370,  987,  372,  649,  650,  753,  559,  263,  922,  897,
 /*  1630 */   787,  263,  302,  152,  560,   13,  209,  561,  563,  920,
 /*  1640 */   921,  844,  160,  923,  258,  207,  600,  564,  649,  650,
 /*  1650 */   202,  984,  263,  619,  263,  154,  622,  566,  567,  520,
 /*  1660 */   168,  411,  412,  414,  417,  419,  421,  385,  424,  425,
 /*  1670 */   427,  429,  431,  298,  433,  435,  437,  439,  441,  444,
 /*  1680 */   447,  450,  453,  456,  458,  460,  462,  464,  466,  468,
 /*  1690 */   470,  472,  473,  474,  475,  477,  479,  481,  483,  300,
 /*  1700 */   485,  489,  492,  495,  498,  500,  502,  504,  506,  508,
 /*  1710 */   511,  514,  330,  521,  524,  526,  528,  530,  532,  534,
 /*  1720 */   877,  649,  650,  627,  628,  629,  630,  631,  632,  633,
 /*  1730 */   634,  635,  636,  637,  638,  639,  640,  621,  619,  621,
 /*  1740 */   620,  622,  878,  879,  880,  620,   94,  883,  685,  686,
 /*  1750 */   687,  688,  704,  706,  929,  702,  620,  348,  572,  884,
 /*  1760 */   885,  407,  577,  894,  893,  211,  222,  250,  750,  145,
 /*  1770 */   892,  931,  302,  587,  955,  326,  327,  932,  268,  785,
 /*  1780 */   786,  169,  211,  222,  250,  750,  109,  993,  211,  222,
 /*  1790 */   250,  750,  326,  327,  124,  851,  971,  110,  326,  327,
 /*  1800 */  1006, 1010,  973,   13,  982, 1012,  649,  650,  851, 1002,
 /*  1810 */   621,   71,   74, 1003, 1013, 1014, 1015,  520,   78,  411,
 /*  1820 */   412,  414,  417,  419,  421,  385,  424,  425,  427,  429,
 /*  1830 */   431,  298,  433,  435,  437,  439,  441,  444,  447,  450,
 /*  1840 */   453,  456,  458,  460,  462,  464,  466,  468,  470,  472,
 /*  1850 */   473,  474,  475,  477,  479,  481,  483,  300,  485,  489,
 /*  1860 */   492,  495,  498,  500,  502,  504,  506,  508,  511,  514,
 /*  1870 */   330,  521,  524,  526,  528,  530,  532,  534,  619,  916,
 /*  1880 */   853,  622,  338, 1016,  837,  290,   86, 1017,  685,  686,
 /*  1890 */   687,  688,  704,  706,  937,  621,  620,  836,  290,  619,
 /*  1900 */  1018, 1019,  622, 1020,  147,  211,  222,  250,  750,  938,
 /*  1910 */   987,  605,  641, 1021,  987,  326,  327, 1027, 1022,  620,
 /*  1920 */   211,  222,  250,  750, 1028,  626, 1031,   13, 1023, 1029,
 /*  1930 */   326,  327,  620, 1030, 1032,  164,  291,  292,  135,  662,
 /*  1940 */   988,  664,  851,   11,  597,   97,  649,  650,  159,  667,
 /*  1950 */   851,   95,   15,  616,   16,  691,   17,  520,   18,  411,
 /*  1960 */   412,  414,  417,  419,  421,  385,  424,  425,  427,  429,
 /*  1970 */   431,  298,  433,  435,  437,  439,  441,  444,  447,  450,
 /*  1980 */   453,  456,  458,  460,  462,  464,  466,  468,  470,  472,
 /*  1990 */   473,  474,  475,  477,  479,  481,  483,  300,  485,  489,
 /*  2000 */   492,  495,  498,  500,  502,  504,  506,  508,  511,  514,
 /*  2010 */   330,  521,  524,  526,  528,  530,  532,  534,  619,  692,
 /*  2020 */   619,  622,  130,  622,   19,  693,   79,  337,  184,  338,
 /*  2030 */   297,  837,  290,  619,  620,  621,  622,  831,  620,  837,
 /*  2040 */   290,  184,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  2050 */   635,  636,  637,  638,  639,  640,  621,   20,  694,  697,
 /*  2060 */   695,  696,   22,  698,   23,  987,  620,  699,   24,  700,
 /*  2070 */    25,  701,   28,  705,  620,   29,  137,   30,  707,  850,
 /*  2080 */   851,  708,  212,   31,  709,  213,  649,  650,  649,  650,
 /*  2090 */    32,  851,  850,   33,  710,  989,   34,  520,  213,  411,
 /*  2100 */   412,  414,  417,  419,  421,  385,  424,  425,  427,  429,
 /*  2110 */   431,  298,  433,  435,  437,  439,  441,  444,  447,  450,
 /*  2120 */   453,  456,  458,  460,  462,  464,  466,  468,  470,  472,
 /*  2130 */   473,  474,  475,  477,  479,  481,  483,  300,  485,  489,
 /*  2140 */   492,  495,  498,  500,  502,  504,  506,  508,  511,  514,
 /*  2150 */   330,  521,  524,  526,  528,  530,  532,  534,  619,   35,
 /*  2160 */   136,  622,  711,   36,   37,  337,   88,  338,   38,  837,
 /*  2170 */   290,  565,  939,  712,   39,  621,  337,  621,  338,  619,
 /*  2180 */   837,  290,  622,  211,  222,  250,  750,  940,  619,  620,
 /*  2190 */   621,  622,  610,  326,  327,  713,   41,  987,  211,  222,
 /*  2200 */   250,  750,   40,  714,  620,  626,   42,  715,  326,  327,
 /*  2210 */    43,  716,   44,  717,   45,  620,   46,  718,   47,  233,
 /*  2220 */   138,  719,  720,   48,  851,   49,  721,  990,  823,  851,
 /*  2230 */   722,  821,  824,  616,  723,  269,  986,  520,   50,  411,
 /*  2240 */   412,  414,  417,  419,  421,  385,  424,  425,  427,  429,
 /*  2250 */   431,  298,  433,  435,  437,  439,  441,  444,  447,  450,
 /*  2260 */   453,  456,  458,  460,  462,  464,  466,  468,  470,  472,
 /*  2270 */   473,  474,  475,  477,  479,  481,  483,  300,  485,  489,
 /*  2280 */   492,  495,  498,  500,  502,  504,  506,  508,  511,  514,
 /*  2290 */   330,  521,  524,  526,  528,  530,  532,  534,  619,  724,
 /*  2300 */   725,  622,  801,  562,  129,  131,   87,  726,   56,  337,
 /*  2310 */    51,  338,   52,  837,  290,  621,  852,  727,  837,  290,
 /*  2320 */   728,  620,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  2330 */   635,  636,  637,  638,  639,  640,  621,   53,  941,   54,
 /*  2340 */   729,   57,  730,   55,  733,  621,   58,   59,  620,  211,
 /*  2350 */   222,  250,  750,  620,  734,   60,  620,   61,  735,  326,
 /*  2360 */   327,   62,  736,   63,   64,  737,   65,  138,   66,  738,
 /*  2370 */    70,  851,  739,   67,  740,   68,  741,  520,   69,  411,
 /*  2380 */   412,  414,  417,  419,  421,  385,  424,  425,  427,  429,
 /*  2390 */   431,  298,  433,  435,  437,  439,  441,  444,  447,  450,
 /*  2400 */   453,  456,  458,  460,  462,  464,  466,  468,  470,  472,
 /*  2410 */   473,  474,  475,  477,  479,  481,  483,  300,  485,  489,
 /*  2420 */   492,  495,  498,  500,  502,  504,  506,  508,  511,  514,
 /*  2430 */   330,  521,  524,  526,  528,  530,  532,  534,  619,  742,
 /*  2440 */   619,  622,   73,  622,   72,  743,   92,   75,   76,  568,
 /*  2450 */    77,  129,  942,  744,  751,  621,  337,  943,  338,  332,
 /*  2460 */   837,  290,  161,  211,  222,  250,  750,    2,  211,  222,
 /*  2470 */   250,  750,  945,  326,  327,  754,  948,  987,  326,  327,
 /*  2480 */     5,  755,    6,  211,  222,  250,  750,  211,  222,  250,
 /*  2490 */   750,  950,  756,  326,  327,  620,  757,  326,  327,  843,
 /*  2500 */     7,  758,  211,  222,  250,  750,    8,  599,    9,  759,
 /*  2510 */    10,  760,  326,  327,  138,  536,  761,  520,  851,  411,
 /*  2520 */   412,  414,  417,  419,  421,  385,  424,  425,  427,  429,
 /*  2530 */   431,  298,  433,  435,  437,  439,  441,  444,  447,  450,
 /*  2540 */   453,  456,  458,  460,  462,  464,  466,  468,  470,  472,
 /*  2550 */   473,  474,  475,  477,  479,  481,  483,  300,  485,  489,
 /*  2560 */   492,  495,  498,  500,  502,  504,  506,  508,  511,  514,
 /*  2570 */   330,  521,  524,  526,  528,  530,  532,  534,  619,  284,
 /*  2580 */   285,  622,  253,  810,  581,  107,  139,  812,  539,  763,
 /*  2590 */     1,  798,  105,  765,  766,  621,  866,  621,  129,  953,
 /*  2600 */   767,  620,  108,  337,  626,  338,  219,  837,  290,  106,
 /*  2610 */   211,  222,  250,  750,  768,  823,  769,  770,  821,  824,
 /*  2620 */   326,  327,  771,  776,  781,  215,  784,  582,  341,  214,
 /*  2630 */   569,  817,  304,  345,  789,  170,  305,  128,  792,  796,
 /*  2640 */   150,  826,  620,  797,  179,  151,  649,  650,  181,  208,
 /*  2650 */   813,  814,  815,  201,  838,  987,  206,  204,  153,  205,
 /*  2660 */    91,  864,  307,  987,  881,  347,  886,  629,  630,  631,
 /*  2670 */   632,  633,  634,   93,  629,  630,  631,  632,  633,  634,
 /*  2680 */   898,  901,  803,  804,  918,  991,  312,  919,  811,  816,
 /*  2690 */   934,  121,  131,  992,  273,  187,  141,  155,  624,  556,
 /*  2700 */   625,  223,  810,  123,  144,  193,  812,  346,  589,  380,
 /*  2710 */   623,  620,  590,  823,  956,  619,  821,  824,  622,  592,
 /*  2720 */   234,  627,  628,  629,  630,  631,  632,  633,  634,  635,
 /*  2730 */   636,  637,  638,  639,  640,  621,  818,  819,  958,  352,
 /*  2740 */   353,  235,  994,  620,  125, 1588,  216,  237,  555,  167,
 /*  2750 */   175,  120,  557,  238,  869,  870,  871,  872,  873,  874,
 /*  2760 */   875,  876,  612,  240,  241,  619,  998, 1004,  622,  813,
 /*  2770 */   814,  815,  146,  133, 1588, 1588,  178, 1588,  995,  620,
 /*  2780 */  1588, 1588, 1588,  649,  650,  180, 1588,  620,  935,  619,
 /*  2790 */   131,  626,  622, 1588, 1588, 1588, 1588,  133, 1588, 1588,
 /*  2800 */  1588, 1588, 1005,  857,  858, 1588,  619,  811,  816,  622,
 /*  2810 */  1588, 1588,  217, 1588, 1588,  626,  848,  624,  817,  625,
 /*  2820 */   171,  642, 1588, 1588, 1588,  613,  614,  615,  380,  623,
 /*  2830 */   620,  203, 1588,  649,  650, 1588,  217,  619,  127,  954,
 /*  2840 */   622,  620,  817, 1588, 1588,  139,  619, 1588, 1588,  622,
 /*  2850 */   211,  222,  250,  750, 1588,  203, 1588,  649,  650, 1588,
 /*  2860 */   326,  327, 1588,  626, 1588,  844, 1588, 1588,  258, 1588,
 /*  2870 */  1588, 1588,  621,  624, 1588,  625, 1588,  236, 1588, 1588,
 /*  2880 */  1588, 1588, 1588, 1588,  380,  623,  620, 1588, 1588, 1588,
 /*  2890 */   817, 1588,  823,  269,  986,  821,  824, 1588, 1588, 1588,
 /*  2900 */  1588, 1588, 1588,  179, 1588,  649,  650, 1588,  627,  628,
 /*  2910 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  2920 */   639,  640,  621,  818,  819,  619, 1588, 1588,  622, 1588,
 /*  2930 */  1588, 1588,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  2940 */   635,  636,  637,  638,  639,  640,  621,  818,  819,  619,
 /*  2950 */   140, 1588,  622, 1588, 1588, 1588,  239,  139,  823, 1588,
 /*  2960 */  1588,  821,  824,  621, 1588, 1588, 1588, 1588, 1588,  132,
 /*  2970 */  1588, 1588,  269,  986, 1588,  626, 1588, 1588, 1588, 1588,
 /*  2980 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /*  2990 */   637,  638,  639,  640,  621,  818,  819,  619, 1588, 1588,
 /*  3000 */   622, 1588,  817,  621, 1588,  133, 1588, 1588, 1588, 1588,
 /*  3010 */   188, 1588, 1588, 1588,  612,  179, 1588,  649,  650,  619,
 /*  3020 */   620, 1588,  622,  626, 1588, 1588, 1588,  133, 1588, 1588,
 /*  3030 */  1588, 1588,  224, 1588, 1588,  134, 1588, 1588, 1588, 1588,
 /*  3040 */  1588, 1588, 1588, 1588, 1588,  626, 1588, 1588, 1588, 1588,
 /*  3050 */   817, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3060 */  1588, 1588, 1588,  203, 1588,  649,  650, 1588, 1588, 1588,
 /*  3070 */  1588, 1588,  817,  611, 1588, 1588, 1588,  613,  614,  615,
 /*  3080 */  1588, 1588,  621, 1588, 1588,  203,  620,  649,  650, 1588,
 /*  3090 */  1588, 1588,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  3100 */   635,  636,  637,  638,  639,  640,  621,  818,  819, 1588,
 /*  3110 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3120 */  1588, 1588, 1588, 1588, 1588,  624, 1588,  625, 1588, 1588,
 /*  3130 */  1588, 1588, 1588, 1588, 1588, 1588,  380,  623,  620, 1588,
 /*  3140 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /*  3150 */   637,  638,  639,  640,  621,  818,  819, 1588, 1588, 1588,
 /*  3160 */  1588, 1588,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  3170 */   635,  636,  637,  638,  639,  640,  621,  818,  819,  619,
 /*  3180 */  1588, 1588,  622, 1588, 1588, 1588, 1588,  133, 1588, 1588,
 /*  3190 */  1588, 1588,  194, 1588, 1588, 1588,  619,  142, 1588,  622,
 /*  3200 */  1588, 1588, 1588, 1588,  133,  626, 1588, 1588, 1588, 1588,
 /*  3210 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3220 */  1588, 1588,  626, 1588, 1588, 1588,  619, 1588, 1588,  622,
 /*  3230 */  1588, 1588,  817, 1588,  133, 1588, 1588, 1588, 1588,  999,
 /*  3240 */  1588, 1588, 1588,  619,  143,  203,  622,  649,  650,  817,
 /*  3250 */  1588,  133,  626, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3260 */  1588, 1588,  203, 1588,  649,  650, 1588, 1588, 1588,  626,
 /*  3270 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  817,
 /*  3280 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3290 */  1588, 1588,  203, 1588,  649,  650,  817, 1588, 1588, 1588,
 /*  3300 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  203,
 /*  3310 */  1588,  649,  650, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3320 */  1588, 1588,  627,  628,  629,  630,  631,  632,  633,  634,
 /*  3330 */   635,  636,  637,  638,  639,  640,  621,  818,  819,  627,
 /*  3340 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*  3350 */   638,  639,  640,  621,  818,  819, 1588, 1588, 1588, 1588,
 /*  3360 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  612, 1588,  627,
 /*  3370 */   628,  629,  630,  631,  632,  633,  634,  635,  636,  637,
 /*  3380 */   638,  639,  640,  621,  818,  819,  627,  628,  629,  630,
 /*  3390 */   631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
 /*  3400 */   621,  818,  819,  619, 1588, 1588,  622, 1588, 1588, 1588,
 /*  3410 */  1588,  133, 1588,  806,  810, 1588, 1588, 1588,  812, 1588,
 /*  3420 */  1588, 1588, 1588, 1588, 1588,  172,  642, 1588, 1588,  626,
 /*  3430 */   613,  614,  615,  619, 1588, 1588,  622, 1588, 1588, 1588,
 /*  3440 */  1588,  139, 1588,  859, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3450 */  1588, 1588, 1588, 1588, 1588, 1588,  817, 1588, 1588,  626,
 /*  3460 */  1588,  868, 1588, 1588,  557, 1588, 1588, 1588, 1588,  203,
 /*  3470 */  1588,  649,  650, 1588, 1588, 1588, 1588, 1588,  624, 1588,
 /*  3480 */   625,  813,  814,  815, 1588, 1588,  817, 1588,  178,  380,
 /*  3490 */   623,  620, 1588, 1588, 1588,  547,  684,  180, 1588,  179,
 /*  3500 */   293,  649,  650, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  3510 */  1588, 1588, 1588, 1588, 1588,  857,  858, 1588, 1588,  811,
 /*  3520 */   816, 1588, 1588, 1588, 1588,  313,  684, 1588, 1588,  624,
 /*  3530 */   293,  625, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  3540 */   380,  623,  620, 1588, 1588, 1588,  627,  628,  629,  630,
 /*  3550 */   631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
 /*  3560 */   621,  818,  819,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  3570 */  1588, 1588, 1588, 1588, 1588, 1588,  627,  628,  629,  630,
 /*  3580 */   631,  632,  633,  634,  635,  636,  637,  638,  639,  640,
 /*  3590 */   621,  818,  819,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  3600 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  3610 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  3620 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588, 1588,
 /*  3630 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  3640 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  3650 */   704,  706,  380,  623,  620,  523,  684, 1588, 1588, 1588,
 /*  3660 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  3670 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  545,
 /*  3680 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  3690 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3700 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3710 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3720 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  3730 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3740 */  1588,  544,  684, 1588, 1588, 1588,  293,  681,  682,  683,
 /*  3750 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  3760 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283,  612,  226,
 /*  3770 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  3780 */   704,  706,  380,  623,  620, 1588, 1588,  328, 1588,  329,
 /*  3790 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  3800 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  681,
 /*  3810 */   682,  683, 1588, 1588, 1588, 1588, 1588,  543,  684, 1588,
 /*  3820 */  1588, 1588,  293, 1588, 1588, 1588,  173,  642, 1588,  679,
 /*  3830 */   680,  613,  614,  615, 1588, 1588,  684, 1588, 1588, 1588,
 /*  3840 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680,  328,
 /*  3850 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  3860 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  3870 */   620, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  624,
 /*  3880 */  1588,  625, 1588, 1588, 1588,  681,  682,  683, 1588, 1588,
 /*  3890 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  3900 */  1588, 1588, 1588,  681,  682,  683, 1588,  542,  684, 1588,
 /*  3910 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  3920 */   680, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  3930 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  3940 */   687,  688,  704,  706,  380,  623,  620,  674, 1588,  226,
 /*  3950 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  3960 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588, 1588,
 /*  3970 */  1588, 1588, 1588,  541,  684,  681,  682,  683,  293, 1588,
 /*  3980 */  1588, 1588, 1588, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  3990 */  1588, 1588, 1588, 1588, 1588,  392,  684, 1588, 1588, 1588,
 /*  4000 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  4010 */  1588, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  4020 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  4030 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588, 1588,
 /*  4040 */  1588,  681,  682,  683, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4050 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4060 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  4070 */  1588, 1588,  810, 1588, 1588, 1588,  812, 1588, 1588, 1588,
 /*  4080 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  4090 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  4100 */   380,  623,  620,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  4110 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  4120 */   704,  706,  380,  623,  620,  408,  684, 1588, 1588, 1588,
 /*  4130 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680,  813,
 /*  4140 */   814,  815, 1588, 1588, 1588, 1588,  808, 1588,  809, 1588,
 /*  4150 */   828, 1588,  335, 1588, 1588, 1588, 1588,  294,  684, 1588,
 /*  4160 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  4170 */   680,  803,  804, 1588, 1588, 1588, 1588,  811,  816, 1588,
 /*  4180 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625,
 /*  4190 */  1588,  670,  684,  681,  682,  683,  293, 1588,  380,  623,
 /*  4200 */   620, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  4210 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  575,
 /*  4220 */   684, 1588, 1588, 1588,  293,  681,  682,  683, 1588, 1588,
 /*  4230 */  1588,  679,  680,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  4240 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  4250 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588,  681,
 /*  4260 */   682,  683, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  4270 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  4280 */   687,  688,  704,  706,  380,  623,  620,  681,  682,  683,
 /*  4290 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  328,
 /*  4300 */   810,  329, 1588,  283,  812,  226, 1588,  624, 1588,  625,
 /*  4310 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  4320 */   620, 1588, 1588, 1588, 1588, 1588, 1588,  328, 1588,  329,
 /*  4330 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  4340 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  4350 */   867,  558, 1588,  574,  684, 1588, 1588, 1588,  293, 1588,
 /*  4360 */  1588, 1588, 1588, 1588, 1588,  679,  680,  813,  814,  815,
 /*  4370 */  1588, 1588, 1588, 1588,  178,  413,  684, 1588, 1588, 1588,
 /*  4380 */   293, 1588, 1588,  180, 1588, 1588, 1588,  679,  680, 1588,
 /*  4390 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4400 */  1588,  857,  858, 1588, 1588,  811,  816, 1588, 1588, 1588,
 /*  4410 */  1588, 1588, 1588, 1588, 1588,  624, 1588,  625, 1588, 1588,
 /*  4420 */  1588,  681,  682,  683, 1588, 1588,  380,  623,  620, 1588,
 /*  4430 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  415,  684, 1588,
 /*  4440 */  1588, 1588,  293,  681,  682,  683, 1588, 1588, 1588,  679,
 /*  4450 */   680, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4460 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  4470 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  4480 */   380,  623,  620,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  4490 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  4500 */   704,  706,  380,  623,  620,  681,  682,  683, 1588, 1588,
 /*  4510 */  1588,  416,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  4520 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  4530 */  1588, 1588,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  4540 */  1588, 1588, 1588,  679,  680,  328, 1588,  329, 1588,  283,
 /*  4550 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  4560 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588, 1588,
 /*  4570 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  4580 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4590 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  4600 */   682,  683, 1588, 1588, 1588,  418,  684, 1588, 1588, 1588,
 /*  4610 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680,  328,
 /*  4620 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  4630 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  4640 */   620,  672, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  4650 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  4660 */   620, 1588, 1588, 1588, 1588, 1588, 1588,  422,  684, 1588,
 /*  4670 */  1588, 1588,  293,  681,  682,  683, 1588, 1588, 1588,  679,
 /*  4680 */   680, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  423,
 /*  4690 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  4700 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4710 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  4720 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  4730 */   704,  706,  380,  623,  620,  681,  682,  683, 1588, 1588,
 /*  4740 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4750 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,  682,  683,
 /*  4760 */  1588, 1588, 1588, 1588, 1588, 1588,  810, 1588, 1588, 1588,
 /*  4770 */   812, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  4780 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  4790 */   687,  688,  704,  706,  380,  623,  620,  328, 1588,  329,
 /*  4800 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  4810 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  426,
 /*  4820 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  4830 */  1588,  679,  680,  813,  814,  815, 1588, 1588, 1588, 1588,
 /*  4840 */   808, 1588,  809, 1588,  336, 1588,  335, 1588, 1588, 1588,
 /*  4850 */  1588,  428,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  4860 */  1588, 1588, 1588,  679,  680,  803,  804, 1588, 1588, 1588,
 /*  4870 */  1588,  811,  816, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4880 */  1588,  624, 1588,  625, 1588,  430,  684,  681,  682,  683,
 /*  4890 */   293, 1588,  380,  623,  620, 1588, 1588,  679,  680, 1588,
 /*  4900 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4910 */  1588, 1588, 1588,  432,  684, 1588, 1588, 1588,  293,  681,
 /*  4920 */   682,  683, 1588, 1588, 1588,  679,  680,  328, 1588,  329,
 /*  4930 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  4940 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  4950 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588,  328,
 /*  4960 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  4970 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  4980 */   620,  681,  682,  683, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  4990 */  1588, 1588, 1588,  328,  810,  329, 1588,  283,  812,  226,
 /*  5000 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  5010 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588, 1588,
 /*  5020 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  5030 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  5040 */   380,  623,  620, 1588,  800, 1588, 1588,  299,  684, 1588,
 /*  5050 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  5060 */   680,  813,  814,  815, 1588, 1588, 1588, 1588,  178,  703,
 /*  5070 */   684, 1588, 1588, 1588,  293, 1588, 1588,  180, 1588, 1588,
 /*  5080 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5090 */  1588, 1588, 1588, 1588, 1588,  857,  858, 1588, 1588,  811,
 /*  5100 */   816, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  624,
 /*  5110 */  1588,  625, 1588, 1588, 1588,  681,  682,  683, 1588, 1588,
 /*  5120 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5130 */  1588,  434,  684, 1588, 1588, 1588,  293,  681,  682,  683,
 /*  5140 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  5150 */  1588, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  5160 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  5170 */   687,  688,  704,  706,  380,  623,  620,  328, 1588,  329,
 /*  5180 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  5190 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  681,
 /*  5200 */   682,  683, 1588, 1588, 1588,  436,  684, 1588, 1588, 1588,
 /*  5210 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  5220 */  1588, 1588, 1588, 1588, 1588, 1588,  684, 1588, 1588, 1588,
 /*  5230 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680,  328,
 /*  5240 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  5250 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  5260 */   620, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5270 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  5280 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5290 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588,  438,
 /*  5300 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  5310 */  1588,  679,  680,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  5320 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  5330 */   704,  706,  380,  623,  620,  913, 1588,  283, 1588,  226,
 /*  5340 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  5350 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588, 1588,
 /*  5360 */  1588,  440,  684, 1588, 1588, 1588,  293,  681,  682,  683,
 /*  5370 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  5380 */  1588, 1588, 1588,  442,  684, 1588, 1588, 1588,  293, 1588,
 /*  5390 */  1588, 1588, 1588, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  5400 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  328, 1588,  329,
 /*  5410 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  5420 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  681,
 /*  5430 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5440 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5450 */  1588,  681,  682,  683, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5460 */   810, 1588, 1588, 1588,  812, 1588, 1588, 1588, 1588,  328,
 /*  5470 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  5480 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  5490 */   620,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  5500 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  5510 */   380,  623,  620,  443,  684, 1588, 1588, 1588,  293, 1588,
 /*  5520 */  1588, 1588, 1588, 1588, 1588,  679,  680,  813,  814,  815,
 /*  5530 */  1588, 1588, 1588, 1588,  808, 1588,  809, 1588,  805, 1588,
 /*  5540 */   335, 1588, 1588, 1588, 1588,  445,  684, 1588, 1588, 1588,
 /*  5550 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680,  803,
 /*  5560 */   804, 1588, 1588, 1588, 1588,  811,  816, 1588, 1588, 1588,
 /*  5570 */  1588, 1588, 1588, 1588, 1588,  624, 1588,  625, 1588,  446,
 /*  5580 */   684,  681,  682,  683,  293, 1588,  380,  623,  620, 1588,
 /*  5590 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5600 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  448,  684, 1588,
 /*  5610 */  1588, 1588,  293,  681,  682,  683, 1588, 1588, 1588,  679,
 /*  5620 */   680,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  5630 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  5640 */   380,  623,  620, 1588, 1588, 1588, 1588,  681,  682,  683,
 /*  5650 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  5660 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  5670 */   704,  706,  380,  623,  620,  681,  682,  683, 1588, 1588,
 /*  5680 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  328, 1588,  329,
 /*  5690 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  5700 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  5710 */  1588, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  5720 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  5730 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588, 1588,
 /*  5740 */  1588,  449,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  5750 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  5760 */  1588, 1588, 1588,  451,  684, 1588, 1588, 1588,  293, 1588,
 /*  5770 */  1588, 1588, 1588, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  5780 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5790 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5800 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  5810 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5820 */  1588, 1588, 1588, 1588, 1588,  452,  684, 1588, 1588, 1588,
 /*  5830 */   293,  681,  682,  683, 1588, 1588, 1588,  679,  680, 1588,
 /*  5840 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  328,
 /*  5850 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  5860 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  5870 */   620,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  5880 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  5890 */   380,  623,  620,  681,  682,  683, 1588, 1588, 1588,  454,
 /*  5900 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  5910 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588,  684, 1588,
 /*  5920 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  5930 */   680, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  5940 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  5950 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588, 1588,
 /*  5960 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,  682,  683,
 /*  5970 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  5980 */  1588, 1588, 1588, 1588, 1588,  681,  682,  683, 1588, 1588,
 /*  5990 */  1588, 1588, 1588,  455,  684, 1588, 1588, 1588,  293, 1588,
 /*  6000 */  1588, 1588, 1588, 1588, 1588,  679,  680,  328, 1588,  329,
 /*  6010 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  6020 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  906,
 /*  6030 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  6040 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588, 1588,
 /*  6050 */  1588, 1588, 1588, 1588, 1588,  457,  684, 1588, 1588, 1588,
 /*  6060 */   293,  681,  682,  683, 1588, 1588, 1588,  679,  680, 1588,
 /*  6070 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  459,  684, 1588,
 /*  6080 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  6090 */   680, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6100 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  6110 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6120 */   380,  623,  620,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  6130 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6140 */  1588, 1588, 1588, 1588, 1588,  681,  682,  683, 1588, 1588,
 /*  6150 */  1588, 1588, 1588, 1588,  810, 1588, 1588, 1588,  812, 1588,
 /*  6160 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  6170 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  6180 */   704,  706,  380,  623,  620,  328, 1588,  329, 1588,  283,
 /*  6190 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  6200 */   687,  688,  704,  706,  380,  623,  620,  461,  684, 1588,
 /*  6210 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  6220 */   680,  813,  814,  815, 1588, 1588, 1588, 1588,  808, 1588,
 /*  6230 */   809, 1588, 1588, 1588,  820, 1588, 1588, 1588, 1588,  463,
 /*  6240 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  6250 */  1588,  679,  680,  803,  804, 1588, 1588,  148, 1588,  811,
 /*  6260 */   816, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  624,
 /*  6270 */  1588,  625, 1588,  465,  684,  681,  682,  683,  293, 1588,
 /*  6280 */   380,  623,  620, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  6290 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6300 */  1588,  467,  684, 1588, 1588, 1588,  293,  681,  682,  683,
 /*  6310 */  1588, 1588, 1588,  679,  680,  328, 1588,  329, 1588,  283,
 /*  6320 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  6330 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588, 1588,
 /*  6340 */  1588,  681,  682,  683, 1588, 1588, 1588,  328, 1588,  329,
 /*  6350 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  6360 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  681,
 /*  6370 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6380 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  6390 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6400 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588,  328,
 /*  6410 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  6420 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  6430 */   620, 1588, 1588, 1588, 1588,  469,  684, 1588, 1588, 1588,
 /*  6440 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  6450 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  471,  684, 1588,
 /*  6460 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  6470 */   680, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6480 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6490 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6500 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  6510 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  476,
 /*  6520 */   684, 1588, 1588, 1588,  293,  681,  682,  683, 1588, 1588,
 /*  6530 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6540 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  6550 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  6560 */   704,  706,  380,  623,  620,  328, 1588,  329, 1588,  283,
 /*  6570 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  6580 */   687,  688,  704,  706,  380,  623,  620,  681,  682,  683,
 /*  6590 */  1588, 1588, 1588,  478,  684, 1588, 1588, 1588,  293, 1588,
 /*  6600 */  1588, 1588, 1588, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  6610 */  1588, 1588,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  6620 */  1588, 1588, 1588,  679,  680, 1588, 1588,  328, 1588,  329,
 /*  6630 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  6640 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  6650 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6660 */  1588,  681,  682,  683, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6670 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  6680 */   682,  683, 1588, 1588, 1588, 1588, 1588,  480,  684, 1588,
 /*  6690 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  6700 */   680,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  6710 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  6720 */   380,  623,  620,  907, 1588,  226, 1588,  624, 1588,  625,
 /*  6730 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  6740 */   620, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  482,
 /*  6750 */   684, 1588, 1588, 1588,  293,  681,  682,  683, 1588, 1588,
 /*  6760 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6770 */  1588,  484,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  6780 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  6790 */  1588, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  6800 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  6810 */   687,  688,  704,  706,  380,  623,  620,  681,  682,  683,
 /*  6820 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6830 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  6840 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588,  810, 1588,
 /*  6850 */  1588, 1588,  812, 1588, 1588, 1588, 1588,  328, 1588,  329,
 /*  6860 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  6870 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  328,
 /*  6880 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  6890 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  6900 */   620,  486,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  6910 */  1588, 1588, 1588,  679,  680,  813,  814,  815, 1588, 1588,
 /*  6920 */  1588, 1588,  808, 1588,  809, 1588,  825, 1588,  335, 1588,
 /*  6930 */  1588, 1588, 1588,  487,  684, 1588, 1588, 1588,  293, 1588,
 /*  6940 */  1588, 1588, 1588, 1588, 1588,  679,  680,  803,  804, 1588,
 /*  6950 */  1588, 1588, 1588,  811,  816, 1588, 1588, 1588, 1588, 1588,
 /*  6960 */  1588, 1588, 1588,  624, 1588,  625, 1588,  488,  684,  681,
 /*  6970 */   682,  683,  293, 1588,  380,  623,  620, 1588, 1588,  679,
 /*  6980 */   680, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  6990 */  1588, 1588, 1588, 1588, 1588,  490,  684, 1588, 1588, 1588,
 /*  7000 */   293,  681,  682,  683, 1588, 1588, 1588,  679,  680,  328,
 /*  7010 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  7020 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  7030 */   620, 1588, 1588, 1588, 1588,  681,  682,  683, 1588, 1588,
 /*  7040 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  7050 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  7060 */   380,  623,  620,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  7070 */  1588, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  7080 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  7090 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588, 1588,
 /*  7100 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  7110 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  7120 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588,  491,
 /*  7130 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  7140 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7150 */  1588,  493,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  7160 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  7170 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7180 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7190 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,  682,  683,
 /*  7200 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7210 */  1588, 1588, 1588,  494,  684, 1588, 1588, 1588,  293,  681,
 /*  7220 */   682,  683, 1588, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  7230 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  328, 1588,  329,
 /*  7240 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  7250 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  328,
 /*  7260 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  7270 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  7280 */   620,  681,  682,  683, 1588, 1588, 1588,  496,  684, 1588,
 /*  7290 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  7300 */   680, 1588, 1588, 1588, 1588, 1588,  684, 1588, 1588, 1588,
 /*  7310 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  7320 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  7330 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  7340 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7350 */  1588, 1588, 1588, 1588, 1588,  681,  682,  683, 1588, 1588,
 /*  7360 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7370 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  7380 */  1588,  497,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  7390 */  1588, 1588, 1588,  679,  680,  328, 1588,  329, 1588,  283,
 /*  7400 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  7410 */   687,  688,  704,  706,  380,  623,  620,  908, 1588,  226,
 /*  7420 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  7430 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588, 1588,
 /*  7440 */  1588, 1588, 1588,  499,  684, 1588, 1588, 1588,  293,  681,
 /*  7450 */   682,  683, 1588, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  7460 */  1588, 1588, 1588, 1588, 1588,  501,  684, 1588, 1588, 1588,
 /*  7470 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  7480 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  328,
 /*  7490 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  7500 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  7510 */   620,  681,  682,  683, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7520 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7530 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  7540 */  1588, 1588,  810, 1588, 1588, 1588,  812, 1588, 1588, 1588,
 /*  7550 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  7560 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  7570 */   380,  623,  620,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  7580 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  7590 */   704,  706,  380,  623,  620,  503,  684, 1588, 1588, 1588,
 /*  7600 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680,  813,
 /*  7610 */   814,  815, 1588, 1588, 1588, 1588,  808, 1588,  809, 1588,
 /*  7620 */   829, 1588,  335, 1588, 1588, 1588, 1588,  505,  684, 1588,
 /*  7630 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  7640 */   680,  803,  804, 1588, 1588, 1588, 1588,  811,  816, 1588,
 /*  7650 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625,
 /*  7660 */  1588,  507,  684,  681,  682,  683,  293, 1588,  380,  623,
 /*  7670 */   620, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  7680 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  509,
 /*  7690 */   684, 1588, 1588, 1588,  293,  681,  682,  683, 1588, 1588,
 /*  7700 */  1588,  679,  680,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  7710 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  7720 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588,  681,
 /*  7730 */   682,  683, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  7740 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  7750 */   687,  688,  704,  706,  380,  623,  620,  681,  682,  683,
 /*  7760 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  328,
 /*  7770 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  7780 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  7790 */   620, 1588, 1588, 1588, 1588, 1588, 1588,  328, 1588,  329,
 /*  7800 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  7810 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  7820 */  1588, 1588, 1588,  387,  684, 1588, 1588, 1588,  293, 1588,
 /*  7830 */  1588, 1588, 1588, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  7840 */  1588, 1588, 1588, 1588, 1588,  510,  684, 1588, 1588, 1588,
 /*  7850 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  7860 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7870 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7880 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7890 */  1588,  681,  682,  683, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7900 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  512,  684, 1588,
 /*  7910 */  1588, 1588,  293,  681,  682,  683, 1588, 1588, 1588,  679,
 /*  7920 */   680, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  7930 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  7940 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  7950 */   380,  623,  620,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  7960 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  7970 */   704,  706,  380,  623,  620,  681,  682,  683, 1588, 1588,
 /*  7980 */  1588,  388,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  7990 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  8000 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  8010 */  1588,  679,  680, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  8020 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  8030 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588, 1588,
 /*  8040 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  8050 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8060 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,  682,  683,
 /*  8070 */  1588, 1588, 1588, 1588, 1588,  513,  684, 1588, 1588, 1588,
 /*  8080 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680,  328,
 /*  8090 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  8100 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  8110 */   620,  909, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  8120 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  8130 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  515,  684, 1588,
 /*  8140 */  1588, 1588,  293,  681,  682,  683, 1588, 1588, 1588,  679,
 /*  8150 */   680, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  516,
 /*  8160 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  8170 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8180 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  8190 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  8200 */   704,  706,  380,  623,  620,  681,  682,  683, 1588, 1588,
 /*  8210 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8220 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,  682,  683,
 /*  8230 */  1588, 1588, 1588, 1588, 1588, 1588,  810, 1588, 1588, 1588,
 /*  8240 */   812, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  8250 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  8260 */   687,  688,  704,  706,  380,  623,  620,  328, 1588,  329,
 /*  8270 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  8280 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  389,
 /*  8290 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  8300 */  1588,  679,  680,  813,  814,  815, 1588, 1588, 1588, 1588,
 /*  8310 */   808, 1588,  809, 1588,  854, 1588,  335, 1588, 1588, 1588,
 /*  8320 */  1588,  517,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  8330 */  1588, 1588, 1588,  679,  680,  803,  804, 1588, 1588, 1588,
 /*  8340 */  1588,  811,  816, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8350 */  1588,  624, 1588,  625, 1588,  390,  684,  681,  682,  683,
 /*  8360 */   293, 1588,  380,  623,  620, 1588, 1588,  679,  680, 1588,
 /*  8370 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8380 */  1588, 1588, 1588,  525,  684, 1588, 1588, 1588,  293,  681,
 /*  8390 */   682,  683, 1588, 1588, 1588,  679,  680,  328, 1588,  329,
 /*  8400 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  8410 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  8420 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588,  328,
 /*  8430 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  8440 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  8450 */   620,  681,  682,  683, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8460 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  8470 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  8480 */   704,  706,  380,  623,  620, 1588, 1588, 1588, 1588, 1588,
 /*  8490 */  1588,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  8500 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  8510 */   380,  623,  620, 1588, 1588, 1588, 1588,  527,  684, 1588,
 /*  8520 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  8530 */   680, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  529,
 /*  8540 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  8550 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8560 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8570 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8580 */  1588, 1588, 1588, 1588, 1588,  681,  682,  683, 1588, 1588,
 /*  8590 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8600 */  1588,  531,  684, 1588, 1588, 1588,  293,  681,  682,  683,
 /*  8610 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  8620 */  1588, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  8630 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  8640 */   687,  688,  704,  706,  380,  623,  620,  328, 1588,  329,
 /*  8650 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  8660 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  681,
 /*  8670 */   682,  683, 1588, 1588, 1588,  533,  684, 1588, 1588, 1588,
 /*  8680 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  8690 */  1588, 1588, 1588, 1588,  684, 1588, 1588, 1588,  293, 1588,
 /*  8700 */  1588, 1588, 1588, 1588, 1588,  679,  680, 1588, 1588,  328,
 /*  8710 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  8720 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  8730 */   620, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8740 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  8750 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8760 */  1588,  681,  682,  683, 1588, 1588, 1588, 1588, 1588,  391,
 /*  8770 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /*  8780 */  1588,  679,  680,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  8790 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  8800 */   704,  706,  380,  623,  620,  910, 1588,  226, 1588,  624,
 /*  8810 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  8820 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8830 */  1588,  393,  684, 1588, 1588, 1588,  293,  681,  682,  683,
 /*  8840 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  8850 */  1588, 1588, 1588,  549,  684, 1588, 1588, 1588,  293, 1588,
 /*  8860 */  1588, 1588, 1588, 1588, 1588,  679,  680, 1588, 1588, 1588,
 /*  8870 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  328, 1588,  329,
 /*  8880 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  8890 */   685,  686,  687,  688,  704,  706,  380,  623,  620,  681,
 /*  8900 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8910 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8920 */  1588,  681,  682,  683, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  8930 */   810, 1588, 1588, 1588,  812, 1588, 1588, 1588, 1588,  328,
 /*  8940 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  8950 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  8960 */   620,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  8970 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  8980 */   380,  623,  620,  550,  684, 1588, 1588, 1588,  293, 1588,
 /*  8990 */  1588, 1588, 1588, 1588, 1588,  679,  680,  813,  814,  815,
 /*  9000 */  1588, 1588, 1588, 1588,  808, 1588,  809, 1588,  855, 1588,
 /*  9010 */   335, 1588, 1588, 1588, 1588,  551,  684, 1588, 1588, 1588,
 /*  9020 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680,  803,
 /*  9030 */   804, 1588, 1588, 1588, 1588,  811,  816, 1588, 1588, 1588,
 /*  9040 */  1588, 1588, 1588, 1588, 1588,  624, 1588,  625, 1588,  553,
 /*  9050 */   684,  681,  682,  683,  293, 1588,  380,  623,  620, 1588,
 /*  9060 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9070 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  570,  684, 1588,
 /*  9080 */  1588, 1588,  293,  681,  682,  683, 1588, 1588, 1588,  679,
 /*  9090 */   680,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  9100 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  9110 */   380,  623,  620, 1588, 1588, 1588, 1588,  681,  682,  683,
 /*  9120 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  9130 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  9140 */   704,  706,  380,  623,  620,  681,  682,  683, 1588, 1588,
 /*  9150 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  328, 1588,  329,
 /*  9160 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  9170 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  9180 */  1588, 1588, 1588, 1588, 1588,  328, 1588,  329, 1588,  283,
 /*  9190 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  9200 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588, 1588,
 /*  9210 */  1588,  573,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  9220 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  9230 */  1588, 1588, 1588,  578,  684, 1588, 1588,  619,  293, 1588,
 /*  9240 */   622, 1588, 1588, 1588, 1588,  679,  680,  644, 1588, 1588,
 /*  9250 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9260 */  1588, 1588, 1588,  626, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9270 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  9280 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9290 */  1588,  616, 1588, 1588, 1588,  579,  684, 1588, 1588, 1588,
 /*  9300 */   293,  681,  682,  683, 1588, 1588, 1588,  679,  680, 1588,
 /*  9310 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  328,
 /*  9320 */  1588,  329, 1588,  283, 1588,  226, 1588,  624, 1588,  625,
 /*  9330 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  9340 */   620,  328, 1588,  329, 1588,  283, 1588,  226, 1588,  624,
 /*  9350 */  1588,  625,  296,  690,  685,  686,  687,  688,  704,  706,
 /*  9360 */   380,  623,  620,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  9370 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9380 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /*  9390 */   637,  638,  639,  640,  621, 1588, 1588, 1588, 1588, 1588,
 /*  9400 */  1588, 1588, 1588,  328, 1588,  329, 1588,  283, 1588,  226,
 /*  9410 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  9420 */   704,  706,  380,  623,  620,  619, 1588, 1588,  622, 1588,
 /*  9430 */   684, 1588, 1588,  139,  293, 1588, 1588, 1588, 1588, 1588,
 /*  9440 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9450 */  1588,  626, 1588, 1588, 1588,  619, 1588, 1588,  622, 1588,
 /*  9460 */  1588, 1588, 1588,  133, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9470 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  817, 1588,
 /*  9480 */  1588,  626, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9490 */  1588,  179, 1588,  649,  650, 1588, 1588,  681,  682,  683,
 /*  9500 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  817, 1588,
 /*  9510 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  684, 1588,
 /*  9520 */  1588,  203,  293,  649,  650, 1588, 1588, 1588, 1588,  679,
 /*  9530 */   680, 1588, 1588, 1588, 1588, 1588, 1588,  671, 1588,  329,
 /*  9540 */  1588,  283, 1588,  226, 1588,  624, 1588,  625,  296,  690,
 /*  9550 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /*  9560 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  627,  628,
 /*  9570 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  9580 */   639,  640,  621,  818,  819,  681,  682,  683, 1588, 1588,
 /*  9590 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  627,  628,
 /*  9600 */   629,  630,  631,  632,  633,  634,  635,  636,  637,  638,
 /*  9610 */   639,  640,  621,  818,  819, 1588, 1588, 1588, 1588, 1588,
 /*  9620 */  1588, 1588, 1588, 1588, 1588,  914, 1588,  329, 1588,  283,
 /*  9630 */  1588,  226, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  9640 */   687,  688,  704,  706,  380,  623,  620, 1588,  684, 1588,
 /*  9650 */  1588, 1588,  293, 1588, 1588, 1588, 1588, 1588, 1588,  679,
 /*  9660 */   680, 1588, 1588, 1588, 1588, 1588,  684, 1588, 1588, 1588,
 /*  9670 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /*  9680 */  1588, 1588,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  9690 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  9700 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9710 */  1588, 1588, 1588, 1588, 1588,  681,  682,  683, 1588, 1588,
 /*  9720 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9730 */  1588, 1588, 1588,  681,  682,  683, 1588, 1588, 1588, 1588,
 /*  9740 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  9750 */   682,  683, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9760 */  1588,  902, 1588,  624, 1588,  625,  296,  690,  685,  686,
 /*  9770 */   687,  688,  704,  706,  380,  623,  620, 1588, 1588,  903,
 /*  9780 */  1588,  624, 1588,  625,  296,  690,  685,  686,  687,  688,
 /*  9790 */   704,  706,  380,  623,  620,  904, 1588,  624, 1588,  625,
 /*  9800 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  9810 */   620, 1588,  684, 1588, 1588, 1588,  293, 1588, 1588, 1588,
 /*  9820 */  1588, 1588, 1588,  679,  680, 1588, 1588, 1588, 1588, 1588,
 /*  9830 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9840 */  1588, 1588, 1588, 1588,  810,  282, 1588, 1588,  812, 1588,
 /*  9850 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9860 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9870 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,
 /*  9880 */   682,  683, 1588, 1588, 1588,  601,  357,  126,  582, 1588,
 /*  9890 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9900 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9910 */  1588,  813,  814,  815, 1588, 1588, 1588, 1588,  204, 1588,
 /*  9920 */   205, 1588, 1588, 1588, 1588,  905, 1588,  624, 1588,  625,
 /*  9930 */   296,  690,  685,  686,  687,  688,  704,  706,  380,  623,
 /*  9940 */   620, 1588, 1588,  803,  804, 1588, 1588, 1588, 1588,  811,
 /*  9950 */   816,  810,  282, 1588, 1588,  812, 1588, 1588, 1588,  624,
 /*  9960 */  1588,  625, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  684,
 /*  9970 */   380,  623,  620,  293, 1588, 1588, 1588, 1588, 1588, 1588,
 /*  9980 */   679,  680, 1588, 1588, 1588,  684, 1588, 1588, 1588,  293,
 /*  9990 */  1588, 1588,  604,  357,  126,  582,  679,  680, 1588, 1588,
 /* 10000 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10010 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  813,  814,
 /* 10020 */   815, 1588, 1588, 1588, 1588,  204, 1588,  205, 1588, 1588,
 /* 10030 */  1588, 1588, 1588, 1588, 1588, 1588,  681,  682,  683, 1588,
 /* 10040 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10050 */   803,  804,  681,  682,  683, 1588,  811,  816, 1588, 1588,
 /* 10060 */  1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625, 1588,
 /* 10070 */   684, 1588, 1588, 1588,  293, 1588, 1588,  380,  623,  620,
 /* 10080 */  1588,  679,  680, 1588,  624, 1588,  625,  675,  690,  685,
 /* 10090 */   686,  687,  688,  704,  706,  380,  623,  620, 1588, 1588,
 /* 10100 */   624, 1588,  625,  677,  690,  685,  686,  687,  688,  704,
 /* 10110 */   706,  380,  623,  620,  684, 1588, 1588,  619,  293, 1588,
 /* 10120 */   622, 1588, 1588, 1588, 1588,  679,  680,  646, 1588, 1588,
 /* 10130 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,  682,  683,
 /* 10140 */  1588, 1588, 1588,  626, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10150 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10160 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10170 */  1588,  616, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10180 */  1588,  681,  682,  683, 1588,  624, 1588,  625,  899,  690,
 /* 10190 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /* 10200 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10210 */   684, 1588, 1588, 1588,  293, 1588, 1588, 1588, 1588, 1588,
 /* 10220 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588,  624,
 /* 10230 */  1588,  625,  900,  690,  685,  686,  687,  688,  704,  706,
 /* 10240 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10250 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10260 */   627,  628,  629,  630,  631,  632,  633,  634,  635,  636,
 /* 10270 */   637,  638,  639,  640,  621, 1588,  684,  681,  682,  683,
 /* 10280 */   293, 1588, 1588, 1588, 1588, 1588, 1588,  679,  680, 1588,
 /* 10290 */   684, 1588,  619, 1588,  293,  622, 1588, 1588, 1588, 1588,
 /* 10300 */  1588,  679,  680, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10310 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  626, 1588,
 /* 10320 */  1588, 1588, 1588, 1588, 1588,  624, 1588,  625, 1588,  676,
 /* 10330 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /* 10340 */  1588, 1588, 1588,  681,  682,  683,  616, 1588, 1588, 1588,
 /* 10350 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  681,  682,  683,
 /* 10360 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10370 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10380 */  1588, 1588, 1588,  810, 1588, 1588, 1588,  812, 1588, 1588,
 /* 10390 */  1588,  624, 1588,  625, 1588,  678,  685,  686,  687,  688,
 /* 10400 */   704,  706,  380,  623,  620,  624, 1588,  625, 1588,  689,
 /* 10410 */   685,  686,  687,  688,  704,  706,  380,  623,  620, 1588,
 /* 10420 */  1588, 1588, 1588,  810,  584, 1588, 1588,  812, 1588, 1588,
 /* 10430 */   890, 1588, 1588,  557, 1588,  627,  628,  629,  630,  631,
 /* 10440 */   632,  633,  634,  635,  636,  637,  638,  639,  640,  621,
 /* 10450 */   813,  814,  815, 1588, 1588, 1588, 1588,  178,  810,  586,
 /* 10460 */  1588, 1588,  812, 1588, 1588, 1588,  180,  582, 1588, 1588,
 /* 10470 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10480 */  1588, 1588, 1588, 1588,  857,  858, 1588, 1588,  811,  816,
 /* 10490 */   813,  814,  815, 1588, 1588, 1588, 1588,  204,  624,  205,
 /* 10500 */   625, 1588,  582,  810,  997, 1588, 1588,  812, 1588,  380,
 /* 10510 */   623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10520 */  1588, 1588,  803,  804, 1588,  813,  814,  815,  811,  816,
 /* 10530 */  1588, 1588,  204, 1588,  205, 1588, 1588, 1588,  624, 1588,
 /* 10540 */   625, 1588, 1588, 1588, 1588, 1588, 1588,  582, 1588,  380,
 /* 10550 */   623,  620, 1588, 1588, 1588, 1588, 1588,  803,  804, 1588,
 /* 10560 */  1588, 1588, 1588,  811,  816, 1588, 1588, 1588, 1588, 1588,
 /* 10570 */   813,  814,  815,  624, 1588,  625, 1588,  204, 1588,  205,
 /* 10580 */  1588, 1588, 1588, 1588,  380,  623,  620, 1588,  810,  603,
 /* 10590 */  1588, 1588,  812, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10600 */  1588, 1588,  803,  804, 1588, 1588, 1588, 1588,  811,  816,
 /* 10610 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,
 /* 10620 */   625, 1588,  810, 1001, 1588, 1588,  812, 1588, 1588,  380,
 /* 10630 */   623,  620,  582, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10640 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10650 */  1588, 1588, 1588, 1588, 1588,  813,  814,  815, 1588, 1588,
 /* 10660 */  1588, 1588,  204, 1588,  205, 1588,  582, 1588, 1588, 1588,
 /* 10670 */  1588, 1588, 1588,  810, 1588, 1588, 1588,  812, 1588, 1588,
 /* 10680 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  803,  804,  813,
 /* 10690 */   814,  815, 1588,  811,  816, 1588,  204, 1588,  205, 1588,
 /* 10700 */  1588, 1588, 1588,  624, 1588,  625, 1588, 1588, 1588, 1588,
 /* 10710 */  1588, 1588, 1588, 1588,  380,  623,  620, 1588, 1588, 1588,
 /* 10720 */   799,  803,  804,  557, 1588, 1588, 1588,  811,  816, 1588,
 /* 10730 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625,
 /* 10740 */   813,  814,  815, 1588, 1588, 1588, 1588,  178,  380,  623,
 /* 10750 */   620, 1588, 1588, 1588, 1588,  810,  180, 1588, 1588,  812,
 /* 10760 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10770 */  1588, 1588, 1588, 1588,  857,  858, 1588, 1588,  811,  816,
 /* 10780 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,
 /* 10790 */   625, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  380,
 /* 10800 */   623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10810 */  1588,  810, 1588, 1588, 1588,  812, 1588, 1588, 1588, 1588,
 /* 10820 */  1588, 1588,  813,  814,  815, 1588, 1588, 1588, 1588,  861,
 /* 10830 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  862, 1588,
 /* 10840 */   334, 1588,  339, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10850 */  1588, 1588, 1588, 1588, 1588, 1588,  857,  858, 1588, 1588,
 /* 10860 */   811,  816,  810, 1588, 1588, 1588,  812, 1588, 1588, 1588,
 /* 10870 */   624, 1588,  625, 1588, 1588, 1588, 1588, 1588,  813,  814,
 /* 10880 */   815,  380,  623,  620, 1588,  861, 1588, 1588, 1588, 1588,
 /* 10890 */  1588, 1588, 1588, 1588,  862, 1588,  340, 1588,  339, 1588,
 /* 10900 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10910 */  1588, 1588,  857,  858, 1588, 1588,  811,  816, 1588, 1588,
 /* 10920 */  1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625,  813,
 /* 10930 */   814,  815, 1588, 1588, 1588, 1588,  861,  380,  623,  620,
 /* 10940 */  1588, 1588, 1588, 1588,  810,  862, 1588, 1588,  812,  863,
 /* 10950 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 10960 */  1588, 1588, 1588,  857,  858, 1588,  149,  811,  816, 1588,
 /* 10970 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625,
 /* 10980 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  380,  623,
 /* 10990 */   620,  889, 1588, 1588,  557, 1588, 1588, 1588, 1588, 1588,
 /* 11000 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11010 */  1588,  813,  814,  815, 1588, 1588, 1588, 1588,  178, 1588,
 /* 11020 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  180, 1588, 1588,
 /* 11030 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11040 */  1588, 1588, 1588, 1588, 1588,  857,  858,  810, 1588,  811,
 /* 11050 */   816,  812, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  624,
 /* 11060 */  1588,  625, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11070 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11080 */  1588,  810,  996, 1588, 1588,  812, 1588, 1588, 1588, 1588,
 /* 11090 */  1588,  936,  583, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11100 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11110 */  1588, 1588, 1588, 1588,  813,  814,  815, 1588, 1588, 1588,
 /* 11120 */  1588,  204, 1588,  205, 1588,  582, 1588, 1588, 1588, 1588,
 /* 11130 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11140 */  1588, 1588, 1588, 1588, 1588, 1588,  803,  804,  813,  814,
 /* 11150 */   815, 1588,  811,  816, 1588,  204, 1588,  205, 1588, 1588,
 /* 11160 */  1588, 1588,  624, 1588,  625, 1588, 1588, 1588, 1588, 1588,
 /* 11170 */  1588, 1588, 1588,  380,  623,  620, 1588, 1588, 1588, 1588,
 /* 11180 */   803,  804, 1588, 1588, 1588, 1588,  811,  816, 1588, 1588,
 /* 11190 */  1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625, 1588,
 /* 11200 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  380,  623,  620,
 /* 11210 */  1588, 1588,  810, 1000, 1588, 1588,  812, 1588, 1588, 1588,
 /* 11220 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11230 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11240 */  1588, 1588, 1588, 1588, 1588, 1588,  810, 1588, 1588, 1588,
 /* 11250 */   812, 1588, 1588, 1588, 1588, 1588,  582, 1588, 1588, 1588,
 /* 11260 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11270 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  813,
 /* 11280 */   814,  815, 1588, 1588, 1588, 1588,  204, 1588,  205, 1588,
 /* 11290 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11300 */  1588,  810, 1588, 1588, 1588,  812, 1588, 1588, 1588, 1588,
 /* 11310 */  1588,  803,  804,  813,  814,  815, 1588,  811,  816, 1588,
 /* 11320 */   808, 1588,  809, 1588, 1588, 1588,  807,  624, 1588,  625,
 /* 11330 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  380,  623,
 /* 11340 */   620, 1588, 1588, 1588, 1588,  803,  804, 1588, 1588, 1588,
 /* 11350 */  1588,  811,  816, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11360 */  1588,  624, 1588,  625, 1588, 1588, 1588, 1588,  813,  814,
 /* 11370 */   815, 1588,  380,  623,  620,  861, 1588, 1588, 1588, 1588,
 /* 11380 */  1588,  810, 1588, 1588,  862,  812, 1588, 1588,  860, 1588,
 /* 11390 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11400 */  1588, 1588,  857,  858, 1588, 1588,  811,  816, 1588, 1588,
 /* 11410 */  1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625, 1588,
 /* 11420 */  1588, 1588, 1588, 1588, 1588, 1588, 1588,  380,  623,  620,
 /* 11430 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11440 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  813,  814,
 /* 11450 */   815, 1588, 1588, 1588, 1588,  808, 1588,  809, 1588, 1588,
 /* 11460 */  1588,  802, 1588, 1588,  810, 1588, 1588, 1588,  812, 1588,
 /* 11470 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11480 */   803,  804, 1588, 1588, 1588, 1588,  811,  816, 1588, 1588,
 /* 11490 */  1588, 1588, 1588, 1588, 1588, 1588,  624, 1588,  625,  810,
 /* 11500 */  1588, 1588, 1588,  812, 1588, 1588, 1588,  380,  623,  620,
 /* 11510 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11520 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11530 */  1588,  813,  814,  815, 1588, 1588, 1588, 1588,  808, 1588,
 /* 11540 */   809, 1588, 1588, 1588,  827, 1588, 1588, 1588, 1588, 1588,
 /* 11550 */  1588, 1588, 1588, 1588,  810, 1588, 1588, 1588,  812, 1588,
 /* 11560 */  1588, 1588, 1588,  803,  804, 1588,  813,  814,  815,  811,
 /* 11570 */   816, 1588, 1588,  861, 1588, 1588, 1588, 1588, 1588,  624,
 /* 11580 */  1588,  625,  862, 1588, 1588, 1588,  856, 1588, 1588, 1588,
 /* 11590 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11600 */   857,  858, 1588, 1588,  811,  816, 1588, 1588, 1588, 1588,
 /* 11610 */  1588, 1588, 1588, 1588,  624, 1588,  625, 1588, 1588, 1588,
 /* 11620 */  1588,  813,  814,  815, 1588,  380,  623,  620,  861, 1588,
 /* 11630 */  1588, 1588, 1588, 1588,  810, 1588, 1588,  862,  812, 1588,
 /* 11640 */  1588,  865, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11650 */  1588, 1588, 1588, 1588, 1588,  857,  858, 1588, 1588,  811,
 /* 11660 */   816, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  624,
 /* 11670 */  1588,  625, 1588, 1588, 1588, 1588, 1588, 1588,  933, 1588,
 /* 11680 */   380,  623,  620, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11690 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11700 */  1588,  813,  814,  815, 1588, 1588, 1588, 1588,  204, 1588,
 /* 11710 */   205, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11720 */  1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11730 */  1588, 1588, 1588,  803,  804, 1588, 1588, 1588, 1588,  811,
 /* 11740 */   816, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,  624,
 /* 11750 */  1588,  625, 1588, 1588, 1588, 1588, 1588, 1588, 1588, 1588,
 /* 11760 */   380,  623,  620,
);
static $yy_lookahead = array(
 /*     0 */     3,    2,   17,    6,    5,    8,    5,   10,   11,  164,
 /*    10 */   165,  166,  167,  168,   50,  170,  171,  172,  173,  174,
 /*    20 */   175,  176,   22,   34,   24,   25,   29,  299,   28,  301,
 /*    30 */    30,   31,   33,   48,   49,   36,   37,   38,   39,   50,
 /*    40 */    41,   42,   43,   44,   45,   46,   47,   48,  203,  296,
 /*    50 */   205,  206,  207,  208,  209,  210,  211,  212,  213,  214,
 /*    60 */   215,  177,  178,   66,  180,   68,  221,  222,   71,   72,
 /*    70 */   188,   25,    3,  189,   28,    6,   30,  195,  196,   82,
 /*    80 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*    90 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   100 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   110 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*   120 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   130 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   140 */    71,   72,  310,  146,  147,  148,  149,  150,  151,  152,
 /*   150 */   153,  154,  155,  156,  157,  158,  159,  160,    3,  216,
 /*   160 */   217,    6,    0,    8,    2,   17,   11,    5,  178,    7,
 /*   170 */   180,    8,    9,   10,   11,  193,   14,  216,  217,  189,
 /*   180 */    18,   19,  200,  201,   29,  193,  304,  305,  306,  307,
 /*   190 */   308,  309,  200,  201,  312,   33,   48,   49,   36,   37,
 /*   200 */    38,   39,   21,   41,   42,   43,   44,   45,   46,   47,
 /*   210 */    48,    3,   24,   25,    6,   15,   28,   17,   30,  310,
 /*   220 */    20,   66,   22,   68,   24,   25,   71,   72,   28,  160,
 /*   230 */    30,   50,   51,   52,   71,   72,  184,   82,   83,   84,
 /*   240 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*   250 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*   260 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*   270 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*   280 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*   290 */   135,  136,  137,  138,  139,  140,  141,  142,  222,  223,
 /*   300 */   224,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*   310 */   155,  156,  157,  158,  159,  160,    3,  184,  168,    6,
 /*   320 */   170,  171,  172,   10,   11,  203,  176,  205,  206,  207,
 /*   330 */   208,  209,  210,  211,  212,  213,  214,  215,  156,  157,
 /*   340 */   158,  159,   29,  221,  222,   75,   76,   77,   78,   79,
 /*   350 */    80,   81,   82,  203,  279,  205,  206,  207,  208,  209,
 /*   360 */   210,  211,  212,  213,  214,  215,  249,   22,  160,   24,
 /*   370 */    25,  221,  222,   28,  184,   30,  186,  187,  188,   66,
 /*   380 */    28,   68,   30,  188,   71,   72,   15,  188,   17,  298,
 /*   390 */   299,   20,  301,  216,  217,   82,   83,   84,   85,   86,
 /*   400 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*   410 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*   420 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*   430 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*   440 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*   450 */   137,  138,  139,  140,  141,  142,  222,  223,  224,  146,
 /*   460 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*   470 */   157,  158,  159,  160,    3,  280,  281,    6,  167,    8,
 /*   480 */   281,  182,   11,  184,  173,  174,  175,  203,  250,  205,
 /*   490 */   206,  207,  208,  209,  210,  211,  212,  213,  214,  215,
 /*   500 */    29,  178,  312,  180,  255,  221,  222,  312,   15,  188,
 /*   510 */    17,  312,  189,   20,  203,   21,  205,  206,  207,  208,
 /*   520 */   209,  210,  211,  212,  213,  214,  215,  177,   34,  182,
 /*   530 */   180,  184,  221,  222,  256,  177,  178,   66,  180,   68,
 /*   540 */   192,  193,   71,   72,   50,   51,   52,  189,  200,  201,
 /*   550 */   182,  300,  184,   82,   83,   84,   85,   86,   87,   88,
 /*   560 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*   570 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*   580 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*   590 */   119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
 /*   600 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*   610 */   139,  140,  141,  142,  216,  217,  300,  146,  147,  148,
 /*   620 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*   630 */   159,  160,    3,  312,  184,    6,  167,    8,   71,   72,
 /*   640 */    11,  178,  173,  174,  175,  184,  257,   11,  187,  188,
 /*   650 */   188,   33,  189,  256,   36,   37,   38,   39,   29,   41,
 /*   660 */    42,   43,   44,   45,   46,   47,   48,  188,    3,  184,
 /*   670 */   188,    6,  203,   21,  205,  206,  207,  208,  209,  210,
 /*   680 */   211,  212,  213,  214,  215,    2,   34,  188,    5,  257,
 /*   690 */   221,  222,   56,  177,  178,   66,  180,   68,  248,   34,
 /*   700 */    71,   72,   50,   51,   52,  189,  184,   71,   72,  187,
 /*   710 */   188,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*   720 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*   730 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*   740 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*   750 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*   760 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*   770 */   141,  142,   11,  312,  312,  146,  147,  148,  149,  150,
 /*   780 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*   790 */     3,  312,    7,    6,  312,    8,  174,  175,   11,   14,
 /*   800 */   191,  192,  193,   18,   19,   17,  192,  193,  188,  200,
 /*   810 */   201,  312,  193,  189,  200,  201,   29,   56,   33,  200,
 /*   820 */   201,   36,   37,   38,   39,  160,   41,   42,   43,   44,
 /*   830 */    45,   46,   47,   48,  312,  177,  178,   49,  180,  184,
 /*   840 */    15,  184,   17,  188,  187,  188,   17,  189,  188,   20,
 /*   850 */   195,  196,  188,   66,  199,   68,  232,  233,   71,   72,
 /*   860 */   236,  237,  238,  239,  240,  241,  242,  243,  184,   82,
 /*   870 */    83,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*   880 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*   890 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*   900 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*   910 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*   920 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*   930 */    47,   48,  312,  146,  147,  148,  149,  150,  151,  152,
 /*   940 */   153,  154,  155,  156,  157,  158,  159,  160,    3,  221,
 /*   950 */   222,    6,  173,    8,  175,  178,   11,  180,   10,  304,
 /*   960 */   305,  306,  307,  308,  309,   10,  189,  312,    3,  312,
 /*   970 */    11,    6,  312,  169,   29,   13,  312,  177,  178,  179,
 /*   980 */   180,  223,  224,  179,  184,  184,   21,  187,  188,  189,
 /*   990 */   190,  191,  192,  193,  190,  191,  192,  193,  223,  224,
 /*  1000 */   200,  201,  188,  184,  200,  201,  187,  188,  184,  195,
 /*  1010 */   196,   66,   64,   68,  184,   56,   71,   72,  188,   64,
 /*  1020 */   188,  188,  188,   61,  194,  195,  196,   82,   83,   84,
 /*  1030 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  1040 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1050 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1060 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  1070 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1080 */   135,  136,  137,  138,  139,  140,  141,  142,   10,   11,
 /*  1090 */   184,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  1100 */   155,  156,  157,  158,  159,  160,    3,  189,   13,    6,
 /*  1110 */    13,    8,  312,  281,   11,  281,  223,  224,  304,  305,
 /*  1120 */   306,  307,  308,  309,  188,  160,  312,  223,  224,   32,
 /*  1130 */     3,  312,   29,    6,  304,  305,  306,  307,  308,  309,
 /*  1140 */   193,  178,  312,  180,  312,  312,  312,  200,  201,   71,
 /*  1150 */    72,  233,  189,  282,  236,  237,  238,  239,  240,  241,
 /*  1160 */   242,  243,    3,  226,  227,    6,   71,   72,  173,   66,
 /*  1170 */   175,   68,  184,  184,   71,   72,  188,   50,   51,  300,
 /*  1180 */    21,  188,  188,  195,  196,   82,   83,   84,   85,   86,
 /*  1190 */    87,   88,   89,   90,   91,   92,   93,   94,   95,   96,
 /*  1200 */    97,   98,   99,  100,  101,  102,  103,  104,  105,  106,
 /*  1210 */   107,  108,  109,  110,  111,  112,  113,  114,  115,  116,
 /*  1220 */   117,  118,  119,  120,  121,  122,  123,  124,  125,  126,
 /*  1230 */   127,  128,  129,  130,  131,  132,  133,  134,  135,  136,
 /*  1240 */   137,  138,  139,  140,  141,  142,   16,  184,  312,  146,
 /*  1250 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*  1260 */   157,  158,  159,  160,    3,  202,  273,    6,  275,    8,
 /*  1270 */   277,  278,   11,   11,   10,  300,    3,   17,   16,    6,
 /*  1280 */     3,  188,   16,    6,   11,   17,   56,  160,   11,   17,
 /*  1290 */    29,   13,  304,  305,  306,  307,  308,  309,   12,   13,
 /*  1300 */   312,  178,  179,  180,  188,  312,  312,  244,  245,   49,
 /*  1310 */    32,  218,  189,  190,  191,  192,  193,   49,   56,  160,
 /*  1320 */   300,   49,   56,  200,  201,  144,  145,   66,  257,   68,
 /*  1330 */    66,   67,   71,   72,  218,   62,   12,   13,   65,   62,
 /*  1340 */   257,   68,   65,   82,   83,   84,   85,   86,   87,   88,
 /*  1350 */    89,   90,   91,   92,   93,   94,   95,   96,   97,   98,
 /*  1360 */    99,  100,  101,  102,  103,  104,  105,  106,  107,  108,
 /*  1370 */   109,  110,  111,  112,  113,  114,  115,  116,  117,  118,
 /*  1380 */   119,  120,  121,  122,  123,  124,  125,  126,  127,  128,
 /*  1390 */   129,  130,  131,  132,  133,  134,  135,  136,  137,  138,
 /*  1400 */   139,  140,  141,  142,   11,  312,  256,  146,  147,  148,
 /*  1410 */   149,  150,  151,  152,  153,  154,  155,  156,  157,  158,
 /*  1420 */   159,  160,    3,   15,    3,    6,   13,    6,  312,    3,
 /*  1430 */    11,   11,    6,  160,  184,   13,   15,  160,   17,   31,
 /*  1440 */   216,   20,  224,   22,  169,   24,   25,   17,   29,   28,
 /*  1450 */    13,   30,  202,  169,  180,   31,  169,   17,   50,  179,
 /*  1460 */   169,   53,   54,   55,   71,   72,   58,   28,   60,  188,
 /*  1470 */   190,  191,  192,  193,   61,   30,   56,  201,   73,   49,
 /*  1480 */   200,  201,  200,   61,  292,   66,   15,   68,   62,   49,
 /*  1490 */    71,   72,   71,   72,  244,  245,  294,   71,   72,  218,
 /*  1500 */    63,   82,   83,   84,   85,   86,   87,   88,   89,   90,
 /*  1510 */    91,   92,   93,   94,   95,   96,   97,   98,   99,  100,
 /*  1520 */   101,  102,  103,  104,  105,  106,  107,  108,  109,  110,
 /*  1530 */   111,  112,  113,  114,  115,  116,  117,  118,  119,  120,
 /*  1540 */   121,  122,  123,  124,  125,  126,  127,  128,  129,  130,
 /*  1550 */   131,  132,  133,  134,  135,  136,  137,  138,  139,  140,
 /*  1560 */   141,  142,   10,   11,   13,  146,  147,  148,  149,  150,
 /*  1570 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /*  1580 */     3,  160,    3,    6,   11,    6,  160,   13,   11,  177,
 /*  1590 */   178,  179,  180,  312,   74,   17,  178,  179,  180,   17,
 /*  1600 */   189,  189,  190,  191,  192,  193,   29,  189,  190,  191,
 /*  1610 */   192,  193,  200,  201,   63,  169,  188,   32,  200,  201,
 /*  1620 */    17,  188,   17,   71,   72,  189,  270,   49,  184,   56,
 /*  1630 */   189,   49,  188,   61,  265,   61,   32,  263,  274,  195,
 /*  1640 */   196,   62,  198,  199,   65,   64,  218,  276,   71,   72,
 /*  1650 */    63,  218,   49,    3,   49,   61,    6,  272,  270,   82,
 /*  1660 */    10,   84,   85,   86,   87,   88,   89,   90,   91,   92,
 /*  1670 */    93,   94,   95,   96,   97,   98,   99,  100,  101,  102,
 /*  1680 */   103,  104,  105,  106,  107,  108,  109,  110,  111,  112,
 /*  1690 */   113,  114,  115,  116,  117,  118,  119,  120,  121,  122,
 /*  1700 */   123,  124,  125,  126,  127,  128,  129,  130,  131,  132,
 /*  1710 */   133,  134,  135,  136,  137,  138,  139,  140,  141,  142,
 /*  1720 */   189,   71,   72,  146,  147,  148,  149,  150,  151,  152,
 /*  1730 */   153,  154,  155,  156,  157,  158,  159,  160,    3,  160,
 /*  1740 */   312,    6,  189,  189,  189,  312,   11,  189,  304,  305,
 /*  1750 */   306,  307,  308,  309,  179,   13,  312,   59,  254,  189,
 /*  1760 */   189,   26,   27,   13,   13,  190,  191,  192,  193,   32,
 /*  1770 */    13,  179,  188,  204,  175,  200,  201,  179,   50,  195,
 /*  1780 */   196,  197,  190,  191,  192,  193,   15,  219,  190,  191,
 /*  1790 */   192,  193,  200,  201,  227,  188,  216,   15,  200,  201,
 /*  1800 */   189,  189,  216,   61,  216,  189,   71,   72,  188,  219,
 /*  1810 */   160,   61,   61,  220,  189,  220,  189,   82,   61,   84,
 /*  1820 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  1830 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1840 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1850 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  1860 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  1870 */   135,  136,  137,  138,  139,  140,  141,  142,    3,   13,
 /*  1880 */   273,    6,  275,  189,  277,  278,   11,  220,  304,  305,
 /*  1890 */   306,  307,  308,  309,  179,  160,  312,  277,  278,    3,
 /*  1900 */   189,  189,    6,  189,   32,  190,  191,  192,  193,  179,
 /*  1910 */   188,  204,   16,  189,  188,  200,  201,  169,  189,  312,
 /*  1920 */   190,  191,  192,  193,  169,   29,    0,   61,  189,  169,
 /*  1930 */   200,  201,  312,  169,    0,   15,   15,   15,  184,   29,
 /*  1940 */   218,   29,  188,   11,  218,   74,   71,   72,   23,   13,
 /*  1950 */   188,   73,   11,   57,   11,   13,   11,   82,   61,   84,
 /*  1960 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  1970 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  1980 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  1990 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  2000 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2010 */   135,  136,  137,  138,  139,  140,  141,  142,    3,   13,
 /*  2020 */     3,    6,  268,    6,   11,   13,   11,  273,   11,  275,
 /*  2030 */    11,  277,  278,    3,  312,  160,    6,  275,  312,  277,
 /*  2040 */   278,   11,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  2050 */   154,  155,  156,  157,  158,  159,  160,   11,   13,   56,
 /*  2060 */    13,   13,   11,   13,   11,  188,  312,   13,   11,   13,
 /*  2070 */    11,   13,   11,   13,  312,   11,  184,   11,   13,   62,
 /*  2080 */   188,   13,   65,   11,   13,   68,   71,   72,   71,   72,
 /*  2090 */    11,  188,   62,   61,   13,  218,   11,   82,   68,   84,
 /*  2100 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  2110 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2120 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2130 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  2140 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2150 */   135,  136,  137,  138,  139,  140,  141,  142,    3,   61,
 /*  2160 */   268,    6,   13,   11,   61,  273,   11,  275,   11,  277,
 /*  2170 */   278,  268,  179,   13,   61,  160,  273,  160,  275,    3,
 /*  2180 */   277,  278,    6,  190,  191,  192,  193,  179,    3,  312,
 /*  2190 */   160,    6,   16,  200,  201,   13,   61,  188,  190,  191,
 /*  2200 */   192,  193,   11,   13,  312,   29,   11,   13,  200,  201,
 /*  2210 */    11,   13,   11,   13,   11,  312,   11,   13,   11,   34,
 /*  2220 */   184,   13,   13,   11,  188,   11,   13,  218,  184,  188,
 /*  2230 */    13,  187,  188,   57,   56,   50,   51,   82,   11,   84,
 /*  2240 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  2250 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2260 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2270 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  2280 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2290 */   135,  136,  137,  138,  139,  140,  141,  142,    3,   56,
 /*  2300 */    56,    6,  266,  259,  268,  261,   11,   13,   61,  273,
 /*  2310 */    11,  275,   11,  277,  278,  160,  275,   13,  277,  278,
 /*  2320 */    13,  312,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  2330 */   154,  155,  156,  157,  158,  159,  160,   11,  179,   11,
 /*  2340 */    13,   61,   13,   11,   13,  160,   11,   61,  312,  190,
 /*  2350 */   191,  192,  193,  312,   13,   11,  312,   61,   13,  200,
 /*  2360 */   201,   11,   13,   61,   11,   13,   11,  184,   11,   13,
 /*  2370 */    61,  188,   13,   11,   13,   11,   13,   82,   11,   84,
 /*  2380 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  2390 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2400 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2410 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  2420 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2430 */   135,  136,  137,  138,  139,  140,  141,  142,    3,   13,
 /*  2440 */     3,    6,   61,    6,   11,   13,   11,   11,   61,  266,
 /*  2450 */    61,  268,  179,   13,   13,  160,  273,  179,  275,  135,
 /*  2460 */   277,  278,   23,  190,  191,  192,  193,   11,  190,  191,
 /*  2470 */   192,  193,  179,  200,  201,   13,  179,  188,  200,  201,
 /*  2480 */    11,   13,   11,  190,  191,  192,  193,  190,  191,  192,
 /*  2490 */   193,  179,   13,  200,  201,  312,   13,  200,  201,   62,
 /*  2500 */    11,   13,  190,  191,  192,  193,   11,  218,   11,   13,
 /*  2510 */    11,   13,  200,  201,  184,  143,   13,   82,  188,   84,
 /*  2520 */    85,   86,   87,   88,   89,   90,   91,   92,   93,   94,
 /*  2530 */    95,   96,   97,   98,   99,  100,  101,  102,  103,  104,
 /*  2540 */   105,  106,  107,  108,  109,  110,  111,  112,  113,  114,
 /*  2550 */   115,  116,  117,  118,  119,  120,  121,  122,  123,  124,
 /*  2560 */   125,  126,  127,  128,  129,  130,  131,  132,  133,  134,
 /*  2570 */   135,  136,  137,  138,  139,  140,  141,  142,    3,   75,
 /*  2580 */    75,    6,    7,  184,  185,   66,   11,  188,  143,   13,
 /*  2590 */    15,   16,   66,   13,   13,  160,  266,  160,  268,  179,
 /*  2600 */    13,  312,   83,  273,   29,  275,   31,  277,  278,   83,
 /*  2610 */   190,  191,  192,  193,   13,  184,   13,   13,  187,  188,
 /*  2620 */   200,  201,   13,   13,   13,   50,   13,  228,   53,   54,
 /*  2630 */    55,   56,   12,   58,   13,   60,   12,    4,   13,   16,
 /*  2640 */     4,   70,  312,   16,   69,   61,   71,   72,   32,   32,
 /*  2650 */   251,  252,  253,   63,   13,  188,   64,  258,   61,  260,
 /*  2660 */    11,   70,   12,  188,   13,   59,   13,  148,  149,  150,
 /*  2670 */   151,  152,  153,   11,  148,  149,  150,  151,  152,  153,
 /*  2680 */    13,   13,  283,  284,   13,  218,   81,   13,  289,  290,
 /*  2690 */   259,   15,  261,  218,  176,   16,    4,    4,  299,  181,
 /*  2700 */   301,   16,  184,   15,   32,   16,  188,  189,    6,  310,
 /*  2710 */   311,  312,    3,  184,    4,    3,  187,  188,    6,    3,
 /*  2720 */    40,  146,  147,  148,  149,  150,  151,  152,  153,  154,
 /*  2730 */   155,  156,  157,  158,  159,  160,  161,  162,    4,   35,
 /*  2740 */    35,   40,   16,  312,   15,  313,   34,   40,  230,  231,
 /*  2750 */   232,  233,  234,   40,  236,  237,  238,  239,  240,  241,
 /*  2760 */   242,  243,  188,   40,   40,    3,   16,   16,    6,  251,
 /*  2770 */   252,  253,   32,   11,  313,  313,  258,  313,   16,  312,
 /*  2780 */   313,  313,  313,   71,   72,  267,  313,  312,  259,    3,
 /*  2790 */   261,   29,    6,  313,  313,  313,  313,   11,  313,  313,
 /*  2800 */   313,  313,   16,  285,  286,  313,    3,  289,  290,    6,
 /*  2810 */   313,  313,   50,  313,  313,   29,   13,  299,   56,  301,
 /*  2820 */   246,  247,  313,  313,  313,  251,  252,  253,  310,  311,
 /*  2830 */   312,   69,  313,   71,   72,  313,   50,    3,    4,  179,
 /*  2840 */     6,  312,   56,  313,  313,   11,    3,  313,  313,    6,
 /*  2850 */   190,  191,  192,  193,  313,   69,  313,   71,   72,  313,
 /*  2860 */   200,  201,  313,   29,  313,   62,  313,  313,   65,  313,
 /*  2870 */   313,  313,  160,  299,  313,  301,  313,   34,  313,  313,
 /*  2880 */   313,  313,  313,  313,  310,  311,  312,  313,  313,  313,
 /*  2890 */    56,  313,  184,   50,   51,  187,  188,  313,  313,  313,
 /*  2900 */   313,  313,  313,   69,  313,   71,   72,  313,  146,  147,
 /*  2910 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  2920 */   158,  159,  160,  161,  162,    3,  313,  313,    6,  313,
 /*  2930 */   313,  313,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  2940 */   154,  155,  156,  157,  158,  159,  160,  161,  162,    3,
 /*  2950 */     4,  313,    6,  313,  313,  313,   34,   11,  184,  313,
 /*  2960 */   313,  187,  188,  160,  313,  313,  313,  313,  313,  261,
 /*  2970 */   313,  313,   50,   51,  313,   29,  313,  313,  313,  313,
 /*  2980 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  2990 */   156,  157,  158,  159,  160,  161,  162,    3,  313,  313,
 /*  3000 */     6,  313,   56,  160,  313,   11,  313,  313,  313,  313,
 /*  3010 */    16,  313,  313,  313,  188,   69,  313,   71,   72,    3,
 /*  3020 */   312,  313,    6,   29,  313,  313,  313,   11,  313,  313,
 /*  3030 */   313,  313,   16,  313,  313,  261,  313,  313,  313,  313,
 /*  3040 */   313,  313,  313,  313,  313,   29,  313,  313,  313,  313,
 /*  3050 */    56,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3060 */   313,  313,  313,   69,  313,   71,   72,  313,  313,  313,
 /*  3070 */   313,  313,   56,  247,  313,  313,  313,  251,  252,  253,
 /*  3080 */   313,  313,  160,  313,  313,   69,  312,   71,   72,  313,
 /*  3090 */   313,  313,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3100 */   154,  155,  156,  157,  158,  159,  160,  161,  162,  313,
 /*  3110 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3120 */   313,  313,  313,  313,  313,  299,  313,  301,  313,  313,
 /*  3130 */   313,  313,  313,  313,  313,  313,  310,  311,  312,  313,
 /*  3140 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  3150 */   156,  157,  158,  159,  160,  161,  162,  313,  313,  313,
 /*  3160 */   313,  313,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3170 */   154,  155,  156,  157,  158,  159,  160,  161,  162,    3,
 /*  3180 */   313,  313,    6,  313,  313,  313,  313,   11,  313,  313,
 /*  3190 */   313,  313,   16,  313,  313,  313,    3,    4,  313,    6,
 /*  3200 */   313,  313,  313,  313,   11,   29,  313,  313,  313,  313,
 /*  3210 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3220 */   313,  313,   29,  313,  313,  313,    3,  313,  313,    6,
 /*  3230 */   313,  313,   56,  313,   11,  313,  313,  313,  313,   16,
 /*  3240 */   313,  313,  313,    3,    4,   69,    6,   71,   72,   56,
 /*  3250 */   313,   11,   29,  313,  313,  313,  313,  313,  313,  313,
 /*  3260 */   313,  313,   69,  313,   71,   72,  313,  313,  313,   29,
 /*  3270 */   313,  313,  313,  313,  313,  313,  313,  313,  313,   56,
 /*  3280 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3290 */   313,  313,   69,  313,   71,   72,   56,  313,  313,  313,
 /*  3300 */   313,  313,  313,  313,  313,  313,  313,  313,  313,   69,
 /*  3310 */   313,   71,   72,  313,  313,  313,  313,  313,  313,  313,
 /*  3320 */   313,  313,  146,  147,  148,  149,  150,  151,  152,  153,
 /*  3330 */   154,  155,  156,  157,  158,  159,  160,  161,  162,  146,
 /*  3340 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*  3350 */   157,  158,  159,  160,  161,  162,  313,  313,  313,  313,
 /*  3360 */   313,  313,  313,  313,  313,  313,  313,  188,  313,  146,
 /*  3370 */   147,  148,  149,  150,  151,  152,  153,  154,  155,  156,
 /*  3380 */   157,  158,  159,  160,  161,  162,  146,  147,  148,  149,
 /*  3390 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*  3400 */   160,  161,  162,    3,  313,  313,    6,  313,  313,  313,
 /*  3410 */   313,   11,  313,   13,  184,  313,  313,  313,  188,  313,
 /*  3420 */   313,  313,  313,  313,  313,  246,  247,  313,  313,   29,
 /*  3430 */   251,  252,  253,    3,  313,  313,    6,  313,  313,  313,
 /*  3440 */   313,   11,  313,   13,  313,  313,  313,  313,  313,  313,
 /*  3450 */   313,  313,  313,  313,  313,  313,   56,  313,  313,   29,
 /*  3460 */   313,  231,  313,  313,  234,  313,  313,  313,  313,   69,
 /*  3470 */   313,   71,   72,  313,  313,  313,  313,  313,  299,  313,
 /*  3480 */   301,  251,  252,  253,  313,  313,   56,  313,  258,  310,
 /*  3490 */   311,  312,  313,  313,  313,  183,  184,  267,  313,   69,
 /*  3500 */   188,   71,   72,  313,  313,  313,  313,  195,  196,  313,
 /*  3510 */   313,  313,  313,  313,  313,  285,  286,  313,  313,  289,
 /*  3520 */   290,  313,  313,  313,  313,  183,  184,  313,  313,  299,
 /*  3530 */   188,  301,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  3540 */   310,  311,  312,  313,  313,  313,  146,  147,  148,  149,
 /*  3550 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*  3560 */   160,  161,  162,  251,  252,  253,  313,  313,  313,  313,
 /*  3570 */   313,  313,  313,  313,  313,  313,  146,  147,  148,  149,
 /*  3580 */   150,  151,  152,  153,  154,  155,  156,  157,  158,  159,
 /*  3590 */   160,  161,  162,  251,  252,  253,  313,  313,  313,  313,
 /*  3600 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  3610 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  3620 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  3630 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  3640 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  3650 */   308,  309,  310,  311,  312,  183,  184,  313,  313,  313,
 /*  3660 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  3670 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  183,
 /*  3680 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  3690 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  3700 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3710 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3720 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  313,
 /*  3730 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  3740 */   313,  183,  184,  313,  313,  313,  188,  251,  252,  253,
 /*  3750 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  3760 */   313,  313,  313,  291,  313,  293,  313,  295,  188,  297,
 /*  3770 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  3780 */   308,  309,  310,  311,  312,  313,  313,  291,  313,  293,
 /*  3790 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  3800 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  251,
 /*  3810 */   252,  253,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  3820 */   313,  313,  188,  313,  313,  313,  246,  247,  313,  195,
 /*  3830 */   196,  251,  252,  253,  313,  313,  184,  313,  313,  313,
 /*  3840 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  291,
 /*  3850 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  3860 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  3870 */   312,  313,  313,  313,  313,  313,  313,  313,  313,  299,
 /*  3880 */   313,  301,  313,  313,  313,  251,  252,  253,  313,  313,
 /*  3890 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /*  3900 */   313,  313,  313,  251,  252,  253,  313,  183,  184,  313,
 /*  3910 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  3920 */   196,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  3930 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  3940 */   306,  307,  308,  309,  310,  311,  312,  295,  313,  297,
 /*  3950 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  3960 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  3970 */   313,  313,  313,  183,  184,  251,  252,  253,  188,  313,
 /*  3980 */   313,  313,  313,  313,  313,  195,  196,  313,  313,  313,
 /*  3990 */   313,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  4000 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  4010 */   313,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  4020 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4030 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
 /*  4040 */   313,  251,  252,  253,  313,  313,  313,  313,  313,  313,
 /*  4050 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4060 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  313,
 /*  4070 */   313,  313,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  4080 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  4090 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  4100 */   310,  311,  312,  291,  313,  293,  313,  295,  313,  297,
 /*  4110 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  4120 */   308,  309,  310,  311,  312,  183,  184,  313,  313,  313,
 /*  4130 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  251,
 /*  4140 */   252,  253,  313,  313,  313,  313,  258,  313,  260,  313,
 /*  4150 */   262,  313,  264,  313,  313,  313,  313,  183,  184,  313,
 /*  4160 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  4170 */   196,  283,  284,  313,  313,  313,  313,  289,  290,  313,
 /*  4180 */   313,  313,  313,  313,  313,  313,  313,  299,  313,  301,
 /*  4190 */   313,  183,  184,  251,  252,  253,  188,  313,  310,  311,
 /*  4200 */   312,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  4210 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  183,
 /*  4220 */   184,  313,  313,  313,  188,  251,  252,  253,  313,  313,
 /*  4230 */   313,  195,  196,  291,  313,  293,  313,  295,  313,  297,
 /*  4240 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  4250 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  251,
 /*  4260 */   252,  253,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  4270 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4280 */   306,  307,  308,  309,  310,  311,  312,  251,  252,  253,
 /*  4290 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  291,
 /*  4300 */   184,  293,  313,  295,  188,  297,  313,  299,  313,  301,
 /*  4310 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  4320 */   312,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  4330 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  4340 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  4350 */   234,  235,  313,  183,  184,  313,  313,  313,  188,  313,
 /*  4360 */   313,  313,  313,  313,  313,  195,  196,  251,  252,  253,
 /*  4370 */   313,  313,  313,  313,  258,  183,  184,  313,  313,  313,
 /*  4380 */   188,  313,  313,  267,  313,  313,  313,  195,  196,  313,
 /*  4390 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4400 */   313,  285,  286,  313,  313,  289,  290,  313,  313,  313,
 /*  4410 */   313,  313,  313,  313,  313,  299,  313,  301,  313,  313,
 /*  4420 */   313,  251,  252,  253,  313,  313,  310,  311,  312,  313,
 /*  4430 */   313,  313,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  4440 */   313,  313,  188,  251,  252,  253,  313,  313,  313,  195,
 /*  4450 */   196,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4460 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  4470 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  4480 */   310,  311,  312,  291,  313,  293,  313,  295,  313,  297,
 /*  4490 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  4500 */   308,  309,  310,  311,  312,  251,  252,  253,  313,  313,
 /*  4510 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  4520 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  4530 */   313,  313,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  4540 */   313,  313,  313,  195,  196,  291,  313,  293,  313,  295,
 /*  4550 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4560 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
 /*  4570 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  4580 */   252,  253,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4590 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  4600 */   252,  253,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  4610 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  291,
 /*  4620 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  4630 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  4640 */   312,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  4650 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  4660 */   312,  313,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  4670 */   313,  313,  188,  251,  252,  253,  313,  313,  313,  195,
 /*  4680 */   196,  313,  313,  313,  313,  313,  313,  313,  313,  183,
 /*  4690 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  4700 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  4710 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  4720 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  4730 */   308,  309,  310,  311,  312,  251,  252,  253,  313,  313,
 /*  4740 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4750 */   313,  313,  313,  313,  313,  313,  313,  251,  252,  253,
 /*  4760 */   313,  313,  313,  313,  313,  313,  184,  313,  313,  313,
 /*  4770 */   188,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  4780 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  4790 */   306,  307,  308,  309,  310,  311,  312,  291,  313,  293,
 /*  4800 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  4810 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  183,
 /*  4820 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  4830 */   313,  195,  196,  251,  252,  253,  313,  313,  313,  313,
 /*  4840 */   258,  313,  260,  313,  262,  313,  264,  313,  313,  313,
 /*  4850 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  4860 */   313,  313,  313,  195,  196,  283,  284,  313,  313,  313,
 /*  4870 */   313,  289,  290,  313,  313,  313,  313,  313,  313,  313,
 /*  4880 */   313,  299,  313,  301,  313,  183,  184,  251,  252,  253,
 /*  4890 */   188,  313,  310,  311,  312,  313,  313,  195,  196,  313,
 /*  4900 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  4910 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  251,
 /*  4920 */   252,  253,  313,  313,  313,  195,  196,  291,  313,  293,
 /*  4930 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  4940 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  4950 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  291,
 /*  4960 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  4970 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  4980 */   312,  251,  252,  253,  313,  313,  313,  313,  313,  313,
 /*  4990 */   313,  313,  313,  291,  184,  293,  313,  295,  188,  297,
 /*  5000 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  5010 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  5020 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  5030 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  5040 */   310,  311,  312,  313,  234,  313,  313,  183,  184,  313,
 /*  5050 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  5060 */   196,  251,  252,  253,  313,  313,  313,  313,  258,  183,
 /*  5070 */   184,  313,  313,  313,  188,  313,  313,  267,  313,  313,
 /*  5080 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  5090 */   313,  313,  313,  313,  313,  285,  286,  313,  313,  289,
 /*  5100 */   290,  313,  313,  313,  313,  313,  313,  313,  313,  299,
 /*  5110 */   313,  301,  313,  313,  313,  251,  252,  253,  313,  313,
 /*  5120 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /*  5130 */   313,  183,  184,  313,  313,  313,  188,  251,  252,  253,
 /*  5140 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  5150 */   313,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  5160 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  5170 */   306,  307,  308,  309,  310,  311,  312,  291,  313,  293,
 /*  5180 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5190 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  251,
 /*  5200 */   252,  253,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  5210 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  5220 */   313,  313,  313,  313,  313,  313,  184,  313,  313,  313,
 /*  5230 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  291,
 /*  5240 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  5250 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  5260 */   312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5270 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  313,
 /*  5280 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5290 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  183,
 /*  5300 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  5310 */   313,  195,  196,  291,  313,  293,  313,  295,  313,  297,
 /*  5320 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  5330 */   308,  309,  310,  311,  312,  293,  313,  295,  313,  297,
 /*  5340 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  5350 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  5360 */   313,  183,  184,  313,  313,  313,  188,  251,  252,  253,
 /*  5370 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  5380 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  313,
 /*  5390 */   313,  313,  313,  313,  313,  195,  196,  313,  313,  313,
 /*  5400 */   313,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  5410 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5420 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  251,
 /*  5430 */   252,  253,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5440 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5450 */   313,  251,  252,  253,  313,  313,  313,  313,  313,  313,
 /*  5460 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  291,
 /*  5470 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  5480 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  5490 */   312,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  5500 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  5510 */   310,  311,  312,  183,  184,  313,  313,  313,  188,  313,
 /*  5520 */   313,  313,  313,  313,  313,  195,  196,  251,  252,  253,
 /*  5530 */   313,  313,  313,  313,  258,  313,  260,  313,  262,  313,
 /*  5540 */   264,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  5550 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  283,
 /*  5560 */   284,  313,  313,  313,  313,  289,  290,  313,  313,  313,
 /*  5570 */   313,  313,  313,  313,  313,  299,  313,  301,  313,  183,
 /*  5580 */   184,  251,  252,  253,  188,  313,  310,  311,  312,  313,
 /*  5590 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  5600 */   313,  313,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  5610 */   313,  313,  188,  251,  252,  253,  313,  313,  313,  195,
 /*  5620 */   196,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  5630 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  5640 */   310,  311,  312,  313,  313,  313,  313,  251,  252,  253,
 /*  5650 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  5660 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  5670 */   308,  309,  310,  311,  312,  251,  252,  253,  313,  313,
 /*  5680 */   313,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  5690 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  5700 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  5710 */   313,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  5720 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  5730 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
 /*  5740 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  5750 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  5760 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  313,
 /*  5770 */   313,  313,  313,  313,  313,  195,  196,  313,  313,  313,
 /*  5780 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5790 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5800 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  5810 */   252,  253,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5820 */   313,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  5830 */   188,  251,  252,  253,  313,  313,  313,  195,  196,  313,
 /*  5840 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  291,
 /*  5850 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  5860 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  5870 */   312,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  5880 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  5890 */   310,  311,  312,  251,  252,  253,  313,  313,  313,  183,
 /*  5900 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  5910 */   313,  195,  196,  313,  313,  313,  313,  313,  184,  313,
 /*  5920 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  5930 */   196,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  5940 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  5950 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  5960 */   313,  313,  313,  313,  313,  313,  313,  251,  252,  253,
 /*  5970 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  5980 */   313,  313,  313,  313,  313,  251,  252,  253,  313,  313,
 /*  5990 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  313,
 /*  6000 */   313,  313,  313,  313,  313,  195,  196,  291,  313,  293,
 /*  6010 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  6020 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  295,
 /*  6030 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  6040 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
 /*  6050 */   313,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  6060 */   188,  251,  252,  253,  313,  313,  313,  195,  196,  313,
 /*  6070 */   313,  313,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  6080 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  6090 */   196,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6100 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  6110 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  6120 */   310,  311,  312,  251,  252,  253,  313,  313,  313,  313,
 /*  6130 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6140 */   313,  313,  313,  313,  313,  251,  252,  253,  313,  313,
 /*  6150 */   313,  313,  313,  313,  184,  313,  313,  313,  188,  313,
 /*  6160 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  6170 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  6180 */   308,  309,  310,  311,  312,  291,  313,  293,  313,  295,
 /*  6190 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  6200 */   306,  307,  308,  309,  310,  311,  312,  183,  184,  313,
 /*  6210 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  6220 */   196,  251,  252,  253,  313,  313,  313,  313,  258,  313,
 /*  6230 */   260,  313,  313,  313,  264,  313,  313,  313,  313,  183,
 /*  6240 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  6250 */   313,  195,  196,  283,  284,  313,  313,  287,  313,  289,
 /*  6260 */   290,  313,  313,  313,  313,  313,  313,  313,  313,  299,
 /*  6270 */   313,  301,  313,  183,  184,  251,  252,  253,  188,  313,
 /*  6280 */   310,  311,  312,  313,  313,  195,  196,  313,  313,  313,
 /*  6290 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6300 */   313,  183,  184,  313,  313,  313,  188,  251,  252,  253,
 /*  6310 */   313,  313,  313,  195,  196,  291,  313,  293,  313,  295,
 /*  6320 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  6330 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
 /*  6340 */   313,  251,  252,  253,  313,  313,  313,  291,  313,  293,
 /*  6350 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  6360 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  251,
 /*  6370 */   252,  253,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6380 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  6390 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  6400 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  291,
 /*  6410 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  6420 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  6430 */   312,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  6440 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  6450 */   313,  313,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  6460 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  6470 */   196,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6480 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6490 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6500 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  313,
 /*  6510 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  183,
 /*  6520 */   184,  313,  313,  313,  188,  251,  252,  253,  313,  313,
 /*  6530 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  6540 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  6550 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  6560 */   308,  309,  310,  311,  312,  291,  313,  293,  313,  295,
 /*  6570 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  6580 */   306,  307,  308,  309,  310,  311,  312,  251,  252,  253,
 /*  6590 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  313,
 /*  6600 */   313,  313,  313,  313,  313,  195,  196,  313,  313,  313,
 /*  6610 */   313,  313,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  6620 */   313,  313,  313,  195,  196,  313,  313,  291,  313,  293,
 /*  6630 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  6640 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  6650 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6660 */   313,  251,  252,  253,  313,  313,  313,  313,  313,  313,
 /*  6670 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  6680 */   252,  253,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  6690 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  6700 */   196,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  6710 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  6720 */   310,  311,  312,  295,  313,  297,  313,  299,  313,  301,
 /*  6730 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  6740 */   312,  313,  313,  313,  313,  313,  313,  313,  313,  183,
 /*  6750 */   184,  313,  313,  313,  188,  251,  252,  253,  313,  313,
 /*  6760 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  6770 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  6780 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  6790 */   313,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  6800 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  6810 */   306,  307,  308,  309,  310,  311,  312,  251,  252,  253,
 /*  6820 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6830 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  6840 */   252,  253,  313,  313,  313,  313,  313,  313,  184,  313,
 /*  6850 */   313,  313,  188,  313,  313,  313,  313,  291,  313,  293,
 /*  6860 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  6870 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  291,
 /*  6880 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  6890 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  6900 */   312,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  6910 */   313,  313,  313,  195,  196,  251,  252,  253,  313,  313,
 /*  6920 */   313,  313,  258,  313,  260,  313,  262,  313,  264,  313,
 /*  6930 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  313,
 /*  6940 */   313,  313,  313,  313,  313,  195,  196,  283,  284,  313,
 /*  6950 */   313,  313,  313,  289,  290,  313,  313,  313,  313,  313,
 /*  6960 */   313,  313,  313,  299,  313,  301,  313,  183,  184,  251,
 /*  6970 */   252,  253,  188,  313,  310,  311,  312,  313,  313,  195,
 /*  6980 */   196,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  6990 */   313,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  7000 */   188,  251,  252,  253,  313,  313,  313,  195,  196,  291,
 /*  7010 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  7020 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7030 */   312,  313,  313,  313,  313,  251,  252,  253,  313,  313,
 /*  7040 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  7050 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7060 */   310,  311,  312,  251,  252,  253,  313,  313,  313,  313,
 /*  7070 */   313,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  7080 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  7090 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
 /*  7100 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  7110 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  7120 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  183,
 /*  7130 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  7140 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  7150 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  7160 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  7170 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7180 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7190 */   313,  313,  313,  313,  313,  313,  313,  251,  252,  253,
 /*  7200 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7210 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  251,
 /*  7220 */   252,  253,  313,  313,  313,  195,  196,  313,  313,  313,
 /*  7230 */   313,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  7240 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  7250 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  291,
 /*  7260 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  7270 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7280 */   312,  251,  252,  253,  313,  313,  313,  183,  184,  313,
 /*  7290 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  7300 */   196,  313,  313,  313,  313,  313,  184,  313,  313,  313,
 /*  7310 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  7320 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  7330 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7340 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /*  7350 */   313,  313,  313,  313,  313,  251,  252,  253,  313,  313,
 /*  7360 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7370 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  313,
 /*  7380 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  7390 */   313,  313,  313,  195,  196,  291,  313,  293,  313,  295,
 /*  7400 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  7410 */   306,  307,  308,  309,  310,  311,  312,  295,  313,  297,
 /*  7420 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  7430 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  7440 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  251,
 /*  7450 */   252,  253,  313,  313,  313,  195,  196,  313,  313,  313,
 /*  7460 */   313,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  7470 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  7480 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  291,
 /*  7490 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  7500 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7510 */   312,  251,  252,  253,  313,  313,  313,  313,  313,  313,
 /*  7520 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7530 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  313,
 /*  7540 */   313,  313,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  7550 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  7560 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7570 */   310,  311,  312,  291,  313,  293,  313,  295,  313,  297,
 /*  7580 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  7590 */   308,  309,  310,  311,  312,  183,  184,  313,  313,  313,
 /*  7600 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  251,
 /*  7610 */   252,  253,  313,  313,  313,  313,  258,  313,  260,  313,
 /*  7620 */   262,  313,  264,  313,  313,  313,  313,  183,  184,  313,
 /*  7630 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  7640 */   196,  283,  284,  313,  313,  313,  313,  289,  290,  313,
 /*  7650 */   313,  313,  313,  313,  313,  313,  313,  299,  313,  301,
 /*  7660 */   313,  183,  184,  251,  252,  253,  188,  313,  310,  311,
 /*  7670 */   312,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  7680 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  183,
 /*  7690 */   184,  313,  313,  313,  188,  251,  252,  253,  313,  313,
 /*  7700 */   313,  195,  196,  291,  313,  293,  313,  295,  313,  297,
 /*  7710 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  7720 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  251,
 /*  7730 */   252,  253,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  7740 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  7750 */   306,  307,  308,  309,  310,  311,  312,  251,  252,  253,
 /*  7760 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  291,
 /*  7770 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  7780 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  7790 */   312,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  7800 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  7810 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  7820 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  313,
 /*  7830 */   313,  313,  313,  313,  313,  195,  196,  313,  313,  313,
 /*  7840 */   313,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  7850 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  7860 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7870 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7880 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7890 */   313,  251,  252,  253,  313,  313,  313,  313,  313,  313,
 /*  7900 */   313,  313,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  7910 */   313,  313,  188,  251,  252,  253,  313,  313,  313,  195,
 /*  7920 */   196,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  7930 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  7940 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  7950 */   310,  311,  312,  291,  313,  293,  313,  295,  313,  297,
 /*  7960 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  7970 */   308,  309,  310,  311,  312,  251,  252,  253,  313,  313,
 /*  7980 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  7990 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  8000 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  8010 */   313,  195,  196,  313,  313,  291,  313,  293,  313,  295,
 /*  8020 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  8030 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
 /*  8040 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  8050 */   252,  253,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8060 */   313,  313,  313,  313,  313,  313,  313,  251,  252,  253,
 /*  8070 */   313,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  8080 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  291,
 /*  8090 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  8100 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  8110 */   312,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  8120 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  8130 */   313,  313,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  8140 */   313,  313,  188,  251,  252,  253,  313,  313,  313,  195,
 /*  8150 */   196,  313,  313,  313,  313,  313,  313,  313,  313,  183,
 /*  8160 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  8170 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  8180 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  8190 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  8200 */   308,  309,  310,  311,  312,  251,  252,  253,  313,  313,
 /*  8210 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8220 */   313,  313,  313,  313,  313,  313,  313,  251,  252,  253,
 /*  8230 */   313,  313,  313,  313,  313,  313,  184,  313,  313,  313,
 /*  8240 */   188,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  8250 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  8260 */   306,  307,  308,  309,  310,  311,  312,  291,  313,  293,
 /*  8270 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  8280 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  183,
 /*  8290 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  8300 */   313,  195,  196,  251,  252,  253,  313,  313,  313,  313,
 /*  8310 */   258,  313,  260,  313,  262,  313,  264,  313,  313,  313,
 /*  8320 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  8330 */   313,  313,  313,  195,  196,  283,  284,  313,  313,  313,
 /*  8340 */   313,  289,  290,  313,  313,  313,  313,  313,  313,  313,
 /*  8350 */   313,  299,  313,  301,  313,  183,  184,  251,  252,  253,
 /*  8360 */   188,  313,  310,  311,  312,  313,  313,  195,  196,  313,
 /*  8370 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8380 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  251,
 /*  8390 */   252,  253,  313,  313,  313,  195,  196,  291,  313,  293,
 /*  8400 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  8410 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  8420 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  291,
 /*  8430 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  8440 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  8450 */   312,  251,  252,  253,  313,  313,  313,  313,  313,  313,
 /*  8460 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  8470 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  8480 */   308,  309,  310,  311,  312,  313,  313,  313,  313,  313,
 /*  8490 */   313,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  8500 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  8510 */   310,  311,  312,  313,  313,  313,  313,  183,  184,  313,
 /*  8520 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  8530 */   196,  313,  313,  313,  313,  313,  313,  313,  313,  183,
 /*  8540 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  8550 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  8560 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8570 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8580 */   313,  313,  313,  313,  313,  251,  252,  253,  313,  313,
 /*  8590 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8600 */   313,  183,  184,  313,  313,  313,  188,  251,  252,  253,
 /*  8610 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  8620 */   313,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  8630 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  8640 */   306,  307,  308,  309,  310,  311,  312,  291,  313,  293,
 /*  8650 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  8660 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  251,
 /*  8670 */   252,  253,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  8680 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  8690 */   313,  313,  313,  313,  184,  313,  313,  313,  188,  313,
 /*  8700 */   313,  313,  313,  313,  313,  195,  196,  313,  313,  291,
 /*  8710 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  8720 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  8730 */   312,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8740 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  313,
 /*  8750 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8760 */   313,  251,  252,  253,  313,  313,  313,  313,  313,  183,
 /*  8770 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /*  8780 */   313,  195,  196,  291,  313,  293,  313,  295,  313,  297,
 /*  8790 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  8800 */   308,  309,  310,  311,  312,  295,  313,  297,  313,  299,
 /*  8810 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  8820 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /*  8830 */   313,  183,  184,  313,  313,  313,  188,  251,  252,  253,
 /*  8840 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  8850 */   313,  313,  313,  183,  184,  313,  313,  313,  188,  313,
 /*  8860 */   313,  313,  313,  313,  313,  195,  196,  313,  313,  313,
 /*  8870 */   313,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  8880 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  8890 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  251,
 /*  8900 */   252,  253,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8910 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  8920 */   313,  251,  252,  253,  313,  313,  313,  313,  313,  313,
 /*  8930 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  291,
 /*  8940 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  8950 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  8960 */   312,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  8970 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  8980 */   310,  311,  312,  183,  184,  313,  313,  313,  188,  313,
 /*  8990 */   313,  313,  313,  313,  313,  195,  196,  251,  252,  253,
 /*  9000 */   313,  313,  313,  313,  258,  313,  260,  313,  262,  313,
 /*  9010 */   264,  313,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  9020 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  283,
 /*  9030 */   284,  313,  313,  313,  313,  289,  290,  313,  313,  313,
 /*  9040 */   313,  313,  313,  313,  313,  299,  313,  301,  313,  183,
 /*  9050 */   184,  251,  252,  253,  188,  313,  310,  311,  312,  313,
 /*  9060 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  9070 */   313,  313,  313,  313,  313,  313,  313,  183,  184,  313,
 /*  9080 */   313,  313,  188,  251,  252,  253,  313,  313,  313,  195,
 /*  9090 */   196,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  9100 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  9110 */   310,  311,  312,  313,  313,  313,  313,  251,  252,  253,
 /*  9120 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  9130 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  9140 */   308,  309,  310,  311,  312,  251,  252,  253,  313,  313,
 /*  9150 */   313,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  9160 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  9170 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  9180 */   313,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  9190 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  9200 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  313,
 /*  9210 */   313,  183,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  9220 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  9230 */   313,  313,  313,  183,  184,  313,  313,    3,  188,  313,
 /*  9240 */     6,  313,  313,  313,  313,  195,  196,   13,  313,  313,
 /*  9250 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9260 */   313,  313,  313,   29,  313,  313,  313,  313,  313,  313,
 /*  9270 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  9280 */   252,  253,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9290 */   313,   57,  313,  313,  313,  183,  184,  313,  313,  313,
 /*  9300 */   188,  251,  252,  253,  313,  313,  313,  195,  196,  313,
 /*  9310 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  291,
 /*  9320 */   313,  293,  313,  295,  313,  297,  313,  299,  313,  301,
 /*  9330 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  9340 */   312,  291,  313,  293,  313,  295,  313,  297,  313,  299,
 /*  9350 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /*  9360 */   310,  311,  312,  251,  252,  253,  313,  313,  313,  313,
 /*  9370 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9380 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /*  9390 */   156,  157,  158,  159,  160,  313,  313,  313,  313,  313,
 /*  9400 */   313,  313,  313,  291,  313,  293,  313,  295,  313,  297,
 /*  9410 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  9420 */   308,  309,  310,  311,  312,    3,  313,  313,    6,  313,
 /*  9430 */   184,  313,  313,   11,  188,  313,  313,  313,  313,  313,
 /*  9440 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /*  9450 */   313,   29,  313,  313,  313,    3,  313,  313,    6,  313,
 /*  9460 */   313,  313,  313,   11,  313,  313,  313,  313,  313,  313,
 /*  9470 */   313,  313,  313,  313,  313,  313,  313,  313,   56,  313,
 /*  9480 */   313,   29,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9490 */   313,   69,  313,   71,   72,  313,  313,  251,  252,  253,
 /*  9500 */   313,  313,  313,  313,  313,  313,  313,  313,   56,  313,
 /*  9510 */   313,  313,  313,  313,  313,  313,  313,  313,  184,  313,
 /*  9520 */   313,   69,  188,   71,   72,  313,  313,  313,  313,  195,
 /*  9530 */   196,  313,  313,  313,  313,  313,  313,  291,  313,  293,
 /*  9540 */   313,  295,  313,  297,  313,  299,  313,  301,  302,  303,
 /*  9550 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /*  9560 */   313,  313,  313,  313,  313,  313,  313,  313,  146,  147,
 /*  9570 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  9580 */   158,  159,  160,  161,  162,  251,  252,  253,  313,  313,
 /*  9590 */   313,  313,  313,  313,  313,  313,  313,  313,  146,  147,
 /*  9600 */   148,  149,  150,  151,  152,  153,  154,  155,  156,  157,
 /*  9610 */   158,  159,  160,  161,  162,  313,  313,  313,  313,  313,
 /*  9620 */   313,  313,  313,  313,  313,  291,  313,  293,  313,  295,
 /*  9630 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  9640 */   306,  307,  308,  309,  310,  311,  312,  313,  184,  313,
 /*  9650 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  195,
 /*  9660 */   196,  313,  313,  313,  313,  313,  184,  313,  313,  313,
 /*  9670 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /*  9680 */   313,  313,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  9690 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  9700 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9710 */   313,  313,  313,  313,  313,  251,  252,  253,  313,  313,
 /*  9720 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9730 */   313,  313,  313,  251,  252,  253,  313,  313,  313,  313,
 /*  9740 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  9750 */   252,  253,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9760 */   313,  297,  313,  299,  313,  301,  302,  303,  304,  305,
 /*  9770 */   306,  307,  308,  309,  310,  311,  312,  313,  313,  297,
 /*  9780 */   313,  299,  313,  301,  302,  303,  304,  305,  306,  307,
 /*  9790 */   308,  309,  310,  311,  312,  297,  313,  299,  313,  301,
 /*  9800 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  9810 */   312,  313,  184,  313,  313,  313,  188,  313,  313,  313,
 /*  9820 */   313,  313,  313,  195,  196,  313,  313,  313,  313,  313,
 /*  9830 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9840 */   313,  313,  313,  313,  184,  185,  313,  313,  188,  313,
 /*  9850 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9860 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9870 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /*  9880 */   252,  253,  313,  313,  313,  225,  226,  227,  228,  313,
 /*  9890 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9900 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /*  9910 */   313,  251,  252,  253,  313,  313,  313,  313,  258,  313,
 /*  9920 */   260,  313,  313,  313,  313,  297,  313,  299,  313,  301,
 /*  9930 */   302,  303,  304,  305,  306,  307,  308,  309,  310,  311,
 /*  9940 */   312,  313,  313,  283,  284,  313,  313,  313,  313,  289,
 /*  9950 */   290,  184,  185,  313,  313,  188,  313,  313,  313,  299,
 /*  9960 */   313,  301,  313,  313,  313,  313,  313,  313,  313,  184,
 /*  9970 */   310,  311,  312,  188,  313,  313,  313,  313,  313,  313,
 /*  9980 */   195,  196,  313,  313,  313,  184,  313,  313,  313,  188,
 /*  9990 */   313,  313,  225,  226,  227,  228,  195,  196,  313,  313,
 /* 10000 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10010 */   313,  313,  313,  313,  313,  313,  313,  313,  251,  252,
 /* 10020 */   253,  313,  313,  313,  313,  258,  313,  260,  313,  313,
 /* 10030 */   313,  313,  313,  313,  313,  313,  251,  252,  253,  313,
 /* 10040 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10050 */   283,  284,  251,  252,  253,  313,  289,  290,  313,  313,
 /* 10060 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  313,
 /* 10070 */   184,  313,  313,  313,  188,  313,  313,  310,  311,  312,
 /* 10080 */   313,  195,  196,  313,  299,  313,  301,  302,  303,  304,
 /* 10090 */   305,  306,  307,  308,  309,  310,  311,  312,  313,  313,
 /* 10100 */   299,  313,  301,  302,  303,  304,  305,  306,  307,  308,
 /* 10110 */   309,  310,  311,  312,  184,  313,  313,    3,  188,  313,
 /* 10120 */     6,  313,  313,  313,  313,  195,  196,   13,  313,  313,
 /* 10130 */   313,  313,  313,  313,  313,  313,  313,  251,  252,  253,
 /* 10140 */   313,  313,  313,   29,  313,  313,  313,  313,  313,  313,
 /* 10150 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10160 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10170 */   313,   57,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10180 */   313,  251,  252,  253,  313,  299,  313,  301,  302,  303,
 /* 10190 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /* 10200 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10210 */   184,  313,  313,  313,  188,  313,  313,  313,  313,  313,
 /* 10220 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  299,
 /* 10230 */   313,  301,  302,  303,  304,  305,  306,  307,  308,  309,
 /* 10240 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /* 10250 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10260 */   146,  147,  148,  149,  150,  151,  152,  153,  154,  155,
 /* 10270 */   156,  157,  158,  159,  160,  313,  184,  251,  252,  253,
 /* 10280 */   188,  313,  313,  313,  313,  313,  313,  195,  196,  313,
 /* 10290 */   184,  313,    3,  313,  188,    6,  313,  313,  313,  313,
 /* 10300 */   313,  195,  196,  313,  313,  313,  313,  313,  313,  313,
 /* 10310 */   313,  313,  313,  313,  313,  313,  313,  313,   29,  313,
 /* 10320 */   313,  313,  313,  313,  313,  299,  313,  301,  313,  303,
 /* 10330 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /* 10340 */   313,  313,  313,  251,  252,  253,   57,  313,  313,  313,
 /* 10350 */   313,  313,  313,  313,  313,  313,  313,  251,  252,  253,
 /* 10360 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10370 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10380 */   313,  313,  313,  184,  313,  313,  313,  188,  313,  313,
 /* 10390 */   313,  299,  313,  301,  313,  303,  304,  305,  306,  307,
 /* 10400 */   308,  309,  310,  311,  312,  299,  313,  301,  313,  303,
 /* 10410 */   304,  305,  306,  307,  308,  309,  310,  311,  312,  313,
 /* 10420 */   313,  313,  313,  184,  185,  313,  313,  188,  313,  313,
 /* 10430 */   231,  313,  313,  234,  313,  146,  147,  148,  149,  150,
 /* 10440 */   151,  152,  153,  154,  155,  156,  157,  158,  159,  160,
 /* 10450 */   251,  252,  253,  313,  313,  313,  313,  258,  184,  185,
 /* 10460 */   313,  313,  188,  313,  313,  313,  267,  228,  313,  313,
 /* 10470 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10480 */   313,  313,  313,  313,  285,  286,  313,  313,  289,  290,
 /* 10490 */   251,  252,  253,  313,  313,  313,  313,  258,  299,  260,
 /* 10500 */   301,  313,  228,  184,  185,  313,  313,  188,  313,  310,
 /* 10510 */   311,  312,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10520 */   313,  313,  283,  284,  313,  251,  252,  253,  289,  290,
 /* 10530 */   313,  313,  258,  313,  260,  313,  313,  313,  299,  313,
 /* 10540 */   301,  313,  313,  313,  313,  313,  313,  228,  313,  310,
 /* 10550 */   311,  312,  313,  313,  313,  313,  313,  283,  284,  313,
 /* 10560 */   313,  313,  313,  289,  290,  313,  313,  313,  313,  313,
 /* 10570 */   251,  252,  253,  299,  313,  301,  313,  258,  313,  260,
 /* 10580 */   313,  313,  313,  313,  310,  311,  312,  313,  184,  185,
 /* 10590 */   313,  313,  188,  313,  313,  313,  313,  313,  313,  313,
 /* 10600 */   313,  313,  283,  284,  313,  313,  313,  313,  289,  290,
 /* 10610 */   313,  313,  313,  313,  313,  313,  313,  313,  299,  313,
 /* 10620 */   301,  313,  184,  185,  313,  313,  188,  313,  313,  310,
 /* 10630 */   311,  312,  228,  313,  313,  313,  313,  313,  313,  313,
 /* 10640 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10650 */   313,  313,  313,  313,  313,  251,  252,  253,  313,  313,
 /* 10660 */   313,  313,  258,  313,  260,  313,  228,  313,  313,  313,
 /* 10670 */   313,  313,  313,  184,  313,  313,  313,  188,  313,  313,
 /* 10680 */   313,  313,  313,  313,  313,  313,  313,  283,  284,  251,
 /* 10690 */   252,  253,  313,  289,  290,  313,  258,  313,  260,  313,
 /* 10700 */   313,  313,  313,  299,  313,  301,  313,  313,  313,  313,
 /* 10710 */   313,  313,  313,  313,  310,  311,  312,  313,  313,  313,
 /* 10720 */   231,  283,  284,  234,  313,  313,  313,  289,  290,  313,
 /* 10730 */   313,  313,  313,  313,  313,  313,  313,  299,  313,  301,
 /* 10740 */   251,  252,  253,  313,  313,  313,  313,  258,  310,  311,
 /* 10750 */   312,  313,  313,  313,  313,  184,  267,  313,  313,  188,
 /* 10760 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10770 */   313,  313,  313,  313,  285,  286,  313,  313,  289,  290,
 /* 10780 */   313,  313,  313,  313,  313,  313,  313,  313,  299,  313,
 /* 10790 */   301,  313,  313,  313,  313,  313,  313,  313,  313,  310,
 /* 10800 */   311,  312,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10810 */   313,  184,  313,  313,  313,  188,  313,  313,  313,  313,
 /* 10820 */   313,  313,  251,  252,  253,  313,  313,  313,  313,  258,
 /* 10830 */   313,  313,  313,  313,  313,  313,  313,  313,  267,  313,
 /* 10840 */   269,  313,  271,  313,  313,  313,  313,  313,  313,  313,
 /* 10850 */   313,  313,  313,  313,  313,  313,  285,  286,  313,  313,
 /* 10860 */   289,  290,  184,  313,  313,  313,  188,  313,  313,  313,
 /* 10870 */   299,  313,  301,  313,  313,  313,  313,  313,  251,  252,
 /* 10880 */   253,  310,  311,  312,  313,  258,  313,  313,  313,  313,
 /* 10890 */   313,  313,  313,  313,  267,  313,  269,  313,  271,  313,
 /* 10900 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10910 */   313,  313,  285,  286,  313,  313,  289,  290,  313,  313,
 /* 10920 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  251,
 /* 10930 */   252,  253,  313,  313,  313,  313,  258,  310,  311,  312,
 /* 10940 */   313,  313,  313,  313,  184,  267,  313,  313,  188,  271,
 /* 10950 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 10960 */   313,  313,  313,  285,  286,  313,  288,  289,  290,  313,
 /* 10970 */   313,  313,  313,  313,  313,  313,  313,  299,  313,  301,
 /* 10980 */   313,  313,  313,  313,  313,  313,  313,  313,  310,  311,
 /* 10990 */   312,  231,  313,  313,  234,  313,  313,  313,  313,  313,
 /* 11000 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11010 */   313,  251,  252,  253,  313,  313,  313,  313,  258,  313,
 /* 11020 */   313,  313,  313,  313,  313,  313,  313,  267,  313,  313,
 /* 11030 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11040 */   313,  313,  313,  313,  313,  285,  286,  184,  313,  289,
 /* 11050 */   290,  188,  313,  313,  313,  313,  313,  313,  313,  299,
 /* 11060 */   313,  301,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11070 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /* 11080 */   313,  184,  185,  313,  313,  188,  313,  313,  313,  313,
 /* 11090 */   313,  228,  229,  313,  313,  313,  313,  313,  313,  313,
 /* 11100 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11110 */   313,  313,  313,  313,  251,  252,  253,  313,  313,  313,
 /* 11120 */   313,  258,  313,  260,  313,  228,  313,  313,  313,  313,
 /* 11130 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11140 */   313,  313,  313,  313,  313,  313,  283,  284,  251,  252,
 /* 11150 */   253,  313,  289,  290,  313,  258,  313,  260,  313,  313,
 /* 11160 */   313,  313,  299,  313,  301,  313,  313,  313,  313,  313,
 /* 11170 */   313,  313,  313,  310,  311,  312,  313,  313,  313,  313,
 /* 11180 */   283,  284,  313,  313,  313,  313,  289,  290,  313,  313,
 /* 11190 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  313,
 /* 11200 */   313,  313,  313,  313,  313,  313,  313,  310,  311,  312,
 /* 11210 */   313,  313,  184,  185,  313,  313,  188,  313,  313,  313,
 /* 11220 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11230 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11240 */   313,  313,  313,  313,  313,  313,  184,  313,  313,  313,
 /* 11250 */   188,  313,  313,  313,  313,  313,  228,  313,  313,  313,
 /* 11260 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11270 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  251,
 /* 11280 */   252,  253,  313,  313,  313,  313,  258,  313,  260,  313,
 /* 11290 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11300 */   313,  184,  313,  313,  313,  188,  313,  313,  313,  313,
 /* 11310 */   313,  283,  284,  251,  252,  253,  313,  289,  290,  313,
 /* 11320 */   258,  313,  260,  313,  313,  313,  264,  299,  313,  301,
 /* 11330 */   313,  313,  313,  313,  313,  313,  313,  313,  310,  311,
 /* 11340 */   312,  313,  313,  313,  313,  283,  284,  313,  313,  313,
 /* 11350 */   313,  289,  290,  313,  313,  313,  313,  313,  313,  313,
 /* 11360 */   313,  299,  313,  301,  313,  313,  313,  313,  251,  252,
 /* 11370 */   253,  313,  310,  311,  312,  258,  313,  313,  313,  313,
 /* 11380 */   313,  184,  313,  313,  267,  188,  313,  313,  271,  313,
 /* 11390 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11400 */   313,  313,  285,  286,  313,  313,  289,  290,  313,  313,
 /* 11410 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  313,
 /* 11420 */   313,  313,  313,  313,  313,  313,  313,  310,  311,  312,
 /* 11430 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11440 */   313,  313,  313,  313,  313,  313,  313,  313,  251,  252,
 /* 11450 */   253,  313,  313,  313,  313,  258,  313,  260,  313,  313,
 /* 11460 */   313,  264,  313,  313,  184,  313,  313,  313,  188,  313,
 /* 11470 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11480 */   283,  284,  313,  313,  313,  313,  289,  290,  313,  313,
 /* 11490 */   313,  313,  313,  313,  313,  313,  299,  313,  301,  184,
 /* 11500 */   313,  313,  313,  188,  313,  313,  313,  310,  311,  312,
 /* 11510 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11520 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11530 */   313,  251,  252,  253,  313,  313,  313,  313,  258,  313,
 /* 11540 */   260,  313,  313,  313,  264,  313,  313,  313,  313,  313,
 /* 11550 */   313,  313,  313,  313,  184,  313,  313,  313,  188,  313,
 /* 11560 */   313,  313,  313,  283,  284,  313,  251,  252,  253,  289,
 /* 11570 */   290,  313,  313,  258,  313,  313,  313,  313,  313,  299,
 /* 11580 */   313,  301,  267,  313,  313,  313,  271,  313,  313,  313,
 /* 11590 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /* 11600 */   285,  286,  313,  313,  289,  290,  313,  313,  313,  313,
 /* 11610 */   313,  313,  313,  313,  299,  313,  301,  313,  313,  313,
 /* 11620 */   313,  251,  252,  253,  313,  310,  311,  312,  258,  313,
 /* 11630 */   313,  313,  313,  313,  184,  313,  313,  267,  188,  313,
 /* 11640 */   313,  271,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11650 */   313,  313,  313,  313,  313,  285,  286,  313,  313,  289,
 /* 11660 */   290,  313,  313,  313,  313,  313,  313,  313,  313,  299,
 /* 11670 */   313,  301,  313,  313,  313,  313,  313,  313,  228,  313,
 /* 11680 */   310,  311,  312,  313,  313,  313,  313,  313,  313,  313,
 /* 11690 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11700 */   313,  251,  252,  253,  313,  313,  313,  313,  258,  313,
 /* 11710 */   260,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11720 */   313,  313,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11730 */   313,  313,  313,  283,  284,  313,  313,  313,  313,  289,
 /* 11740 */   290,  313,  313,  313,  313,  313,  313,  313,  313,  299,
 /* 11750 */   313,  301,  313,  313,  313,  313,  313,  313,  313,  313,
 /* 11760 */   310,  311,  312,
);
  const YY_SHIFT_USE_DFLT = -37;
  const YY_SHIFT_MAX = 605;
static $yy_shift_ofst = array(
 /*     0 */   162, 2575,   -3,  155,  313,  471,  629,  787,  945, 1103,
 /*    10 */  1261, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    20 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    30 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    40 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    50 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    60 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    70 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    80 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*    90 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419,
 /*   100 */  1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 1419, 2762,
 /*   110 */  2786, 1419, 1419, 1419, 1419, 1577, 1577, 1577,  785, 2834,
 /*   120 */  2946, 2994, 3016, 3176, 3193, 3223, 3240, 9422, 9422, 9422,
 /*   130 */  9452, 9452, 9452, 9452, 9452, 9452, 9452, 9452, 9422, 9422,
 /*   140 */  9422, 9452, 9452, 9452,   -1,   -1,   -1,   -1, 3400, 3430,
 /*   150 */  9422, 9452, 9452, 9422, 9422, 9452, 1421,  618,  618, 1735,
 /*   160 */  1735, 1875, 2015, 2155, 1896, 10289, 10289, 1408,  200, 2295,
 /*   170 */  2435, 2176, 9234, 10114, 1408, 1408,  200,  200, 2017, 2017,
 /*   180 */  2017, 2017, 2017,    0, 1273,  345,  345,  345,  345,  345,
 /*   190 */   345,  345,  345,  345,  345,  345,  345,  345,  345,  345,
 /*   200 */   345, 1273, 1273, 1426, 1426, 1426, 1273, 1273, 1426, 1426,
 /*   210 */  1650,  188, 2030, 1277, 2712,   69,   69,   69,  636,  636,
 /*   220 */   371,   46,   46,  371,  371,  371, 2519, 2803, 2185, 2843,
 /*   230 */  2922, 1579, 1579, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
 /*   240 */  1127, 1127,  371,  371,  371,  371,  -15,  148,  352,  352,
 /*   250 */   352,  352, 2526,  163,  494,  652, 1078, 1552, 2437,  965,
 /*   260 */   665,  181,  181, 1159,  208,  208,  493,  208,  208,  208,
 /*   270 */   208,  208,  567,  825,  683,  883,  788, 1260, 1268, 1272,
 /*   280 */     1,    1,  -36,  270,  182,  182, 1095, 1393, 1393, 1393,
 /*   290 */  1264,  761, 1230, 1420,  962,  948,  948,  567,  959, 1413,
 /*   300 */   959,  567, 1420,  567,  567,  567, 1437,  567,  948,  948,
 /*   310 */   948,  959,  959, 1422,  829,  -11, 1430, 1440, 1578, 1582,
 /*   320 */  1603, 1605, 1424, 1424, 1424, 1424, 1445, 1439, 1405, 1520,
 /*   330 */  1471, 1424, 1471, 1471, 1585, 1572, 1604, 1587, 1581, 1594,
 /*   340 */  1585, 1471, 1471, 1471, 1471, 1471, 1698, 1471, 1471, 1737,
 /*   350 */     1,    1, 1728, 1728, 1728, 1771,  -36,  -36, 1771, 1782,
 /*   360 */  1471, 1471, 1471, 1471, 1782, 1471, 1471, 1782, 1471, 1471,
 /*   370 */  1471, 1471, 1471, 1471, 1424, 1424, 1424, 1424, 1872, 1262,
 /*   380 */  1181, 1266, 1574,  955,  955, 1573, 1742, 1750, 1751, 1757,
 /*   390 */  1286, 1097, 1278, 1324, 1551,  955,  955,  955, 1866, 1926,
 /*   400 */  1934, 1920, 1921, 1922, 1910, 1912, 1925, 1932, 1936, 1878,
 /*   410 */  1871, 1941, 1943, 1942, 1945, 1897, 2006, 2013, 2012, 2019,
 /*   420 */  2045, 2046, 2047, 2048, 2003, 2051, 2050, 2053, 2054, 2057,
 /*   430 */  2056, 2059, 2058, 2061, 2060, 2064, 2065, 2066, 2068, 2072,
 /*   440 */  2071, 2079, 2032, 2081, 2085, 2098, 2149, 2152, 2103, 2160,
 /*   450 */  2157, 2113, 2182, 2191, 2135, 2190, 2195, 2194, 2199, 2198,
 /*   460 */  2201, 2200, 2203, 2204, 2205, 2208, 2207, 2209, 2212, 2213,
 /*   470 */  2214, 2217, 2178, 2243, 2244, 2227, 2294, 2299, 2304, 2301,
 /*   480 */  2307, 2326, 2327, 2328, 2329, 2332, 2247, 2280, 2331, 2335,
 /*   490 */  2286, 2341, 2344, 2296, 2345, 2350, 2302, 2349, 2353, 2352,
 /*   500 */  2355, 2356, 2357, 2359, 2362, 2361, 2364, 2363, 2367, 2309,
 /*   510 */  2426, 2433, 2381, 2432, 2436, 2387, 2389, 2440, 2439, 2441,
 /*   520 */  2324, 2456, 2462, 2468, 2469, 2479, 2471, 2483, 2489, 2488,
 /*   530 */  2495, 2496, 2497, 2498, 2499, 2372, 2504, 2503, 2445, 2505,
 /*   540 */  2576, 2580, 2581, 2587, 2601, 2603, 2604, 2609, 2610, 2611,
 /*   550 */  2613, 2620, 2621, 2624, 2625, 2623, 2627, 2633, 2636, 2616,
 /*   560 */  2584, 2617, 2571, 2590, 2592, 2641, 2597, 2616, 2591, 2649,
 /*   570 */  2650, 2651, 2606, 2653, 2667, 2668, 2605, 2662, 2671, 2674,
 /*   580 */  2676, 2679, 2692, 2693, 2685, 2688, 2689, 2672, 2702, 2709,
 /*   590 */  2710, 2716, 2734, 2704, 2705, 2680, 2701, 2707, 2713, 2723,
 /*   600 */  2724, 2726, 2729, 2750, 2751, 2740,
);
  const YY_REDUCE_USE_DFLT = -273;
  const YY_REDUCE_MAX = 378;
static $yy_reduce_ofst = array(
 /*     0 */  -155, 2518, 3312, 3342, 3472, 3496, 3558, 3634, 3724, 3790,
 /*    10 */  3812, 3942, 3974, 4008, 4036, 4170, 4192, 4254, 4328, 4422,
 /*    20 */  4484, 4506, 4636, 4668, 4702, 4730, 4864, 4886, 4948, 5022,
 /*    30 */  5116, 5178, 5200, 5330, 5362, 5396, 5424, 5558, 5580, 5642,
 /*    40 */  5716, 5810, 5872, 5894, 6024, 6056, 6090, 6118, 6252, 6274,
 /*    50 */  6336, 6410, 6504, 6566, 6588, 6718, 6750, 6784, 6812, 6946,
 /*    60 */  6968, 7030, 7104, 7198, 7260, 7282, 7412, 7444, 7478, 7506,
 /*    70 */  7640, 7662, 7724, 7798, 7892, 7954, 7976, 8106, 8138, 8172,
 /*    80 */  8200, 8334, 8356, 8418, 8492, 8586, 8648, 8670, 8800, 8832,
 /*    90 */  8866, 8894, 9028, 9050, 9112, 9246, 9334, 4348, 5042, 3652,
 /*   100 */  5734, 6428, 7122, 7816, 8510, 9464, 9482, 9498, 9628, 9660,
 /*   110 */  9767, 9785, 9801, 9886, 9930, 10026, 10092, 10106,  150, 3230,
 /*   120 */  10199, 2399, 10239, 10274, 10319, 10404, 10438, 10489, 4116, 10571,
 /*   130 */  3888, 4582, 5276, 5970, 6664, 7358, 8052, 8746, 10627, 10678,
 /*   140 */  10760, 10863, 10897, 11028,  311,  469,  311,  469, 11062, 11117,
 /*   150 */  4810, 11197, 11280, 11315, 11370, 11450,  800,  122,  284, 1444,
 /*   160 */   655,  830,  988, 1584, 2574, 3179, 3580,  624, 1412, -118,
 /*   170 */   814, 2826, 2826, 2826,  918,  918, 1123, 1418, 2036, 2183,
 /*   180 */  2330, 1754, 1892,  804, 1903, 1280, 1575, 1592, 1598, 1715,
 /*   190 */  1730, 1993, 2008, 2159, 2273, 2278, 2293, 2297, 2312, 2420,
 /*   200 */  2660,  993, 1607, 2044, 2431, 2529, 1762, 2041, 2708, 2774,
 /*   210 */   190,  609, 1620,  195,  461,  522,  657,  819, 1063, 1250,
 /*   220 */  -116,  348,  614,  358,  516,  658,   91,  199, 1093, 1281,
 /*   230 */  1428,  832,  834, 1116, 1433, 1722, 1726, 1877, 2009, 2289,
 /*   240 */  2467, 2475,  -10,  323,  777,  963,   76,  234,  -18,   -8,
 /*   250 */   619,  947, -272,  299,  -57,  -39,  347,  368,  321,  462,
 /*   260 */   479,  177,  398,  482,  499,  620,  350,  660,  664,  833,
 /*   270 */   936,  994,  450,  463,  622,  728,  758,  775,  893,  904,
 /*   280 */   779,  995,  937, -247, -168,  -91,   52,  133,  133,  133,
 /*   290 */    75,  117,  238,  249,  278,  251,  316,  485,  389,  397,
 /*   300 */   432,  684,  249,  801,  824,  906,  871,  989,  879,  975,
 /*   310 */  1020, 1071, 1083, 1150, 1274, 1224, 1218, 1218, 1218, 1218,
 /*   320 */  1218, 1218, 1275, 1284, 1287, 1291, 1276, 1282, 1192, 1202,
 /*   330 */  1411, 1446, 1436, 1441, 1356, 1369, 1374, 1364, 1371, 1385,
 /*   340 */  1388, 1531, 1553, 1554, 1555, 1558, 1504, 1570, 1571, 1569,
 /*   350 */  1599, 1599, 1580, 1586, 1588, 1568, 1567, 1567, 1590, 1593,
 /*   360 */  1611, 1612, 1616, 1625, 1595, 1627, 1694, 1667, 1711, 1712,
 /*   370 */  1714, 1724, 1729, 1739, 1748, 1755, 1760, 1764, 1707,
);
static $yy_default = array(
 /*     0 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    10 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    20 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    30 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    40 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    50 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    60 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    70 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    80 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*    90 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   100 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   110 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1180, 1273,
 /*   120 */  1277, 1586, 1586, 1586, 1251, 1586, 1255, 1272, 1280, 1586,
 /*   130 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   140 */  1276, 1260, 1250, 1254, 1172, 1176, 1174, 1178, 1586, 1586,
 /*   150 */  1278, 1586, 1586, 1586, 1586, 1258, 1104, 1586, 1586, 1586,
 /*   160 */  1156, 1586, 1138, 1586, 1586, 1586, 1586, 1268, 1112, 1149,
 /*   170 */  1586, 1586, 1586, 1586, 1267, 1269, 1103, 1111, 1586, 1586,
 /*   180 */  1356, 1363, 1366, 1070, 1586, 1062, 1064, 1091, 1092, 1089,
 /*   190 */  1087, 1090, 1088, 1095, 1096, 1100, 1102, 1108, 1110, 1116,
 /*   200 */  1118, 1586, 1586, 1586, 1586, 1341, 1586, 1586, 1345, 1347,
 /*   210 */  1586, 1134, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   220 */  1586, 1128, 1135, 1586, 1586, 1586, 1447, 1586, 1586, 1586,
 /*   230 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   240 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1127, 1133,
 /*   250 */  1136, 1129, 1446, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   260 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   270 */  1586, 1586, 1586, 1586, 1054, 1586, 1586, 1586, 1586, 1586,
 /*   280 */  1052, 1053, 1246, 1437, 1586, 1586, 1586, 1071, 1072, 1075,
 /*   290 */  1380, 1586, 1586, 1472, 1586, 1450, 1465, 1586, 1586, 1586,
 /*   300 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1451, 1456,
 /*   310 */  1457, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   320 */  1586, 1586, 1042, 1043, 1044, 1045, 1167, 1168, 1429, 1433,
 /*   330 */  1586, 1069, 1586, 1586, 1359, 1351, 1343, 1372, 1376, 1368,
 /*   340 */  1360, 1586, 1586, 1586, 1586, 1586, 1322, 1586, 1586, 1177,
 /*   350 */  1050, 1051, 1586, 1586, 1586, 1586, 1245, 1247, 1586, 1586,
 /*   360 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   370 */  1586, 1586, 1586, 1586, 1046, 1047, 1048, 1049, 1179, 1586,
 /*   380 */  1561, 1586, 1586, 1448, 1464, 1586, 1586, 1586, 1586, 1586,
 /*   390 */  1586, 1586, 1586, 1586, 1586, 1449, 1454, 1455, 1586, 1586,
 /*   400 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1428,
 /*   410 */  1432, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   420 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   430 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   440 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   450 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   460 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   470 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   480 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   490 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   500 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   510 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   520 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   530 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   540 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   550 */  1586, 1586, 1586, 1586, 1586, 1586, 1586, 1281, 1279, 1357,
 /*   560 */  1350, 1342, 1586, 1371, 1375, 1586, 1367, 1358, 1586, 1586,
 /*   570 */  1586, 1586, 1321, 1586, 1586, 1586, 1586, 1586, 1586, 1586,
 /*   580 */  1586, 1586, 1261, 1259, 1586, 1586, 1586, 1173, 1586, 1586,
 /*   590 */  1060, 1586, 1058, 1198, 1199, 1586, 1586, 1586, 1586, 1586,
 /*   600 */  1586, 1586, 1586, 1586, 1586, 1175, 1034, 1171, 1298, 1299,
 /*   610 */  1300, 1302, 1315, 1316, 1317, 1318, 1319, 1559, 1560, 1580,
 /*   620 */  1581, 1582, 1583, 1562, 1563, 1564, 1565, 1566, 1567, 1568,
 /*   630 */  1569, 1570, 1571, 1572, 1573, 1574, 1575, 1576, 1577, 1578,
 /*   640 */  1579, 1301, 1303, 1304, 1311, 1312, 1313, 1314, 1309, 1420,
 /*   650 */  1421, 1310, 1305, 1307, 1306, 1308, 1035, 1036, 1037, 1061,
 /*   660 */  1123, 1165, 1170, 1166, 1169, 1126, 1157, 1159, 1328, 1329,
 /*   670 */  1334, 1430, 1434, 1436, 1438, 1460, 1466, 1461, 1467, 1471,
 /*   680 */  1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1468,
 /*   690 */  1469, 1483, 1484, 1485, 1486, 1487, 1488, 1490, 1491, 1492,
 /*   700 */  1493, 1494, 1336, 1335, 1496, 1497, 1498, 1499, 1500, 1501,
 /*   710 */  1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509, 1510, 1511,
 /*   720 */  1512, 1513, 1514, 1515, 1516, 1517, 1518, 1519, 1520, 1521,
 /*   730 */  1522, 1338, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530,
 /*   740 */  1531, 1532, 1533, 1535, 1537, 1067, 1068, 1124, 1132, 1131,
 /*   750 */  1137, 1139, 1142, 1540, 1541, 1542, 1545, 1546, 1547, 1548,
 /*   760 */  1549, 1555, 1556, 1557, 1558, 1554, 1553, 1552, 1551, 1550,
 /*   770 */  1543, 1544, 1140, 1141, 1143, 1333, 1144, 1147, 1145, 1146,
 /*   780 */  1148, 1150, 1151, 1152, 1153, 1154, 1155, 1121, 1122, 1077,
 /*   790 */  1078, 1073, 1079, 1080, 1074, 1076, 1264, 1265, 1266, 1270,
 /*   800 */  1282, 1354, 1352, 1400, 1401, 1344, 1406, 1407, 1412, 1413,
 /*   810 */  1416, 1417, 1422, 1423, 1424, 1425, 1426, 1427, 1584, 1585,
 /*   820 */  1408, 1348, 1349, 1418, 1419, 1346, 1402, 1353, 1361, 1362,
 /*   830 */  1373, 1377, 1379, 1383, 1384, 1385, 1381, 1382, 1386, 1387,
 /*   840 */  1390, 1394, 1396, 1397, 1398, 1399, 1391, 1395, 1392, 1393,
 /*   850 */  1388, 1389, 1378, 1374, 1364, 1365, 1369, 1403, 1404, 1409,
 /*   860 */  1410, 1414, 1415, 1411, 1405, 1370, 1355, 1283, 1271, 1284,
 /*   870 */  1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294,
 /*   880 */  1295, 1296, 1297, 1320, 1323, 1324, 1325, 1326, 1327, 1274,
 /*   890 */  1275, 1539, 1538, 1536, 1534, 1337, 1495, 1489, 1482, 1462,
 /*   900 */  1463, 1470, 1452, 1453, 1458, 1459, 1439, 1440, 1441, 1442,
 /*   910 */  1443, 1444, 1445, 1435, 1431, 1331, 1330, 1332, 1160, 1161,
 /*   920 */  1162, 1163, 1164, 1158, 1125, 1130, 1065, 1119, 1120, 1063,
 /*   930 */  1066, 1083, 1084, 1262, 1339, 1340, 1263, 1081, 1085, 1082,
 /*   940 */  1086, 1093, 1094, 1097, 1099, 1098, 1101, 1113, 1105, 1107,
 /*   950 */  1106, 1109, 1114, 1115, 1117, 1055, 1059, 1056, 1057, 1181,
 /*   960 */  1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194,
 /*   970 */  1195, 1196, 1236, 1197, 1200, 1237, 1238, 1239, 1240, 1201,
 /*   980 */  1202, 1203, 1204, 1205, 1206, 1233, 1234, 1235, 1207, 1208,
 /*   990 */  1209, 1210, 1211, 1212, 1243, 1244, 1248, 1249, 1256, 1257,
 /*  1000 */  1252, 1253, 1213, 1214, 1241, 1242, 1215, 1227, 1231, 1232,
 /*  1010 */  1218, 1228, 1216, 1219, 1230, 1217, 1220, 1229, 1221, 1224,
 /*  1020 */  1222, 1225, 1223, 1226, 1182, 1183, 1184, 1038, 1039, 1040,
 /*  1030 */  1041,
);

  /* fallback */

  private static $yyFallback = array(
  );

  private static $yyTokenName = array( 
  '$',             'PRAGMA',        'BASE',          'IRIREF',      
  'DOT',           'PREFIX',        'PNAME_NS',      'SELECT',      
  'DISTINCT',      'REDUCED',       'STAR',          'LPARENTHESE', 
  'AS',            'RPARENTHESE',   'CONSTRUCT',     'LBRACE',      
  'RBRACE',        'WHERE',         'DESCRIBE',      'ASK',         
  'FROM',          'NAMED',         'GROUP',         'BY',          
  'HAVING',        'ORDER',         'ASC',           'DESC',        
  'LIMIT',         'INTEGER',       'OFFSET',        'VALUES',      
  'SEMICOLON',     'LOAD',          'SILENT',        'INTO',        
  'CLEAR',         'DROP',          'CREATE',        'ADD',         
  'TO',            'MOVE',          'COPY',          'INSERTDATA',  
  'DELETEDATA',    'DELETEWHERE',   'WITH',          'DELETE',      
  'INSERT',        'USING',         'GRAPH',         'DEFAULT',     
  'ALL',           'OPTIONAL',      'SERVICE',       'BIND',        
  'NIL',           'UNDEF',         'SMINUS',        'UNION',       
  'FILTER',        'COMMA',         'A',             'VBAR',        
  'SLASH',         'HAT',           'PLUS',          'QUESTION',    
  'EXCLAMATION',   'LBRACKET',      'RBRACKET',      'VAR1',        
  'VAR2',          'OR',            'AND',           'EQUAL',       
  'NEQUAL',        'SMALLERTHEN',   'GREATERTHEN',   'SMALLERTHENQ',
  'GREATERTHENQ',  'IN',            'NOT',           'MINUS',       
  'STR',           'LANG',          'LANGMATCHES',   'DATATYPE',    
  'BOUND',         'URI',           'BNODE',         'RAND',        
  'ABS',           'CEIL',          'FLOOR',         'ROUND',       
  'CONCAT',        'STRLEN',        'UCASE',         'LCASE',       
  'ENCODE_FOR_URI',  'CONTAINS',      'STRSTARTS',     'STRENDS',     
  'STBEFORE',      'STRAFTER',      'YEAR',          'MONTH',       
  'DAY',           'HOURS',         'MINUTES',       'SECONDS',     
  'TIMEZONE',      'TZ',            'NOW',           'UUID',        
  'STRUUID',       'MD5',           'SHA1',          'SHA256',      
  'SHA384',        'SHA512',        'COALESCE',      'IF',          
  'STRLANG',       'STRDT',         'SAMETERM',      'ISIRI',       
  'ISURI',         'ISBLANK',       'ISLITERAL',     'ISNUMERIC',   
  'REGEX',         'SUBSTR',        'REPLACE',       'EXISTS',      
  'COUNT',         'SUM',           'MIN',           'MAX',         
  'AVG',           'SAMPLE',        'GROUP_CONCAT',  'SEPARATOR',   
  'LANGTAG',       'DHAT',          'DECIMAL',       'DOUBLE',      
  'INTEGER_POSITIVE',  'DECIMAL_POSITIVE',  'DOUBLE_POSITIVE',  'INTEGER_NEGATIVE',
  'DECIMAL_NEGATIVE',  'DOUBLE_NEGATIVE',  'TRUE',          'FALSE',       
  'STRING_LITERAL1',  'STRING_LITERAL2',  'STRING_LITERAL_LONG1',  'STRING_LITERAL_LONG2',
  'PNAME_LN',      'BLANK_NODE_LABEL',  'ANON',          'error',       
  'start',         'query',         'update',        'prologue',    
  'selectQuery',   'valuesClause',  'constructQuery',  'describeQuery',
  'askQuery',      'prefixDeclX',   'baseDecl',      'prefixDecl',  
  'selectClause',  'datasetClauseX',  'whereclause',   'solutionModifier',
  'datasetClause',  'subSelect',     'selectClauseX',  'expression',  
  'var',           'triplesTemplate',  'varOrIriX',     'varOrIri',    
  'iri',           'groupGraphPattern',  'groupClause',   'havingClause',
  'orderClause',   'limitOffsetClauses',  'groupConditionX',  'builtInCall', 
  'functionCall',  'constraintX',   'orderConditionX',  'orderCondition',
  'limitClause',   'offsetClause',  'dataBlock',     'update1',     
  'updateX',       'load',          'clear',         'drop',        
  'add',           'move',          'copy',          'create',      
  'insertData',    'deleteData',    'deletewhere',   'modify',      
  'graphRef',      'graphRefAll',   'graphOrDefault',  'quadData',    
  'quadPattern',   'deleteClause',  'insertClause',  'usingClauseX',
  'usingClause',   'quads',         'quadsX',        'quadsNotTriples',
  'triplesSameSubject',  'triplesTemplateX',  'groupGraphPatternSub',  'triplesBlock',
  'groupGraphPatternSubX',  'graphPatternNotTriples',  'triplesSameSubjectPath',  'triplesBlockX',
  'groupOrUnionGraphPattern',  'optionalGraphPattern',  'minusGraphPattern',  'graphGraphPattern',
  'serviceGraphPattern',  'filter',        'bind',          'inlineData',  
  'inlineDataOneVar',  'inlineDataFull',  'dataBlockValueX',  'dataBlockValue',
  'varX',          'inlineDataFullX',  'nilX',          'rdfLiteral',  
  'numericLiteral',  'booleanLiteral',  'groupOrUnionGraphPatternX',  'argList',     
  'argListX',      'expressionList',  'varOrTerm',     'propertyListNotEmpty',
  'triplesNode',   'verb',          'objectList',    'propertyListNotEmptyX',
  'graphNode',     'objectListX',   'propertyListPathNotEmpty',  'triplesNodePath',
  'pathAlternative',  'objectListPath',  'propertyListPathNotEmptyX',  'graphNodePath',
  'objectListPathX',  'pathSequence',  'pathAlternativeX',  'pathEltOrInverse',
  'pathSequenceX',  'pathElt',       'pathPrimary',   'pathMod',     
  'pathNegatedPropertySet',  'pathOneInPropertySet',  'pathNegatedPropertySetX',  'collection',  
  'blankNodePropertyList',  'collectionPath',  'blankNodePropertyListPath',  'graphNodeX',  
  'graphNodePathX',  'graphTerm',     'blankNode',     'conditionalAndExpression',
  'conditionalOrExpressionX',  'relationalExpression',  'conditionalAndExpressionX',  'additiveExpression',
  'relationalExpressionX',  'multiplicativeExpression',  'additiveExpressionX',  'numericLiteralPositive',
  'additiveExpressionY',  'numericLiteralNegative',  'unaryExpression',  'primaryExpression',
  'aggregate',     'regexExpression',  'existsFunc',    'notExistsFunc',
  'subStringExpression',  'strReplaceExpression',  'string',        'numericLiteralUnsigned',
  'prefixedName',
  );

  private static $yyRuleName = array(
 /*   0 */ "start ::= query",
 /*   1 */ "start ::= update",
 /*   2 */ "start ::=",
 /*   3 */ "query ::= prologue selectQuery valuesClause",
 /*   4 */ "query ::= prologue constructQuery valuesClause",
 /*   5 */ "query ::= prologue describeQuery valuesClause",
 /*   6 */ "query ::= prologue askQuery valuesClause",
 /*   7 */ "query ::= selectQuery valuesClause",
 /*   8 */ "query ::= constructQuery valuesClause",
 /*   9 */ "query ::= describeQuery valuesClause",
 /*  10 */ "query ::= askQuery valuesClause",
 /*  11 */ "query ::= prologue selectQuery",
 /*  12 */ "query ::= prologue constructQuery",
 /*  13 */ "query ::= prologue describeQuery",
 /*  14 */ "query ::= prologue askQuery",
 /*  15 */ "query ::= selectQuery",
 /*  16 */ "query ::= constructQuery",
 /*  17 */ "query ::= describeQuery",
 /*  18 */ "query ::= askQuery",
 /*  19 */ "prologue ::= prefixDeclX baseDecl prefixDeclX",
 /*  20 */ "prologue ::= baseDecl prefixDeclX",
 /*  21 */ "prologue ::= prefixDeclX baseDecl",
 /*  22 */ "prologue ::= baseDecl",
 /*  23 */ "prologue ::= prefixDeclX",
 /*  24 */ "prefixDeclX ::= prefixDeclX prefixDecl",
 /*  25 */ "prefixDeclX ::= prefixDecl",
 /*  26 */ "baseDecl ::= BASE IRIREF DOT",
 /*  27 */ "baseDecl ::= BASE IRIREF",
 /*  28 */ "prefixDecl ::= PREFIX PNAME_NS IRIREF DOT",
 /*  29 */ "prefixDecl ::= PREFIX PNAME_NS IRIREF",
 /*  30 */ "selectQuery ::= selectClause datasetClauseX whereclause solutionModifier",
 /*  31 */ "selectQuery ::= selectClause datasetClauseX whereclause",
 /*  32 */ "selectQuery ::= selectClause whereclause solutionModifier",
 /*  33 */ "selectQuery ::= selectClause whereclause",
 /*  34 */ "datasetClauseX ::= datasetClauseX datasetClause",
 /*  35 */ "datasetClauseX ::= datasetClause",
 /*  36 */ "subSelect ::= selectClause whereclause solutionModifier valuesClause",
 /*  37 */ "subSelect ::= selectClause whereclause valuesClause",
 /*  38 */ "subSelect ::= selectClause whereclause solutionModifier",
 /*  39 */ "subSelect ::= selectClause whereclause",
 /*  40 */ "selectClause ::= SELECT DISTINCT selectClauseX",
 /*  41 */ "selectClause ::= SELECT REDUCED selectClauseX",
 /*  42 */ "selectClause ::= SELECT DISTINCT STAR",
 /*  43 */ "selectClause ::= SELECT REDUCED STAR",
 /*  44 */ "selectClause ::= SELECT selectClauseX",
 /*  45 */ "selectClause ::= SELECT STAR",
 /*  46 */ "selectClauseX ::= selectClauseX LPARENTHESE expression AS var RPARENTHESE",
 /*  47 */ "selectClauseX ::= selectClauseX var",
 /*  48 */ "selectClauseX ::= LPARENTHESE expression AS var RPARENTHESE",
 /*  49 */ "selectClauseX ::= var",
 /*  50 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause solutionModifier",
 /*  51 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause solutionModifier",
 /*  52 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE solutionModifier",
 /*  53 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE solutionModifier",
 /*  54 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause solutionModifier",
 /*  55 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause solutionModifier",
 /*  56 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause",
 /*  57 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause",
 /*  58 */ "constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause",
 /*  59 */ "constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause",
 /*  60 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE",
 /*  61 */ "constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE",
 /*  62 */ "constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE solutionModifier",
 /*  63 */ "constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE solutionModifier",
 /*  64 */ "constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE",
 /*  65 */ "constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE",
 /*  66 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause solutionModifier",
 /*  67 */ "describeQuery ::= DESCRIBE varOrIriX whereclause solutionModifier",
 /*  68 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX solutionModifier",
 /*  69 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause",
 /*  70 */ "describeQuery ::= DESCRIBE varOrIriX solutionModifier",
 /*  71 */ "describeQuery ::= DESCRIBE varOrIriX whereclause",
 /*  72 */ "describeQuery ::= DESCRIBE varOrIriX datasetClauseX",
 /*  73 */ "describeQuery ::= DESCRIBE varOrIriX",
 /*  74 */ "describeQuery ::= DESCRIBE STAR datasetClauseX whereclause solutionModifier",
 /*  75 */ "describeQuery ::= DESCRIBE STAR whereclause solutionModifier",
 /*  76 */ "describeQuery ::= DESCRIBE STAR datasetClauseX solutionModifier",
 /*  77 */ "describeQuery ::= DESCRIBE STAR datasetClauseX whereclause",
 /*  78 */ "describeQuery ::= DESCRIBE STAR solutionModifier",
 /*  79 */ "describeQuery ::= DESCRIBE STAR whereclause",
 /*  80 */ "describeQuery ::= DESCRIBE STAR datasetClauseX",
 /*  81 */ "describeQuery ::= DESCRIBE STAR",
 /*  82 */ "varOrIriX ::= varOrIriX varOrIri",
 /*  83 */ "varOrIriX ::= varOrIri",
 /*  84 */ "askQuery ::= ASK datasetClauseX whereclause solutionModifier",
 /*  85 */ "askQuery ::= ASK datasetClauseX whereclause",
 /*  86 */ "askQuery ::= ASK whereclause solutionModifier",
 /*  87 */ "askQuery ::= ASK whereclause",
 /*  88 */ "datasetClause ::= FROM NAMED iri",
 /*  89 */ "datasetClause ::= FROM iri",
 /*  90 */ "whereclause ::= WHERE groupGraphPattern",
 /*  91 */ "whereclause ::= groupGraphPattern",
 /*  92 */ "solutionModifier ::= groupClause havingClause orderClause limitOffsetClauses",
 /*  93 */ "solutionModifier ::= havingClause orderClause limitOffsetClauses",
 /*  94 */ "solutionModifier ::= groupClause orderClause limitOffsetClauses",
 /*  95 */ "solutionModifier ::= groupClause havingClause limitOffsetClauses",
 /*  96 */ "solutionModifier ::= groupClause havingClause orderClause",
 /*  97 */ "solutionModifier ::= groupClause havingClause",
 /*  98 */ "solutionModifier ::= groupClause orderClause",
 /*  99 */ "solutionModifier ::= groupClause limitOffsetClauses",
 /* 100 */ "solutionModifier ::= orderClause limitOffsetClauses",
 /* 101 */ "solutionModifier ::= havingClause limitOffsetClauses",
 /* 102 */ "solutionModifier ::= havingClause orderClause",
 /* 103 */ "solutionModifier ::= groupClause",
 /* 104 */ "solutionModifier ::= havingClause",
 /* 105 */ "solutionModifier ::= orderClause",
 /* 106 */ "solutionModifier ::= limitOffsetClauses",
 /* 107 */ "groupClause ::= GROUP BY groupConditionX",
 /* 108 */ "groupConditionX ::= groupConditionX LPARENTHESE expression AS var RPARENTHESE",
 /* 109 */ "groupConditionX ::= groupConditionX builtInCall",
 /* 110 */ "groupConditionX ::= groupConditionX functionCall",
 /* 111 */ "groupConditionX ::= groupConditionX LPARENTHESE expression RPARENTHESE",
 /* 112 */ "groupConditionX ::= groupConditionX var",
 /* 113 */ "groupConditionX ::= LPARENTHESE expression AS var RPARENTHESE",
 /* 114 */ "groupConditionX ::= builtInCall",
 /* 115 */ "groupConditionX ::= functionCall",
 /* 116 */ "groupConditionX ::= LPARENTHESE expression RPARENTHESE",
 /* 117 */ "groupConditionX ::= var",
 /* 118 */ "havingClause ::= HAVING constraintX",
 /* 119 */ "constraintX ::= constraintX LPARENTHESE expression RPARENTHESE",
 /* 120 */ "constraintX ::= constraintX builtInCall",
 /* 121 */ "constraintX ::= constraintX functionCall",
 /* 122 */ "constraintX ::= LPARENTHESE expression RPARENTHESE",
 /* 123 */ "constraintX ::= builtInCall",
 /* 124 */ "constraintX ::= functionCall",
 /* 125 */ "orderClause ::= ORDER BY orderConditionX",
 /* 126 */ "orderConditionX ::= orderConditionX orderCondition",
 /* 127 */ "orderConditionX ::= orderCondition",
 /* 128 */ "orderCondition ::= ASC LPARENTHESE expression RPARENTHESE",
 /* 129 */ "orderCondition ::= DESC LPARENTHESE expression RPARENTHESE",
 /* 130 */ "orderCondition ::= LPARENTHESE expression RPARENTHESE",
 /* 131 */ "orderCondition ::= builtInCall",
 /* 132 */ "orderCondition ::= functionCall",
 /* 133 */ "orderCondition ::= var",
 /* 134 */ "limitOffsetClauses ::= limitClause offsetClause",
 /* 135 */ "limitOffsetClauses ::= offsetClause limitClause",
 /* 136 */ "limitOffsetClauses ::= limitClause",
 /* 137 */ "limitOffsetClauses ::= offsetClause",
 /* 138 */ "limitClause ::= LIMIT INTEGER",
 /* 139 */ "offsetClause ::= OFFSET INTEGER",
 /* 140 */ "valuesClause ::= VALUES dataBlock",
 /* 141 */ "update ::= prologue update1 updateX SEMICOLON",
 /* 142 */ "update ::= prologue update1 updateX",
 /* 143 */ "update ::= update1 updateX SEMICOLON",
 /* 144 */ "update ::= update1 updateX",
 /* 145 */ "update ::= prologue update1 SEMICOLON",
 /* 146 */ "update ::= prologue update1",
 /* 147 */ "update ::= update1 SEMICOLON",
 /* 148 */ "update ::= update1",
 /* 149 */ "update ::= prologue",
 /* 150 */ "updateX ::= updateX SEMICOLON prologue update1",
 /* 151 */ "updateX ::= updateX SEMICOLON update1",
 /* 152 */ "updateX ::= SEMICOLON prologue update1",
 /* 153 */ "updateX ::= SEMICOLON update1",
 /* 154 */ "update1 ::= load",
 /* 155 */ "update1 ::= clear",
 /* 156 */ "update1 ::= drop",
 /* 157 */ "update1 ::= add",
 /* 158 */ "update1 ::= move",
 /* 159 */ "update1 ::= copy",
 /* 160 */ "update1 ::= create",
 /* 161 */ "update1 ::= insertData",
 /* 162 */ "update1 ::= deleteData",
 /* 163 */ "update1 ::= deletewhere",
 /* 164 */ "update1 ::= modify",
 /* 165 */ "load ::= LOAD SILENT iri INTO graphRef",
 /* 166 */ "load ::= LOAD iri INTO graphRef",
 /* 167 */ "load ::= LOAD SILENT iri",
 /* 168 */ "load ::= LOAD iri",
 /* 169 */ "clear ::= CLEAR SILENT graphRefAll",
 /* 170 */ "clear ::= CLEAR graphRefAll",
 /* 171 */ "drop ::= DROP SILENT graphRefAll",
 /* 172 */ "drop ::= DROP graphRefAll",
 /* 173 */ "create ::= CREATE SILENT graphRef",
 /* 174 */ "create ::= CREATE graphRef",
 /* 175 */ "add ::= ADD SILENT graphOrDefault TO graphOrDefault",
 /* 176 */ "add ::= ADD graphOrDefault TO graphOrDefault",
 /* 177 */ "move ::= MOVE SILENT graphOrDefault TO graphOrDefault",
 /* 178 */ "move ::= MOVE graphOrDefault TO graphOrDefault",
 /* 179 */ "copy ::= COPY SILENT graphOrDefault TO graphOrDefault",
 /* 180 */ "copy ::= COPY graphOrDefault TO graphOrDefault",
 /* 181 */ "insertData ::= INSERTDATA quadData",
 /* 182 */ "deleteData ::= DELETEDATA quadData",
 /* 183 */ "deletewhere ::= DELETEWHERE quadPattern",
 /* 184 */ "modify ::= WITH iri deleteClause insertClause usingClauseX WHERE groupGraphPattern",
 /* 185 */ "modify ::= WITH iri deleteClause usingClauseX WHERE groupGraphPattern",
 /* 186 */ "modify ::= WITH iri insertClause usingClauseX WHERE groupGraphPattern",
 /* 187 */ "modify ::= WITH iri deleteClause insertClause WHERE groupGraphPattern",
 /* 188 */ "modify ::= WITH iri deleteClause WHERE groupGraphPattern",
 /* 189 */ "modify ::= WITH iri insertClause WHERE groupGraphPattern",
 /* 190 */ "modify ::= deleteClause insertClause usingClauseX WHERE groupGraphPattern",
 /* 191 */ "modify ::= deleteClause usingClauseX WHERE groupGraphPattern",
 /* 192 */ "modify ::= insertClause usingClauseX WHERE groupGraphPattern",
 /* 193 */ "modify ::= deleteClause insertClause WHERE groupGraphPattern",
 /* 194 */ "modify ::= deleteClause WHERE groupGraphPattern",
 /* 195 */ "modify ::= insertClause WHERE groupGraphPattern",
 /* 196 */ "usingClauseX ::= usingClauseX usingClause",
 /* 197 */ "usingClauseX ::= usingClause",
 /* 198 */ "deleteClause ::= DELETE quadPattern",
 /* 199 */ "insertClause ::= INSERT quadPattern",
 /* 200 */ "usingClause ::= USING NAMED iri",
 /* 201 */ "usingClause ::= USING iri",
 /* 202 */ "graphOrDefault ::= GRAPH iri",
 /* 203 */ "graphOrDefault ::= DEFAULT",
 /* 204 */ "graphOrDefault ::= iri",
 /* 205 */ "graphRef ::= GRAPH iri",
 /* 206 */ "graphRefAll ::= graphRef",
 /* 207 */ "graphRefAll ::= DEFAULT",
 /* 208 */ "graphRefAll ::= NAMED",
 /* 209 */ "graphRefAll ::= ALL",
 /* 210 */ "quadPattern ::= LBRACE quads RBRACE",
 /* 211 */ "quadPattern ::= LBRACE RBRACE",
 /* 212 */ "quadData ::= LBRACE quads RBRACE",
 /* 213 */ "quadData ::= LBRACE RBRACE",
 /* 214 */ "quads ::= triplesTemplate quadsX",
 /* 215 */ "quads ::= triplesTemplate",
 /* 216 */ "quads ::= quadsX",
 /* 217 */ "quadsX ::= quadsX quadsNotTriples DOT triplesTemplate",
 /* 218 */ "quadsX ::= quadsX quadsNotTriples triplesTemplate",
 /* 219 */ "quadsX ::= quadsX quadsNotTriples DOT",
 /* 220 */ "quadsX ::= quadsX quadsNotTriples",
 /* 221 */ "quadsX ::= quadsNotTriples DOT triplesTemplate",
 /* 222 */ "quadsX ::= quadsNotTriples triplesTemplate",
 /* 223 */ "quadsX ::= quadsNotTriples DOT",
 /* 224 */ "quadsX ::= quadsNotTriples",
 /* 225 */ "quadsNotTriples ::= GRAPH varOrIri LBRACE triplesTemplate RBRACE",
 /* 226 */ "quadsNotTriples ::= GRAPH varOrIri LBRACE RBRACE",
 /* 227 */ "triplesTemplate ::= triplesSameSubject DOT triplesTemplateX DOT",
 /* 228 */ "triplesTemplate ::= triplesSameSubject DOT triplesTemplateX",
 /* 229 */ "triplesTemplate ::= triplesSameSubject DOT",
 /* 230 */ "triplesTemplate ::= triplesSameSubject",
 /* 231 */ "triplesTemplateX ::= triplesTemplateX DOT triplesSameSubject",
 /* 232 */ "triplesTemplateX ::= triplesSameSubject",
 /* 233 */ "groupGraphPattern ::= LBRACE groupGraphPatternSub RBRACE",
 /* 234 */ "groupGraphPattern ::= LBRACE subSelect RBRACE",
 /* 235 */ "groupGraphPattern ::= LBRACE RBRACE",
 /* 236 */ "groupGraphPatternSub ::= triplesBlock groupGraphPatternSubX",
 /* 237 */ "groupGraphPatternSub ::= triplesBlock",
 /* 238 */ "groupGraphPatternSub ::= groupGraphPatternSubX",
 /* 239 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT triplesBlock",
 /* 240 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples triplesBlock",
 /* 241 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT",
 /* 242 */ "groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples",
 /* 243 */ "groupGraphPatternSubX ::= graphPatternNotTriples DOT triplesBlock",
 /* 244 */ "groupGraphPatternSubX ::= graphPatternNotTriples triplesBlock",
 /* 245 */ "groupGraphPatternSubX ::= graphPatternNotTriples DOT",
 /* 246 */ "groupGraphPatternSubX ::= graphPatternNotTriples",
 /* 247 */ "triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX DOT",
 /* 248 */ "triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX",
 /* 249 */ "triplesBlock ::= triplesSameSubjectPath DOT",
 /* 250 */ "triplesBlock ::= triplesSameSubjectPath",
 /* 251 */ "triplesBlockX ::= triplesBlockX DOT triplesSameSubjectPath",
 /* 252 */ "triplesBlockX ::= triplesSameSubjectPath",
 /* 253 */ "graphPatternNotTriples ::= groupOrUnionGraphPattern",
 /* 254 */ "graphPatternNotTriples ::= optionalGraphPattern",
 /* 255 */ "graphPatternNotTriples ::= minusGraphPattern",
 /* 256 */ "graphPatternNotTriples ::= graphGraphPattern",
 /* 257 */ "graphPatternNotTriples ::= serviceGraphPattern",
 /* 258 */ "graphPatternNotTriples ::= filter",
 /* 259 */ "graphPatternNotTriples ::= bind",
 /* 260 */ "graphPatternNotTriples ::= inlineData",
 /* 261 */ "optionalGraphPattern ::= OPTIONAL groupGraphPattern",
 /* 262 */ "graphGraphPattern ::= GRAPH varOrIri groupGraphPattern",
 /* 263 */ "serviceGraphPattern ::= SERVICE SILENT varOrIri groupGraphPattern",
 /* 264 */ "serviceGraphPattern ::= SERVICE varOrIri groupGraphPattern",
 /* 265 */ "bind ::= BIND LPARENTHESE expression AS var RPARENTHESE",
 /* 266 */ "inlineData ::= VALUES dataBlock",
 /* 267 */ "dataBlock ::= inlineDataOneVar",
 /* 268 */ "dataBlock ::= inlineDataFull",
 /* 269 */ "inlineDataOneVar ::= var LBRACE dataBlockValueX RBRACE",
 /* 270 */ "inlineDataOneVar ::= var LBRACE RBRACE",
 /* 271 */ "dataBlockValueX ::= dataBlockValueX dataBlockValue",
 /* 272 */ "dataBlockValueX ::= dataBlockValue",
 /* 273 */ "inlineDataFull ::= LPARENTHESE varX RPARENTHESE LBRACE inlineDataFullX RBRACE",
 /* 274 */ "inlineDataFull ::= NIL LBRACE nilX RBRACE",
 /* 275 */ "inlineDataFull ::= NIL LBRACE RBRACE",
 /* 276 */ "nilX ::= nilX NIL",
 /* 277 */ "nilX ::= NIL",
 /* 278 */ "varX ::= varX var",
 /* 279 */ "varX ::= var",
 /* 280 */ "inlineDataFullX ::= inlineDataFullX LPARENTHESE dataBlockValueX RPARENTHESE",
 /* 281 */ "inlineDataFullX ::= inlineDataFullX NIL",
 /* 282 */ "inlineDataFullX ::= LPARENTHESE dataBlockValueX RPARENTHESE",
 /* 283 */ "inlineDataFullX ::= NIL",
 /* 284 */ "dataBlockValue ::= iri",
 /* 285 */ "dataBlockValue ::= rdfLiteral",
 /* 286 */ "dataBlockValue ::= numericLiteral",
 /* 287 */ "dataBlockValue ::= booleanLiteral",
 /* 288 */ "dataBlockValue ::= UNDEF",
 /* 289 */ "minusGraphPattern ::= SMINUS groupGraphPattern",
 /* 290 */ "groupOrUnionGraphPattern ::= groupGraphPattern groupOrUnionGraphPatternX",
 /* 291 */ "groupOrUnionGraphPattern ::= groupGraphPattern",
 /* 292 */ "groupOrUnionGraphPatternX ::= groupOrUnionGraphPatternX UNION groupGraphPattern",
 /* 293 */ "groupOrUnionGraphPatternX ::= UNION groupGraphPattern",
 /* 294 */ "filter ::= FILTER LPARENTHESE expression RPARENTHESE",
 /* 295 */ "filter ::= FILTER builtInCall",
 /* 296 */ "filter ::= FILTER functionCall",
 /* 297 */ "functionCall ::= iri argList",
 /* 298 */ "argList ::= LPARENTHESE DISTINCT expression argListX RPARENTHESE",
 /* 299 */ "argList ::= LPARENTHESE expression argListX RPARENTHESE",
 /* 300 */ "argList ::= LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 301 */ "argList ::= LPARENTHESE expression RPARENTHESE",
 /* 302 */ "argList ::= NIL",
 /* 303 */ "argListX ::= argListX COMMA expression",
 /* 304 */ "argListX ::= COMMA expression",
 /* 305 */ "expressionList ::= LPARENTHESE expression argListX RPARENTHESE",
 /* 306 */ "expressionList ::= LPARENTHESE expression RPARENTHESE",
 /* 307 */ "expressionList ::= NIL",
 /* 308 */ "triplesSameSubject ::= varOrTerm propertyListNotEmpty",
 /* 309 */ "triplesSameSubject ::= triplesNode propertyListNotEmpty",
 /* 310 */ "triplesSameSubject ::= triplesNode",
 /* 311 */ "propertyListNotEmpty ::= verb objectList propertyListNotEmptyX",
 /* 312 */ "propertyListNotEmpty ::= verb objectList",
 /* 313 */ "propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON verb objectList",
 /* 314 */ "propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON",
 /* 315 */ "propertyListNotEmptyX ::= SEMICOLON verb objectList",
 /* 316 */ "propertyListNotEmptyX ::= SEMICOLON",
 /* 317 */ "verb ::= varOrIri",
 /* 318 */ "verb ::= A",
 /* 319 */ "objectList ::= graphNode objectListX",
 /* 320 */ "objectList ::= graphNode",
 /* 321 */ "objectListX ::= objectListX COMMA graphNode",
 /* 322 */ "objectListX ::= COMMA graphNode",
 /* 323 */ "triplesSameSubjectPath ::= varOrTerm propertyListPathNotEmpty",
 /* 324 */ "triplesSameSubjectPath ::= triplesNodePath propertyListPathNotEmpty",
 /* 325 */ "triplesSameSubjectPath ::= triplesNodePath",
 /* 326 */ "propertyListPathNotEmpty ::= pathAlternative objectListPath propertyListPathNotEmptyX",
 /* 327 */ "propertyListPathNotEmpty ::= var objectListPath propertyListPathNotEmptyX",
 /* 328 */ "propertyListPathNotEmpty ::= pathAlternative objectListPath",
 /* 329 */ "propertyListPathNotEmpty ::= var objectListPath",
 /* 330 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON pathAlternative objectList",
 /* 331 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON var objectList",
 /* 332 */ "propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON",
 /* 333 */ "propertyListPathNotEmptyX ::= SEMICOLON pathAlternative objectList",
 /* 334 */ "propertyListPathNotEmptyX ::= SEMICOLON var objectList",
 /* 335 */ "propertyListPathNotEmptyX ::= SEMICOLON",
 /* 336 */ "objectListPath ::= graphNodePath objectListPathX",
 /* 337 */ "objectListPath ::= graphNodePath",
 /* 338 */ "objectListPathX ::= objectListPathX COMMA graphNodePath",
 /* 339 */ "objectListPathX ::= COMMA graphNodePath",
 /* 340 */ "pathAlternative ::= pathSequence pathAlternativeX",
 /* 341 */ "pathAlternative ::= pathSequence",
 /* 342 */ "pathAlternativeX ::= pathAlternativeX VBAR pathSequence",
 /* 343 */ "pathAlternativeX ::= VBAR pathSequence",
 /* 344 */ "pathSequence ::= pathEltOrInverse pathSequenceX",
 /* 345 */ "pathSequence ::= pathEltOrInverse",
 /* 346 */ "pathSequenceX ::= pathSequenceX SLASH pathEltOrInverse",
 /* 347 */ "pathSequenceX ::= SLASH pathEltOrInverse",
 /* 348 */ "pathElt ::= pathPrimary pathMod",
 /* 349 */ "pathElt ::= pathPrimary",
 /* 350 */ "pathEltOrInverse ::= HAT pathElt",
 /* 351 */ "pathEltOrInverse ::= pathElt",
 /* 352 */ "pathMod ::= STAR",
 /* 353 */ "pathMod ::= PLUS",
 /* 354 */ "pathMod ::= QUESTION",
 /* 355 */ "pathPrimary ::= LPARENTHESE pathAlternative RPARENTHESE",
 /* 356 */ "pathPrimary ::= EXCLAMATION pathNegatedPropertySet",
 /* 357 */ "pathPrimary ::= A",
 /* 358 */ "pathPrimary ::= iri",
 /* 359 */ "pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet pathNegatedPropertySetX RPARENTHESE",
 /* 360 */ "pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet RPARENTHESE",
 /* 361 */ "pathNegatedPropertySet ::= LPARENTHESE RPARENTHESE",
 /* 362 */ "pathNegatedPropertySet ::= pathOneInPropertySet",
 /* 363 */ "pathNegatedPropertySetX ::= pathNegatedPropertySetX VBAR pathOneInPropertySet",
 /* 364 */ "pathNegatedPropertySetX ::= VBAR pathOneInPropertySet",
 /* 365 */ "pathOneInPropertySet ::= HAT iri",
 /* 366 */ "pathOneInPropertySet ::= HAT A",
 /* 367 */ "pathOneInPropertySet ::= A",
 /* 368 */ "pathOneInPropertySet ::= iri",
 /* 369 */ "triplesNode ::= collection",
 /* 370 */ "triplesNode ::= blankNodePropertyList",
 /* 371 */ "blankNodePropertyList ::= LBRACKET propertyListNotEmpty RBRACKET",
 /* 372 */ "triplesNodePath ::= collectionPath",
 /* 373 */ "triplesNodePath ::= blankNodePropertyListPath",
 /* 374 */ "blankNodePropertyListPath ::= LBRACKET propertyListPathNotEmpty RBRACKET",
 /* 375 */ "collection ::= LPARENTHESE graphNodeX RPARENTHESE",
 /* 376 */ "graphNodeX ::= graphNodeX graphNode",
 /* 377 */ "graphNodeX ::= graphNode",
 /* 378 */ "collectionPath ::= LPARENTHESE graphNodePathX RPARENTHESE",
 /* 379 */ "graphNodePathX ::= graphNodePathX graphNodePath",
 /* 380 */ "graphNodePathX ::= graphNodePath",
 /* 381 */ "graphNode ::= varOrTerm",
 /* 382 */ "graphNode ::= triplesNode",
 /* 383 */ "graphNodePath ::= varOrTerm",
 /* 384 */ "graphNodePath ::= triplesNodePath",
 /* 385 */ "varOrTerm ::= var",
 /* 386 */ "varOrTerm ::= graphTerm",
 /* 387 */ "varOrIri ::= var",
 /* 388 */ "varOrIri ::= iri",
 /* 389 */ "var ::= VAR1",
 /* 390 */ "var ::= VAR2",
 /* 391 */ "graphTerm ::= iri",
 /* 392 */ "graphTerm ::= rdfLiteral",
 /* 393 */ "graphTerm ::= numericLiteral",
 /* 394 */ "graphTerm ::= booleanLiteral",
 /* 395 */ "graphTerm ::= blankNode",
 /* 396 */ "graphTerm ::= NIL",
 /* 397 */ "expression ::= conditionalAndExpression conditionalOrExpressionX",
 /* 398 */ "expression ::= conditionalAndExpression",
 /* 399 */ "conditionalOrExpressionX ::= conditionalOrExpressionX OR conditionalAndExpression",
 /* 400 */ "conditionalOrExpressionX ::= OR conditionalAndExpression",
 /* 401 */ "conditionalAndExpression ::= relationalExpression conditionalAndExpressionX",
 /* 402 */ "conditionalAndExpression ::= relationalExpression",
 /* 403 */ "conditionalAndExpressionX ::= conditionalAndExpressionX AND relationalExpression",
 /* 404 */ "conditionalAndExpressionX ::= AND relationalExpression",
 /* 405 */ "relationalExpression ::= additiveExpression relationalExpressionX",
 /* 406 */ "relationalExpression ::= additiveExpression",
 /* 407 */ "relationalExpressionX ::= EQUAL additiveExpression",
 /* 408 */ "relationalExpressionX ::= NEQUAL additiveExpression",
 /* 409 */ "relationalExpressionX ::= SMALLERTHEN additiveExpression",
 /* 410 */ "relationalExpressionX ::= GREATERTHEN additiveExpression",
 /* 411 */ "relationalExpressionX ::= SMALLERTHENQ additiveExpression",
 /* 412 */ "relationalExpressionX ::= GREATERTHENQ additiveExpression",
 /* 413 */ "relationalExpressionX ::= IN expressionList",
 /* 414 */ "relationalExpressionX ::= NOT IN expressionList",
 /* 415 */ "additiveExpression ::= multiplicativeExpression additiveExpressionX",
 /* 416 */ "additiveExpression ::= multiplicativeExpression",
 /* 417 */ "additiveExpressionX ::= additiveExpressionX numericLiteralPositive additiveExpressionY",
 /* 418 */ "additiveExpressionX ::= additiveExpressionX numericLiteralNegative additiveExpressionY",
 /* 419 */ "additiveExpressionX ::= additiveExpressionX numericLiteralPositive",
 /* 420 */ "additiveExpressionX ::= additiveExpressionX numericLiteralNegative",
 /* 421 */ "additiveExpressionX ::= additiveExpressionX PLUS multiplicativeExpression",
 /* 422 */ "additiveExpressionX ::= additiveExpressionX MINUS multiplicativeExpression",
 /* 423 */ "additiveExpressionX ::= numericLiteralPositive additiveExpressionY",
 /* 424 */ "additiveExpressionX ::= numericLiteralNegative additiveExpressionY",
 /* 425 */ "additiveExpressionX ::= numericLiteralPositive",
 /* 426 */ "additiveExpressionX ::= numericLiteralNegative",
 /* 427 */ "additiveExpressionX ::= PLUS multiplicativeExpression",
 /* 428 */ "additiveExpressionX ::= MINUS multiplicativeExpression",
 /* 429 */ "additiveExpressionY ::= additiveExpressionY STAR unaryExpression",
 /* 430 */ "additiveExpressionY ::= additiveExpressionY SLASH unaryExpression",
 /* 431 */ "additiveExpressionY ::= STAR unaryExpression",
 /* 432 */ "additiveExpressionY ::= SLASH unaryExpression",
 /* 433 */ "multiplicativeExpression ::= unaryExpression additiveExpressionY",
 /* 434 */ "multiplicativeExpression ::= unaryExpression",
 /* 435 */ "unaryExpression ::= EXCLAMATION primaryExpression",
 /* 436 */ "unaryExpression ::= PLUS primaryExpression",
 /* 437 */ "unaryExpression ::= MINUS primaryExpression",
 /* 438 */ "unaryExpression ::= primaryExpression",
 /* 439 */ "primaryExpression ::= LPARENTHESE expression RPARENTHESE",
 /* 440 */ "primaryExpression ::= builtInCall",
 /* 441 */ "primaryExpression ::= iri",
 /* 442 */ "primaryExpression ::= functionCall",
 /* 443 */ "primaryExpression ::= rdfLiteral",
 /* 444 */ "primaryExpression ::= numericLiteral",
 /* 445 */ "primaryExpression ::= booleanLiteral",
 /* 446 */ "primaryExpression ::= var",
 /* 447 */ "builtInCall ::= aggregate",
 /* 448 */ "builtInCall ::= regexExpression",
 /* 449 */ "builtInCall ::= existsFunc",
 /* 450 */ "builtInCall ::= notExistsFunc",
 /* 451 */ "builtInCall ::= STR LPARENTHESE expression RPARENTHESE",
 /* 452 */ "builtInCall ::= LANG LPARENTHESE expression RPARENTHESE",
 /* 453 */ "builtInCall ::= LANGMATCHES LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 454 */ "builtInCall ::= DATATYPE LPARENTHESE expression RPARENTHESE",
 /* 455 */ "builtInCall ::= BOUND LPARENTHESE var RPARENTHESE",
 /* 456 */ "builtInCall ::= URI LPARENTHESE expression RPARENTHESE",
 /* 457 */ "builtInCall ::= BNODE LPARENTHESE expression RPARENTHESE",
 /* 458 */ "builtInCall ::= BNODE NIL",
 /* 459 */ "builtInCall ::= RAND NIL",
 /* 460 */ "builtInCall ::= ABS LPARENTHESE expression RPARENTHESE",
 /* 461 */ "builtInCall ::= CEIL LPARENTHESE expression RPARENTHESE",
 /* 462 */ "builtInCall ::= FLOOR LPARENTHESE expression RPARENTHESE",
 /* 463 */ "builtInCall ::= ROUND LPARENTHESE expression RPARENTHESE",
 /* 464 */ "builtInCall ::= CONCAT expressionList",
 /* 465 */ "builtInCall ::= subStringExpression",
 /* 466 */ "builtInCall ::= STRLEN LPARENTHESE expression RPARENTHESE",
 /* 467 */ "builtInCall ::= strReplaceExpression",
 /* 468 */ "builtInCall ::= UCASE LPARENTHESE expression RPARENTHESE",
 /* 469 */ "builtInCall ::= LCASE LPARENTHESE expression RPARENTHESE",
 /* 470 */ "builtInCall ::= ENCODE_FOR_URI LPARENTHESE expression RPARENTHESE",
 /* 471 */ "builtInCall ::= CONTAINS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 472 */ "builtInCall ::= STRSTARTS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 473 */ "builtInCall ::= STRENDS LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 474 */ "builtInCall ::= STBEFORE LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 475 */ "builtInCall ::= STRAFTER LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 476 */ "builtInCall ::= YEAR LPARENTHESE expression RPARENTHESE",
 /* 477 */ "builtInCall ::= MONTH LPARENTHESE expression RPARENTHESE",
 /* 478 */ "builtInCall ::= DAY LPARENTHESE expression RPARENTHESE",
 /* 479 */ "builtInCall ::= HOURS LPARENTHESE expression RPARENTHESE",
 /* 480 */ "builtInCall ::= MINUTES LPARENTHESE expression RPARENTHESE",
 /* 481 */ "builtInCall ::= SECONDS LPARENTHESE expression RPARENTHESE",
 /* 482 */ "builtInCall ::= TIMEZONE LPARENTHESE expression RPARENTHESE",
 /* 483 */ "builtInCall ::= TZ LPARENTHESE expression RPARENTHESE",
 /* 484 */ "builtInCall ::= NOW NIL",
 /* 485 */ "builtInCall ::= UUID NIL",
 /* 486 */ "builtInCall ::= STRUUID NIL",
 /* 487 */ "builtInCall ::= MD5 LPARENTHESE expression RPARENTHESE",
 /* 488 */ "builtInCall ::= SHA1 LPARENTHESE expression RPARENTHESE",
 /* 489 */ "builtInCall ::= SHA256 LPARENTHESE expression RPARENTHESE",
 /* 490 */ "builtInCall ::= SHA384 LPARENTHESE expression RPARENTHESE",
 /* 491 */ "builtInCall ::= SHA512 LPARENTHESE expression RPARENTHESE",
 /* 492 */ "builtInCall ::= COALESCE expressionList",
 /* 493 */ "builtInCall ::= IF LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 494 */ "builtInCall ::= STRLANG LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 495 */ "builtInCall ::= STRDT LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 496 */ "builtInCall ::= SAMETERM LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 497 */ "builtInCall ::= ISIRI LPARENTHESE expression RPARENTHESE",
 /* 498 */ "builtInCall ::= ISURI LPARENTHESE expression RPARENTHESE",
 /* 499 */ "builtInCall ::= ISBLANK LPARENTHESE expression RPARENTHESE",
 /* 500 */ "builtInCall ::= ISLITERAL LPARENTHESE expression RPARENTHESE",
 /* 501 */ "builtInCall ::= ISNUMERIC LPARENTHESE expression RPARENTHESE",
 /* 502 */ "regexExpression ::= REGEX LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 503 */ "regexExpression ::= REGEX LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 504 */ "subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 505 */ "subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression RPARENTHESE",
 /* 506 */ "strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression COMMA expression RPARENTHESE",
 /* 507 */ "strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE",
 /* 508 */ "existsFunc ::= EXISTS groupGraphPattern",
 /* 509 */ "notExistsFunc ::= NOT EXISTS groupGraphPattern",
 /* 510 */ "aggregate ::= COUNT LPARENTHESE DISTINCT STAR RPARENTHESE",
 /* 511 */ "aggregate ::= COUNT LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 512 */ "aggregate ::= COUNT LPARENTHESE STAR RPARENTHESE",
 /* 513 */ "aggregate ::= COUNT LPARENTHESE expression RPARENTHESE",
 /* 514 */ "aggregate ::= SUM LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 515 */ "aggregate ::= MIN LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 516 */ "aggregate ::= MAX LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 517 */ "aggregate ::= AVG LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 518 */ "aggregate ::= SAMPLE LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 519 */ "aggregate ::= SUM LPARENTHESE expression RPARENTHESE",
 /* 520 */ "aggregate ::= MIN LPARENTHESE expression RPARENTHESE",
 /* 521 */ "aggregate ::= MAX LPARENTHESE expression RPARENTHESE",
 /* 522 */ "aggregate ::= AVG LPARENTHESE expression RPARENTHESE",
 /* 523 */ "aggregate ::= SAMPLE LPARENTHESE expression RPARENTHESE",
 /* 524 */ "aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE",
 /* 525 */ "aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression RPARENTHESE",
 /* 526 */ "aggregate ::= GROUP_CONCAT LPARENTHESE expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE",
 /* 527 */ "aggregate ::= GROUP_CONCAT LPARENTHESE expression RPARENTHESE",
 /* 528 */ "rdfLiteral ::= string LANGTAG",
 /* 529 */ "rdfLiteral ::= string DHAT iri",
 /* 530 */ "rdfLiteral ::= string",
 /* 531 */ "numericLiteral ::= numericLiteralUnsigned",
 /* 532 */ "numericLiteral ::= numericLiteralPositive",
 /* 533 */ "numericLiteral ::= numericLiteralNegative",
 /* 534 */ "numericLiteralUnsigned ::= INTEGER",
 /* 535 */ "numericLiteralUnsigned ::= DECIMAL",
 /* 536 */ "numericLiteralUnsigned ::= DOUBLE",
 /* 537 */ "numericLiteralPositive ::= INTEGER_POSITIVE",
 /* 538 */ "numericLiteralPositive ::= DECIMAL_POSITIVE",
 /* 539 */ "numericLiteralPositive ::= DOUBLE_POSITIVE",
 /* 540 */ "numericLiteralNegative ::= INTEGER_NEGATIVE",
 /* 541 */ "numericLiteralNegative ::= DECIMAL_NEGATIVE",
 /* 542 */ "numericLiteralNegative ::= DOUBLE_NEGATIVE",
 /* 543 */ "booleanLiteral ::= TRUE",
 /* 544 */ "booleanLiteral ::= FALSE",
 /* 545 */ "string ::= STRING_LITERAL1",
 /* 546 */ "string ::= STRING_LITERAL2",
 /* 547 */ "string ::= STRING_LITERAL_LONG1",
 /* 548 */ "string ::= STRING_LITERAL_LONG2",
 /* 549 */ "iri ::= IRIREF",
 /* 550 */ "iri ::= prefixedName",
 /* 551 */ "prefixedName ::= PNAME_LN",
 /* 552 */ "prefixedName ::= PNAME_NS",
 /* 553 */ "blankNode ::= BLANK_NODE_LABEL",
 /* 554 */ "blankNode ::= ANON",
  );

  public function trace($yyTraceFILE, $yyTracePrompt)
  {
    $this->yyTraceFILE = $yyTraceFILE;
    $this->yyTracePrompt = $yyTracePrompt;

    if ($yyTraceFILE === null)
      $this->yyTracePrompt = null;
    else if ($yyTracePrompt === null)
      $this->yyTraceFILE = null;
  }

  public function yy_token_name($tokenType)
  {
    if (isset(self::$yyTokenName[$tokenType]))
      return self::$yyTokenName[$tokenType];

    return "Unknown";
  }

  private function yy_destructor($yymajor, $yypminor)
  {
    switch ($yymajor)
    {
      default:  
        break;
    }
  }

  private function yy_pop_parser_stack() 
  {
    if ($this->yyidx < 0) 
      return 0;

    $yytos = $this->yystack[$this->yyidx];

    if ($this->yyTraceFILE) 
      fprintf($this->yyTraceFILE,"%sPopping %s\n", $this->yyTracePrompt, self::$yyTokenName[$yytos->major]);

    $this->yy_destructor( $yytos->major, $yytos->minor);
    unset($this->yystack[$this->yyidx]);
    $this->yyidx--;

    return $yytos->major;
  }

  public function __destruct()
  {
    while($this->yyidx >= 0)
      $this->yy_pop_parser_stack();
  }

  private function yy_find_shift_action($iLookAhead) 
  {
    $i = 0;
    $stateno = $this->yystack[$this->yyidx]->stateno;

    if ($stateno > self::YY_SHIFT_MAX || ($i = self::$yy_shift_ofst[$stateno]) == self::YY_SHIFT_USE_DFLT)
      return self::$yy_default[$stateno];

    if ($iLookAhead == self::YYNOCODE)
      return $this->YY_NO_ACTION;

    $i += $iLookAhead;
    if ($i < 0 || $i >= count(self::$yy_action) || self::$yy_lookahead[$i] != $iLookAhead)
    {
      if ($iLookAhead > 0)
      {
        if (isset(self::$yyFallback[$iLookAhead]) && ($iFallback = self::$yyFallback[$iLookAhead]) != 0) 
        {
          if ($this->yyTraceFILE) 
            fprintf($this->yyTraceFILE, "%sFALLBACK %s => %s\n", $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], self::$yyTokenName[$iFallback]);

          return $this->yy_find_shift_action($iFallback);
        }
        if (defined('ASPPisParser::YYWILDCARD'))
        {
          $j = $i - $iLookAhead + self::YYWILDCARD;
          if ($j >= 0 && $j < count(self::$yy_action) && self::$yy_lookahead[$j] == self::YYWILDCARD)
          {
            if ($this->yyTraceFILE) 
              fprintf($this->yyTraceFILE, "%sWILDCARD %s => %s\n", $this->yyTracePrompt, self::$yyTokenName[$iLookAhead], self::$yyTokenName[self::YYWILDCARD]);

            return self::$yy_action[$j];
          }
        }
      }

      return self::$yy_default[$stateno];
    }
    else
      return self::$yy_action[$i];
  }

  private function yy_find_reduce_action($stateno, $iLookAhead)
  {
    $i = 0;

    if ($stateno > self::YY_REDUCE_MAX || ($i = self::$yy_reduce_ofst[$stateno]) == self::YY_REDUCE_USE_DFLT)
      return self::$yy_default[$stateno];

    if ($iLookAhead == self::YYNOCODE)
      return $this->YY_NO_ACTION;

    $i += $iLookAhead;
    if ($i < 0 || $i >= count(self::$yy_action) || self::$yy_lookahead[$i] != $iLookAhead)
      return self::$yy_default[$stateno];

    return self::$yy_action[$i];
  }

  private function yy_shift($yyNewState, $yyMajor, $yypMinor)
  {
    $this->yyidx++;

    if (isset($this->yystack[$this->yyidx])) 
    {
      $yytos = $this->yystack[$this->yyidx];
    } 
    else 
    {
      $yytos = new stdClass;
      $this->yystack[$this->yyidx] = $yytos;
    }

    $yytos->stateno = $yyNewState;
    $yytos->major = $yyMajor;
    $yytos->minor = $yypMinor;

    if ($this->yyTraceFILE) 
    {
      fprintf($this->yyTraceFILE,"%sShift %d\n", $this->yyTracePrompt, $yyNewState);
      fprintf($this->yyTraceFILE,"%sStack:", $this->yyTracePrompt);

      for ($i = 1; $i <= $this->yyidx; $i++) 
      {
        $ent = $this->yystack[$i];
        fprintf($this->yyTraceFILE, " %s", self::$yyTokenName[$ent->major]);
      }

      fprintf($this->yyTraceFILE, "\n");
    }
  }

  private function __overflow_dead_code() 
  {
  }

  private static $yyRuleInfo = array(
  164, 1,
  164, 1,
  164, 0,
  165, 3,
  165, 3,
  165, 3,
  165, 3,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 2,
  165, 1,
  165, 1,
  165, 1,
  165, 1,
  167, 3,
  167, 2,
  167, 2,
  167, 1,
  167, 1,
  173, 2,
  173, 1,
  174, 3,
  174, 2,
  175, 4,
  175, 3,
  168, 4,
  168, 3,
  168, 3,
  168, 2,
  177, 2,
  177, 1,
  181, 4,
  181, 3,
  181, 3,
  181, 2,
  176, 3,
  176, 3,
  176, 3,
  176, 3,
  176, 2,
  176, 2,
  182, 6,
  182, 2,
  182, 5,
  182, 1,
  170, 7,
  170, 6,
  170, 7,
  170, 6,
  170, 6,
  170, 5,
  170, 5,
  170, 4,
  170, 6,
  170, 5,
  170, 6,
  170, 5,
  170, 6,
  170, 5,
  170, 5,
  170, 4,
  171, 5,
  171, 4,
  171, 4,
  171, 4,
  171, 3,
  171, 3,
  171, 3,
  171, 2,
  171, 5,
  171, 4,
  171, 4,
  171, 4,
  171, 3,
  171, 3,
  171, 3,
  171, 2,
  186, 2,
  186, 1,
  172, 4,
  172, 3,
  172, 3,
  172, 2,
  180, 3,
  180, 2,
  178, 2,
  178, 1,
  179, 4,
  179, 3,
  179, 3,
  179, 3,
  179, 3,
  179, 2,
  179, 2,
  179, 2,
  179, 2,
  179, 2,
  179, 2,
  179, 1,
  179, 1,
  179, 1,
  179, 1,
  190, 3,
  194, 6,
  194, 2,
  194, 2,
  194, 4,
  194, 2,
  194, 5,
  194, 1,
  194, 1,
  194, 3,
  194, 1,
  191, 2,
  197, 4,
  197, 2,
  197, 2,
  197, 3,
  197, 1,
  197, 1,
  192, 3,
  198, 2,
  198, 1,
  199, 4,
  199, 4,
  199, 3,
  199, 1,
  199, 1,
  199, 1,
  193, 2,
  193, 2,
  193, 1,
  193, 1,
  200, 2,
  201, 2,
  169, 2,
  166, 4,
  166, 3,
  166, 3,
  166, 2,
  166, 3,
  166, 2,
  166, 2,
  166, 1,
  166, 1,
  204, 4,
  204, 3,
  204, 3,
  204, 2,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  203, 1,
  205, 5,
  205, 4,
  205, 3,
  205, 2,
  206, 3,
  206, 2,
  207, 3,
  207, 2,
  211, 3,
  211, 2,
  208, 5,
  208, 4,
  209, 5,
  209, 4,
  210, 5,
  210, 4,
  212, 2,
  213, 2,
  214, 2,
  215, 7,
  215, 6,
  215, 6,
  215, 6,
  215, 5,
  215, 5,
  215, 5,
  215, 4,
  215, 4,
  215, 4,
  215, 3,
  215, 3,
  223, 2,
  223, 1,
  221, 2,
  222, 2,
  224, 3,
  224, 2,
  218, 2,
  218, 1,
  218, 1,
  216, 2,
  217, 1,
  217, 1,
  217, 1,
  217, 1,
  220, 3,
  220, 2,
  219, 3,
  219, 2,
  225, 2,
  225, 1,
  225, 1,
  226, 4,
  226, 3,
  226, 3,
  226, 2,
  226, 3,
  226, 2,
  226, 2,
  226, 1,
  227, 5,
  227, 4,
  185, 4,
  185, 3,
  185, 2,
  185, 1,
  229, 3,
  229, 1,
  189, 3,
  189, 3,
  189, 2,
  230, 2,
  230, 1,
  230, 1,
  232, 4,
  232, 3,
  232, 3,
  232, 2,
  232, 3,
  232, 2,
  232, 2,
  232, 1,
  231, 4,
  231, 3,
  231, 2,
  231, 1,
  235, 3,
  235, 1,
  233, 1,
  233, 1,
  233, 1,
  233, 1,
  233, 1,
  233, 1,
  233, 1,
  233, 1,
  237, 2,
  239, 3,
  240, 4,
  240, 3,
  242, 6,
  243, 2,
  202, 1,
  202, 1,
  244, 4,
  244, 3,
  246, 2,
  246, 1,
  245, 6,
  245, 4,
  245, 3,
  250, 2,
  250, 1,
  248, 2,
  248, 1,
  249, 4,
  249, 2,
  249, 3,
  249, 1,
  247, 1,
  247, 1,
  247, 1,
  247, 1,
  247, 1,
  238, 2,
  236, 2,
  236, 1,
  254, 3,
  254, 2,
  241, 4,
  241, 2,
  241, 2,
  196, 2,
  255, 5,
  255, 4,
  255, 4,
  255, 3,
  255, 1,
  256, 3,
  256, 2,
  257, 4,
  257, 3,
  257, 1,
  228, 2,
  228, 2,
  228, 1,
  259, 3,
  259, 2,
  263, 4,
  263, 2,
  263, 3,
  263, 1,
  261, 1,
  261, 1,
  262, 2,
  262, 1,
  265, 3,
  265, 2,
  234, 2,
  234, 2,
  234, 1,
  266, 3,
  266, 3,
  266, 2,
  266, 2,
  270, 4,
  270, 4,
  270, 2,
  270, 3,
  270, 3,
  270, 1,
  269, 2,
  269, 1,
  272, 3,
  272, 2,
  268, 2,
  268, 1,
  274, 3,
  274, 2,
  273, 2,
  273, 1,
  276, 3,
  276, 2,
  277, 2,
  277, 1,
  275, 2,
  275, 1,
  279, 1,
  279, 1,
  279, 1,
  278, 3,
  278, 2,
  278, 1,
  278, 1,
  280, 4,
  280, 3,
  280, 2,
  280, 1,
  282, 3,
  282, 2,
  281, 2,
  281, 2,
  281, 1,
  281, 1,
  260, 1,
  260, 1,
  284, 3,
  267, 1,
  267, 1,
  286, 3,
  283, 3,
  287, 2,
  287, 1,
  285, 3,
  288, 2,
  288, 1,
  264, 1,
  264, 1,
  271, 1,
  271, 1,
  258, 1,
  258, 1,
  187, 1,
  187, 1,
  184, 1,
  184, 1,
  289, 1,
  289, 1,
  289, 1,
  289, 1,
  289, 1,
  289, 1,
  183, 2,
  183, 1,
  292, 3,
  292, 2,
  291, 2,
  291, 1,
  294, 3,
  294, 2,
  293, 2,
  293, 1,
  296, 2,
  296, 2,
  296, 2,
  296, 2,
  296, 2,
  296, 2,
  296, 2,
  296, 3,
  295, 2,
  295, 1,
  298, 3,
  298, 3,
  298, 2,
  298, 2,
  298, 3,
  298, 3,
  298, 2,
  298, 2,
  298, 1,
  298, 1,
  298, 2,
  298, 2,
  300, 3,
  300, 3,
  300, 2,
  300, 2,
  297, 2,
  297, 1,
  302, 2,
  302, 2,
  302, 2,
  302, 1,
  303, 3,
  303, 1,
  303, 1,
  303, 1,
  303, 1,
  303, 1,
  303, 1,
  303, 1,
  195, 1,
  195, 1,
  195, 1,
  195, 1,
  195, 4,
  195, 4,
  195, 6,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 2,
  195, 2,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 2,
  195, 1,
  195, 4,
  195, 1,
  195, 4,
  195, 4,
  195, 4,
  195, 6,
  195, 6,
  195, 6,
  195, 6,
  195, 6,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 2,
  195, 2,
  195, 2,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 2,
  195, 8,
  195, 6,
  195, 6,
  195, 6,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  195, 4,
  305, 8,
  305, 6,
  308, 8,
  308, 6,
  309, 10,
  309, 8,
  306, 2,
  307, 3,
  304, 5,
  304, 5,
  304, 4,
  304, 4,
  304, 5,
  304, 5,
  304, 5,
  304, 5,
  304, 5,
  304, 4,
  304, 4,
  304, 4,
  304, 4,
  304, 4,
  304, 9,
  304, 5,
  304, 8,
  304, 4,
  251, 2,
  251, 3,
  251, 1,
  252, 1,
  252, 1,
  252, 1,
  311, 1,
  311, 1,
  311, 1,
  299, 1,
  299, 1,
  299, 1,
  301, 1,
  301, 1,
  301, 1,
  253, 1,
  253, 1,
  310, 1,
  310, 1,
  310, 1,
  310, 1,
  188, 1,
  188, 1,
  312, 1,
  312, 1,
  290, 1,
  290, 1,
  );

  private function yy_reduce($yyruleno)
  {
    $yygoto = 0;              /* The next state */
    $yyact = 0;               /* The next action */
    $yygotominor = null;      /* The LHS of the rule reduced */
    $yymsp = null;            /* The top of the parser's stack */
    $yysize = 0;              /* Amount to pop the stack */

    $yymsp = $this->yystack[$this->yyidx];

    if ($this->yyTraceFILE && isset(self::$yyRuleName[$yyruleno]))
      fprintf($this->yyTraceFILE, "%sReduce [%s].\n", $this->yyTracePrompt, self::$yyRuleName[$yyruleno]);

    switch($yyruleno)
    {
      case 0: /* start ::= query */
      case 1: /* start ::= update */
#line 147 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $this->main->root = $this->yystack[$this->yyidx + 0]->minor; }
#line 4086 "resource/ASPPisParser.php"
        break;
      case 2: /* start ::= */
#line 149 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $this->main->root = $yygotominor;}
#line 4091 "resource/ASPPisParser.php"
        break;
      case 3: /* query ::= prologue selectQuery valuesClause */
      case 4: /* query ::= prologue constructQuery valuesClause */
      case 5: /* query ::= prologue describeQuery valuesClause */
      case 6: /* query ::= prologue askQuery valuesClause */
#line 151 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 500; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4099 "resource/ASPPisParser.php"
        break;
      case 7: /* query ::= selectQuery valuesClause */
      case 8: /* query ::= constructQuery valuesClause */
      case 9: /* query ::= describeQuery valuesClause */
      case 10: /* query ::= askQuery valuesClause */
      case 11: /* query ::= prologue selectQuery */
      case 12: /* query ::= prologue constructQuery */
      case 13: /* query ::= prologue describeQuery */
      case 14: /* query ::= prologue askQuery */
#line 155 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 500; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4111 "resource/ASPPisParser.php"
        break;
      case 15: /* query ::= selectQuery */
      case 16: /* query ::= constructQuery */
      case 17: /* query ::= describeQuery */
      case 18: /* query ::= askQuery */
#line 163 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor;  $yygotominor->type = 500; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4119 "resource/ASPPisParser.php"
        break;
      case 19: /* prologue ::= prefixDeclX baseDecl prefixDeclX */
#line 168 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4124 "resource/ASPPisParser.php"
        break;
      case 20: /* prologue ::= baseDecl prefixDeclX */
      case 21: /* prologue ::= prefixDeclX baseDecl */
#line 169 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4130 "resource/ASPPisParser.php"
        break;
      case 22: /* prologue ::= baseDecl */
      case 23: /* prologue ::= prefixDeclX */
#line 171 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 501; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4136 "resource/ASPPisParser.php"
        break;
      case 24: /* prefixDeclX ::= prefixDeclX prefixDecl */
#line 173 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 502; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4141 "resource/ASPPisParser.php"
        break;
      case 25: /* prefixDeclX ::= prefixDecl */
#line 174 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 502; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4146 "resource/ASPPisParser.php"
        break;
      case 26: /* baseDecl ::= BASE IRIREF DOT */
#line 176 "resource/ASPPisParser.y"
{ $this->base = $this->yystack[$this->yyidx + -1]->minor->value; $yygotominor = new NTToken(); $yygotominor->type = 503; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -2]->minor->value) . ' ' . $this->yystack[$this->yyidx + -1]->minor->value . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4151 "resource/ASPPisParser.php"
        break;
      case 27: /* baseDecl ::= BASE IRIREF */
#line 177 "resource/ASPPisParser.y"
{ $this->base = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor = new NTToken(); $yygotominor->type = 503; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -1]->minor->value) . ' ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4156 "resource/ASPPisParser.php"
        break;
      case 28: /* prefixDecl ::= PREFIX PNAME_NS IRIREF DOT */
#line 179 "resource/ASPPisParser.y"
{ $this->addNS($this->yystack[$this->yyidx + -2]->minor->value, $this->yystack[$this->yyidx + -1]->minor->value); $yygotominor = new NTToken(); $yygotominor->type = 504; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -3]->minor->value) . ' ' . $this->yystack[$this->yyidx + -2]->minor->value . $this->yystack[$this->yyidx + -1]->minor->value . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4161 "resource/ASPPisParser.php"
        break;
      case 29: /* prefixDecl ::= PREFIX PNAME_NS IRIREF */
#line 180 "resource/ASPPisParser.y"
{ $this->addNS($this->yystack[$this->yyidx + -1]->minor->value, $this->yystack[$this->yyidx + 0]->minor->value); $yygotominor = new NTToken(); $yygotominor->type = 504; $yygotominor->query = strtoupper($this->yystack[$this->yyidx + -2]->minor->value) . ' ' . $this->yystack[$this->yyidx + -1]->minor->value . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4166 "resource/ASPPisParser.php"
        break;
      case 30: /* selectQuery ::= selectClause datasetClauseX whereclause solutionModifier */
#line 182 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4171 "resource/ASPPisParser.php"
        break;
      case 31: /* selectQuery ::= selectClause datasetClauseX whereclause */
#line 183 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4176 "resource/ASPPisParser.php"
        break;
      case 32: /* selectQuery ::= selectClause whereclause solutionModifier */
#line 184 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4181 "resource/ASPPisParser.php"
        break;
      case 33: /* selectQuery ::= selectClause whereclause */
#line 185 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 505; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4186 "resource/ASPPisParser.php"
        break;
      case 34: /* datasetClauseX ::= datasetClauseX datasetClause */
#line 186 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 506; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4191 "resource/ASPPisParser.php"
        break;
      case 35: /* datasetClauseX ::= datasetClause */
#line 187 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor;  $yygotominor->type = 506;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4196 "resource/ASPPisParser.php"
        break;
      case 36: /* subSelect ::= selectClause whereclause solutionModifier valuesClause */
#line 190 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -3]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); if(!$this->yystack[$this->yyidx + -3]->minor->hasStar) {$yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -3]->minor->vars;} else {$yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars;} $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4201 "resource/ASPPisParser.php"
        break;
      case 37: /* subSelect ::= selectClause whereclause valuesClause */
      case 38: /* subSelect ::= selectClause whereclause solutionModifier */
#line 191 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); if(!$this->yystack[$this->yyidx + -2]->minor->hasStar) {$yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -2]->minor->vars;} else {$yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars;} $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4207 "resource/ASPPisParser.php"
        break;
      case 39: /* subSelect ::= selectClause whereclause */
#line 193 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + 0]->minor->ssVars); if(isset($tmp)){ throw new Exception('Error, Variable already bound: ' . $tmp, -1);} $yygotominor = new NTToken(); $yygotominor->type = 507; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); if(!$this->yystack[$this->yyidx + -1]->minor->hasStar) {$yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -1]->minor->vars;} else {$yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars =  $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars;} $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4212 "resource/ASPPisParser.php"
        break;
      case 40: /* selectClause ::= SELECT DISTINCT selectClauseX */
#line 195 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->vars =  $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SELECT DISTINCT' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4217 "resource/ASPPisParser.php"
        break;
      case 41: /* selectClause ::= SELECT REDUCED selectClauseX */
#line 196 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->vars =  $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SELECT REDUCED' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4222 "resource/ASPPisParser.php"
        break;
      case 42: /* selectClause ::= SELECT DISTINCT STAR */
#line 197 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->hasStar = true; $yygotominor->query = 'SELECT DISTINCT *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4227 "resource/ASPPisParser.php"
        break;
      case 43: /* selectClause ::= SELECT REDUCED STAR */
#line 198 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->hasStar = true; $yygotominor->query = 'SELECT REDUCED *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4232 "resource/ASPPisParser.php"
        break;
      case 44: /* selectClause ::= SELECT selectClauseX */
#line 199 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 508; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SELECT ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4237 "resource/ASPPisParser.php"
        break;
      case 45: /* selectClause ::= SELECT STAR */
#line 200 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 508; $yygotominor->hasStar = true; $yygotominor->query = 'SELECT *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4242 "resource/ASPPisParser.php"
        break;
      case 46: /* selectClauseX ::= selectClauseX LPARENTHESE expression AS var RPARENTHESE */
#line 201 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -5]->minor->ssVars + $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -5]->minor->query . '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4247 "resource/ASPPisParser.php"
        break;
      case 47: /* selectClauseX ::= selectClauseX var */
#line 202 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4252 "resource/ASPPisParser.php"
        break;
      case 48: /* selectClauseX ::= LPARENTHESE expression AS var RPARENTHESE */
#line 203 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 509; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4257 "resource/ASPPisParser.php"
        break;
      case 49: /* selectClauseX ::= var */
#line 204 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 509; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4262 "resource/ASPPisParser.php"
        break;
      case 50: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause solutionModifier */
#line 206 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -4]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . '{' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4267 "resource/ASPPisParser.php"
        break;
      case 51: /* constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause solutionModifier */
#line 207 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4272 "resource/ASPPisParser.php"
        break;
      case 52: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE solutionModifier */
#line 208 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -5]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . '{' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4277 "resource/ASPPisParser.php"
        break;
      case 53: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE solutionModifier */
#line 209 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . ' WHERE' . PHP_EOL . '{ }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4282 "resource/ASPPisParser.php"
        break;
      case 54: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause solutionModifier */
#line 210 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4287 "resource/ASPPisParser.php"
        break;
      case 55: /* constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause solutionModifier */
#line 211 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4292 "resource/ASPPisParser.php"
        break;
      case 56: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE whereclause */
#line 212 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4297 "resource/ASPPisParser.php"
        break;
      case 57: /* constructQuery ::= CONSTRUCT LBRACE RBRACE whereclause */
#line 213 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4302 "resource/ASPPisParser.php"
        break;
      case 58: /* constructQuery ::= CONSTRUCT LBRACE triplesTemplate RBRACE datasetClauseX whereclause */
#line 214 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT {' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '}' . PHP_EOL. $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4307 "resource/ASPPisParser.php"
        break;
      case 59: /* constructQuery ::= CONSTRUCT LBRACE RBRACE datasetClauseX whereclause */
#line 215 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT { }' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4312 "resource/ASPPisParser.php"
        break;
      case 60: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE triplesTemplate RBRACE */
#line 216 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . 'WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '}'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4317 "resource/ASPPisParser.php"
        break;
      case 61: /* constructQuery ::= CONSTRUCT datasetClauseX WHERE LBRACE RBRACE */
#line 217 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -3]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT' . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . 'WHERE { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4322 "resource/ASPPisParser.php"
        break;
      case 62: /* constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE solutionModifier */
#line 218 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONSTRUCT WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . '}' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4327 "resource/ASPPisParser.php"
        break;
      case 63: /* constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE solutionModifier */
#line 219 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE { }' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4332 "resource/ASPPisParser.php"
        break;
      case 64: /* constructQuery ::= CONSTRUCT WHERE LBRACE triplesTemplate RBRACE */
#line 220 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '}'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4337 "resource/ASPPisParser.php"
        break;
      case 65: /* constructQuery ::= CONSTRUCT WHERE LBRACE RBRACE */
#line 221 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 510; $yygotominor->query = 'CONSTRUCT WHERE { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4342 "resource/ASPPisParser.php"
        break;
      case 66: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause solutionModifier */
#line 223 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4347 "resource/ASPPisParser.php"
        break;
      case 67: /* describeQuery ::= DESCRIBE varOrIriX whereclause solutionModifier */
#line 224 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4352 "resource/ASPPisParser.php"
        break;
      case 68: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX solutionModifier */
      case 69: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX whereclause */
#line 225 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4358 "resource/ASPPisParser.php"
        break;
      case 70: /* describeQuery ::= DESCRIBE varOrIriX solutionModifier */
      case 71: /* describeQuery ::= DESCRIBE varOrIriX whereclause */
#line 227 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4364 "resource/ASPPisParser.php"
        break;
      case 72: /* describeQuery ::= DESCRIBE varOrIriX datasetClauseX */
#line 229 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4369 "resource/ASPPisParser.php"
        break;
      case 73: /* describeQuery ::= DESCRIBE varOrIriX */
#line 230 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4374 "resource/ASPPisParser.php"
        break;
      case 74: /* describeQuery ::= DESCRIBE STAR datasetClauseX whereclause solutionModifier */
#line 231 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4379 "resource/ASPPisParser.php"
        break;
      case 75: /* describeQuery ::= DESCRIBE STAR whereclause solutionModifier */
      case 77: /* describeQuery ::= DESCRIBE STAR datasetClauseX whereclause */
#line 232 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4385 "resource/ASPPisParser.php"
        break;
      case 76: /* describeQuery ::= DESCRIBE STAR datasetClauseX solutionModifier */
#line 233 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4390 "resource/ASPPisParser.php"
        break;
      case 78: /* describeQuery ::= DESCRIBE STAR solutionModifier */
      case 79: /* describeQuery ::= DESCRIBE STAR whereclause */
      case 80: /* describeQuery ::= DESCRIBE STAR datasetClauseX */
#line 235 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE *' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4397 "resource/ASPPisParser.php"
        break;
      case 81: /* describeQuery ::= DESCRIBE STAR */
#line 238 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 511; $yygotominor->query = 'DESCRIBE *'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4402 "resource/ASPPisParser.php"
        break;
      case 82: /* varOrIriX ::= varOrIriX varOrIri */
#line 239 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 512; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4407 "resource/ASPPisParser.php"
        break;
      case 83: /* varOrIriX ::= varOrIri */
#line 240 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 512; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4412 "resource/ASPPisParser.php"
        break;
      case 84: /* askQuery ::= ASK datasetClauseX whereclause solutionModifier */
#line 242 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4417 "resource/ASPPisParser.php"
        break;
      case 85: /* askQuery ::= ASK datasetClauseX whereclause */
#line 243 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4422 "resource/ASPPisParser.php"
        break;
      case 86: /* askQuery ::= ASK whereclause solutionModifier */
#line 244 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 513; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ASK' . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4427 "resource/ASPPisParser.php"
        break;
      case 87: /* askQuery ::= ASK whereclause */
#line 245 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 513; $yygotominor->query = 'ASK ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4432 "resource/ASPPisParser.php"
        break;
      case 88: /* datasetClause ::= FROM NAMED iri */
#line 247 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 514; $yygotominor->query = 'FROM NAMED ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4437 "resource/ASPPisParser.php"
        break;
      case 89: /* datasetClause ::= FROM iri */
#line 248 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 514; $yygotominor->query = 'FROM ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4442 "resource/ASPPisParser.php"
        break;
      case 90: /* whereclause ::= WHERE groupGraphPattern */
#line 250 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 515; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->query = 'WHERE ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4447 "resource/ASPPisParser.php"
        break;
      case 91: /* whereclause ::= groupGraphPattern */
#line 251 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 515; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4452 "resource/ASPPisParser.php"
        break;
      case 92: /* solutionModifier ::= groupClause havingClause orderClause limitOffsetClauses */
#line 253 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4457 "resource/ASPPisParser.php"
        break;
      case 93: /* solutionModifier ::= havingClause orderClause limitOffsetClauses */
#line 254 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4462 "resource/ASPPisParser.php"
        break;
      case 94: /* solutionModifier ::= groupClause orderClause limitOffsetClauses */
      case 95: /* solutionModifier ::= groupClause havingClause limitOffsetClauses */
#line 255 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4468 "resource/ASPPisParser.php"
        break;
      case 96: /* solutionModifier ::= groupClause havingClause orderClause */
#line 257 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor); }
#line 4473 "resource/ASPPisParser.php"
        break;
      case 97: /* solutionModifier ::= groupClause havingClause */
      case 98: /* solutionModifier ::= groupClause orderClause */
      case 99: /* solutionModifier ::= groupClause limitOffsetClauses */
#line 258 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4480 "resource/ASPPisParser.php"
        break;
      case 100: /* solutionModifier ::= orderClause limitOffsetClauses */
      case 101: /* solutionModifier ::= havingClause limitOffsetClauses */
      case 102: /* solutionModifier ::= havingClause orderClause */
#line 261 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 516; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4487 "resource/ASPPisParser.php"
        break;
      case 103: /* solutionModifier ::= groupClause */
      case 104: /* solutionModifier ::= havingClause */
      case 105: /* solutionModifier ::= orderClause */
      case 106: /* solutionModifier ::= limitOffsetClauses */
#line 264 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 516; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4495 "resource/ASPPisParser.php"
        break;
      case 107: /* groupClause ::= GROUP BY groupConditionX */
#line 269 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 517; $yygotominor->query = 'GROUP BY ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4500 "resource/ASPPisParser.php"
        break;
      case 108: /* groupConditionX ::= groupConditionX LPARENTHESE expression AS var RPARENTHESE */
#line 270 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -5]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -5]->minor->query . ' (' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4505 "resource/ASPPisParser.php"
        break;
      case 109: /* groupConditionX ::= groupConditionX builtInCall */
      case 112: /* groupConditionX ::= groupConditionX var */
#line 271 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4511 "resource/ASPPisParser.php"
        break;
      case 110: /* groupConditionX ::= groupConditionX functionCall */
#line 272 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->hasFNC = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4516 "resource/ASPPisParser.php"
        break;
      case 111: /* groupConditionX ::= groupConditionX LPARENTHESE expression RPARENTHESE */
#line 273 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4521 "resource/ASPPisParser.php"
        break;
      case 113: /* groupConditionX ::= LPARENTHESE expression AS var RPARENTHESE */
#line 275 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 518; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4526 "resource/ASPPisParser.php"
        break;
      case 114: /* groupConditionX ::= builtInCall */
      case 117: /* groupConditionX ::= var */
#line 276 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 518; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4532 "resource/ASPPisParser.php"
        break;
      case 115: /* groupConditionX ::= functionCall */
#line 277 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 518; $yygotominor->hasFNC = true; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4537 "resource/ASPPisParser.php"
        break;
      case 116: /* groupConditionX ::= LPARENTHESE expression RPARENTHESE */
#line 278 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 518; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4542 "resource/ASPPisParser.php"
        break;
      case 118: /* havingClause ::= HAVING constraintX */
#line 281 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 519; $yygotominor->query = 'HAVING ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4547 "resource/ASPPisParser.php"
        break;
      case 119: /* constraintX ::= constraintX LPARENTHESE expression RPARENTHESE */
#line 282 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' (' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4552 "resource/ASPPisParser.php"
        break;
      case 120: /* constraintX ::= constraintX builtInCall */
#line 283 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4557 "resource/ASPPisParser.php"
        break;
      case 121: /* constraintX ::= constraintX functionCall */
#line 284 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 520; $yygotominor->hasFNC = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4562 "resource/ASPPisParser.php"
        break;
      case 122: /* constraintX ::= LPARENTHESE expression RPARENTHESE */
#line 285 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 520; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4567 "resource/ASPPisParser.php"
        break;
      case 123: /* constraintX ::= builtInCall */
#line 286 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 520; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4572 "resource/ASPPisParser.php"
        break;
      case 124: /* constraintX ::= functionCall */
#line 287 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 520; $yygotominor->hasFNC = true;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4577 "resource/ASPPisParser.php"
        break;
      case 125: /* orderClause ::= ORDER BY orderConditionX */
#line 289 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 521; $yygotominor->query = 'ORDER BY ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4582 "resource/ASPPisParser.php"
        break;
      case 126: /* orderConditionX ::= orderConditionX orderCondition */
#line 290 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 522; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4587 "resource/ASPPisParser.php"
        break;
      case 127: /* orderConditionX ::= orderCondition */
#line 291 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 522; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4592 "resource/ASPPisParser.php"
        break;
      case 128: /* orderCondition ::= ASC LPARENTHESE expression RPARENTHESE */
#line 293 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = 'ASC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4597 "resource/ASPPisParser.php"
        break;
      case 129: /* orderCondition ::= DESC LPARENTHESE expression RPARENTHESE */
#line 294 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = 'DESC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4602 "resource/ASPPisParser.php"
        break;
      case 130: /* orderCondition ::= LPARENTHESE expression RPARENTHESE */
#line 295 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 523; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';$yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4607 "resource/ASPPisParser.php"
        break;
      case 131: /* orderCondition ::= builtInCall */
      case 132: /* orderCondition ::= functionCall */
      case 133: /* orderCondition ::= var */
#line 296 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 523; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4614 "resource/ASPPisParser.php"
        break;
      case 134: /* limitOffsetClauses ::= limitClause offsetClause */
      case 135: /* limitOffsetClauses ::= offsetClause limitClause */
#line 300 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 524; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4620 "resource/ASPPisParser.php"
        break;
      case 136: /* limitOffsetClauses ::= limitClause */
      case 137: /* limitOffsetClauses ::= offsetClause */
#line 302 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 524; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4626 "resource/ASPPisParser.php"
        break;
      case 138: /* limitClause ::= LIMIT INTEGER */
#line 305 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 525; $yygotominor->query = 'LIMIT ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4631 "resource/ASPPisParser.php"
        break;
      case 139: /* offsetClause ::= OFFSET INTEGER */
#line 307 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 526; $yygotominor->query = 'OFFSET ' . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4636 "resource/ASPPisParser.php"
        break;
      case 140: /* valuesClause ::= VALUES dataBlock */
#line 309 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 527; $yygotominor->query = 'VALUES ' . $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4641 "resource/ASPPisParser.php"
        break;
      case 141: /* update ::= prologue update1 updateX SEMICOLON */
#line 311 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ;'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4646 "resource/ASPPisParser.php"
        break;
      case 142: /* update ::= prologue update1 updateX */
#line 312 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4651 "resource/ASPPisParser.php"
        break;
      case 143: /* update ::= update1 updateX SEMICOLON */
#line 313 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ;'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4656 "resource/ASPPisParser.php"
        break;
      case 144: /* update ::= update1 updateX */
#line 314 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4661 "resource/ASPPisParser.php"
        break;
      case 145: /* update ::= prologue update1 SEMICOLON */
#line 315 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' ;'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4666 "resource/ASPPisParser.php"
        break;
      case 146: /* update ::= prologue update1 */
#line 316 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 528; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4671 "resource/ASPPisParser.php"
        break;
      case 147: /* update ::= update1 SEMICOLON */
#line 317 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 528; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ;'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4676 "resource/ASPPisParser.php"
        break;
      case 148: /* update ::= update1 */
      case 149: /* update ::= prologue */
#line 318 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 528; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4682 "resource/ASPPisParser.php"
        break;
      case 150: /* updateX ::= updateX SEMICOLON prologue update1 */
#line 320 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' ;' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4687 "resource/ASPPisParser.php"
        break;
      case 151: /* updateX ::= updateX SEMICOLON update1 */
#line 321 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ;' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4692 "resource/ASPPisParser.php"
        break;
      case 152: /* updateX ::= SEMICOLON prologue update1 */
#line 322 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 529; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ';' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4697 "resource/ASPPisParser.php"
        break;
      case 153: /* updateX ::= SEMICOLON update1 */
#line 323 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 529; $yygotominor->query = ';' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4702 "resource/ASPPisParser.php"
        break;
      case 154: /* update1 ::= load */
      case 155: /* update1 ::= clear */
      case 156: /* update1 ::= drop */
      case 157: /* update1 ::= add */
      case 158: /* update1 ::= move */
      case 159: /* update1 ::= copy */
      case 160: /* update1 ::= create */
      case 161: /* update1 ::= insertData */
      case 162: /* update1 ::= deleteData */
      case 163: /* update1 ::= deletewhere */
      case 164: /* update1 ::= modify */
#line 325 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 530; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4717 "resource/ASPPisParser.php"
        break;
      case 165: /* load ::= LOAD SILENT iri INTO graphRef */
#line 337 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 531; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'LOAD SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' INTO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4722 "resource/ASPPisParser.php"
        break;
      case 166: /* load ::= LOAD iri INTO graphRef */
#line 338 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 531; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'LOAD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' INTO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4727 "resource/ASPPisParser.php"
        break;
      case 167: /* load ::= LOAD SILENT iri */
#line 339 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 531; $yygotominor->query = 'LOAD SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4732 "resource/ASPPisParser.php"
        break;
      case 168: /* load ::= LOAD iri */
#line 340 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 531; $yygotominor->query = 'LOAD ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4737 "resource/ASPPisParser.php"
        break;
      case 169: /* clear ::= CLEAR SILENT graphRefAll */
#line 342 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 532; $yygotominor->query = 'CLEAR SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4742 "resource/ASPPisParser.php"
        break;
      case 170: /* clear ::= CLEAR graphRefAll */
#line 343 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 532; $yygotominor->query = 'CLEAR ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4747 "resource/ASPPisParser.php"
        break;
      case 171: /* drop ::= DROP SILENT graphRefAll */
#line 345 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 533; $yygotominor->query = 'DROP SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4752 "resource/ASPPisParser.php"
        break;
      case 172: /* drop ::= DROP graphRefAll */
#line 346 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 533; $yygotominor->query = 'DROP ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4757 "resource/ASPPisParser.php"
        break;
      case 173: /* create ::= CREATE SILENT graphRef */
#line 348 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 534; $yygotominor->query = 'CREATE SILENT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4762 "resource/ASPPisParser.php"
        break;
      case 174: /* create ::= CREATE graphRef */
#line 349 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 534; $yygotominor->query = 'CREATE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4767 "resource/ASPPisParser.php"
        break;
      case 175: /* add ::= ADD SILENT graphOrDefault TO graphOrDefault */
#line 351 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 535; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ADD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4772 "resource/ASPPisParser.php"
        break;
      case 176: /* add ::= ADD graphOrDefault TO graphOrDefault */
#line 352 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 535; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'ADD ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4777 "resource/ASPPisParser.php"
        break;
      case 177: /* move ::= MOVE SILENT graphOrDefault TO graphOrDefault */
#line 354 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 536; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MOVE SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4782 "resource/ASPPisParser.php"
        break;
      case 178: /* move ::= MOVE graphOrDefault TO graphOrDefault */
#line 355 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 536; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MOVE ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4787 "resource/ASPPisParser.php"
        break;
      case 179: /* copy ::= COPY SILENT graphOrDefault TO graphOrDefault */
#line 357 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 537; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COPY SILENT ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4792 "resource/ASPPisParser.php"
        break;
      case 180: /* copy ::= COPY graphOrDefault TO graphOrDefault */
#line 358 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 537; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COPY ' . $this->yystack[$this->yyidx + -2]->minor->query . ' TO ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4797 "resource/ASPPisParser.php"
        break;
      case 181: /* insertData ::= INSERTDATA quadData */
#line 360 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 538; $yygotominor->query = 'DELETE DATA ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4802 "resource/ASPPisParser.php"
        break;
      case 182: /* deleteData ::= DELETEDATA quadData */
#line 362 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){ throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE DATA" . $this->yystack[$this->yyidx + 0]->minor->query); } $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 539; $yygotominor->query = 'DELETE DATA ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4807 "resource/ASPPisParser.php"
        break;
      case 183: /* deletewhere ::= DELETEWHERE quadPattern */
#line 364 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE WHERE" . $this->yystack[$this->yyidx + 0]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 540; $yygotominor->query = 'DELETE WHERE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4812 "resource/ASPPisParser.php"
        break;
      case 184: /* modify ::= WITH iri deleteClause insertClause usingClauseX WHERE groupGraphPattern */
#line 366 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -5]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4817 "resource/ASPPisParser.php"
        break;
      case 185: /* modify ::= WITH iri deleteClause usingClauseX WHERE groupGraphPattern */
#line 367 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars  + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4822 "resource/ASPPisParser.php"
        break;
      case 186: /* modify ::= WITH iri insertClause usingClauseX WHERE groupGraphPattern */
      case 187: /* modify ::= WITH iri deleteClause insertClause WHERE groupGraphPattern */
#line 368 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4828 "resource/ASPPisParser.php"
        break;
      case 188: /* modify ::= WITH iri deleteClause WHERE groupGraphPattern */
      case 189: /* modify ::= WITH iri insertClause WHERE groupGraphPattern */
#line 370 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'WITH ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4834 "resource/ASPPisParser.php"
        break;
      case 190: /* modify ::= deleteClause insertClause usingClauseX WHERE groupGraphPattern */
#line 372 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -4]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -4]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -4]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4839 "resource/ASPPisParser.php"
        break;
      case 191: /* modify ::= deleteClause usingClauseX WHERE groupGraphPattern */
      case 192: /* modify ::= insertClause usingClauseX WHERE groupGraphPattern */
      case 193: /* modify ::= deleteClause insertClause WHERE groupGraphPattern */
#line 373 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4846 "resource/ASPPisParser.php"
        break;
      case 194: /* modify ::= deleteClause WHERE groupGraphPattern */
      case 195: /* modify ::= insertClause WHERE groupGraphPattern */
#line 376 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 541; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . 'WHERE' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4852 "resource/ASPPisParser.php"
        break;
      case 196: /* usingClauseX ::= usingClauseX usingClause */
#line 378 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 542; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4857 "resource/ASPPisParser.php"
        break;
      case 197: /* usingClauseX ::= usingClause */
#line 379 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 542; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4862 "resource/ASPPisParser.php"
        break;
      case 198: /* deleteClause ::= DELETE quadPattern */
#line 381 "resource/ASPPisParser.y"
{ if($this->yystack[$this->yyidx + 0]->minor->hasBN){throw new Exception("Deleteclause is not allowed to contain Blanknodesyntax: DELETE" . $this->yystack[$this->yyidx + 0]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 543; $yygotominor->query = 'DELETE ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4867 "resource/ASPPisParser.php"
        break;
      case 199: /* insertClause ::= INSERT quadPattern */
#line 383 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 544; $yygotominor->query = 'INSERT ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4872 "resource/ASPPisParser.php"
        break;
      case 200: /* usingClause ::= USING NAMED iri */
#line 385 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 545; $yygotominor->query = 'USING NAMED ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4877 "resource/ASPPisParser.php"
        break;
      case 201: /* usingClause ::= USING iri */
#line 386 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 545; $yygotominor->query = 'USING ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4882 "resource/ASPPisParser.php"
        break;
      case 202: /* graphOrDefault ::= GRAPH iri */
#line 388 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 546; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4887 "resource/ASPPisParser.php"
        break;
      case 203: /* graphOrDefault ::= DEFAULT */
#line 389 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 546; $yygotominor->query = 'DEFAULT';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4892 "resource/ASPPisParser.php"
        break;
      case 204: /* graphOrDefault ::= iri */
#line 390 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 546;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4897 "resource/ASPPisParser.php"
        break;
      case 205: /* graphRef ::= GRAPH iri */
#line 392 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 547; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4902 "resource/ASPPisParser.php"
        break;
      case 206: /* graphRefAll ::= graphRef */
#line 394 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 548; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4907 "resource/ASPPisParser.php"
        break;
      case 207: /* graphRefAll ::= DEFAULT */
#line 395 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'DEFAULT';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4912 "resource/ASPPisParser.php"
        break;
      case 208: /* graphRefAll ::= NAMED */
#line 396 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'NAMED';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4917 "resource/ASPPisParser.php"
        break;
      case 209: /* graphRefAll ::= ALL */
#line 397 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 548; $yygotominor->query = 'ALL';$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4922 "resource/ASPPisParser.php"
        break;
      case 210: /* quadPattern ::= LBRACE quads RBRACE */
#line 399 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 549; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4927 "resource/ASPPisParser.php"
        break;
      case 211: /* quadPattern ::= LBRACE RBRACE */
#line 400 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 549; $yygotominor->query = '{ }';$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4932 "resource/ASPPisParser.php"
        break;
      case 212: /* quadData ::= LBRACE quads RBRACE */
#line 402 "resource/ASPPisParser.y"
{ if(!empty($this->yystack[$this->yyidx + -1]->minor->vars)){throw new Exception("QuadPattern arent allowed to contain variables: " . $this->yystack[$this->yyidx + -1]->minor->query);} $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 550; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4937 "resource/ASPPisParser.php"
        break;
      case 213: /* quadData ::= LBRACE RBRACE */
#line 403 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 550; $yygotominor->query = '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4942 "resource/ASPPisParser.php"
        break;
      case 214: /* quads ::= triplesTemplate quadsX */
#line 405 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 551; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4947 "resource/ASPPisParser.php"
        break;
      case 215: /* quads ::= triplesTemplate */
      case 216: /* quads ::= quadsX */
#line 406 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 551; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4953 "resource/ASPPisParser.php"
        break;
      case 217: /* quadsX ::= quadsX quadsNotTriples DOT triplesTemplate */
#line 408 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4958 "resource/ASPPisParser.php"
        break;
      case 218: /* quadsX ::= quadsX quadsNotTriples triplesTemplate */
#line 409 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4963 "resource/ASPPisParser.php"
        break;
      case 219: /* quadsX ::= quadsX quadsNotTriples DOT */
#line 410 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4968 "resource/ASPPisParser.php"
        break;
      case 220: /* quadsX ::= quadsX quadsNotTriples */
      case 222: /* quadsX ::= quadsNotTriples triplesTemplate */
#line 411 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4974 "resource/ASPPisParser.php"
        break;
      case 221: /* quadsX ::= quadsNotTriples DOT triplesTemplate */
#line 412 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 552; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4979 "resource/ASPPisParser.php"
        break;
      case 223: /* quadsX ::= quadsNotTriples DOT */
#line 414 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 552; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .';$yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4984 "resource/ASPPisParser.php"
        break;
      case 224: /* quadsX ::= quadsNotTriples */
#line 415 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 552; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 4989 "resource/ASPPisParser.php"
        break;
      case 225: /* quadsNotTriples ::= GRAPH varOrIri LBRACE triplesTemplate RBRACE */
#line 417 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 553; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . ' { ' .  PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4994 "resource/ASPPisParser.php"
        break;
      case 226: /* quadsNotTriples ::= GRAPH varOrIri LBRACE RBRACE */
#line 418 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 553; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -2]->minor->query . ' { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 4999 "resource/ASPPisParser.php"
        break;
      case 227: /* triplesTemplate ::= triplesSameSubject DOT triplesTemplateX DOT */
#line 420 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5004 "resource/ASPPisParser.php"
        break;
      case 228: /* triplesTemplate ::= triplesSameSubject DOT triplesTemplateX */
#line 421 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5009 "resource/ASPPisParser.php"
        break;
      case 229: /* triplesTemplate ::= triplesSameSubject DOT */
#line 422 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5014 "resource/ASPPisParser.php"
        break;
      case 230: /* triplesTemplate ::= triplesSameSubject */
#line 423 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 554; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5019 "resource/ASPPisParser.php"
        break;
      case 231: /* triplesTemplateX ::= triplesTemplateX DOT triplesSameSubject */
#line 424 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 555; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5024 "resource/ASPPisParser.php"
        break;
      case 232: /* triplesTemplateX ::= triplesSameSubject */
#line 425 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 555; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5029 "resource/ASPPisParser.php"
        break;
      case 233: /* groupGraphPattern ::= LBRACE groupGraphPatternSub RBRACE */
      case 234: /* groupGraphPattern ::= LBRACE subSelect RBRACE */
#line 427 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 556; $yygotominor->bindVar = array(); $yygotominor->ssVars = array(); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->gGPssVars; $yygotominor->query = '{ ' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5035 "resource/ASPPisParser.php"
        break;
      case 235: /* groupGraphPattern ::= LBRACE RBRACE */
#line 429 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 556; $yygotominor->query = '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5040 "resource/ASPPisParser.php"
        break;
      case 236: /* groupGraphPatternSub ::= triplesBlock groupGraphPatternSubX */
#line 431 "resource/ASPPisParser.y"
{ if(!empty($this->yystack[$this->yyidx + 0]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->bindVar, $this->yystack[$this->yyidx + -1]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 557; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5045 "resource/ASPPisParser.php"
        break;
      case 237: /* groupGraphPatternSub ::= triplesBlock */
      case 238: /* groupGraphPatternSub ::= groupGraphPatternSubX */
#line 432 "resource/ASPPisParser.y"
{$yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 557;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5051 "resource/ASPPisParser.php"
        break;
      case 239: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT triplesBlock */
#line 434 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -3]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->ssVars, $this->yystack[$this->yyidx + -3]->minor->gGPssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->gGPssVars, $this->yystack[$this->yyidx + -3]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} if(!empty($this->yystack[$this->yyidx + -2]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -3]->minor->noDuplicates($this->yystack[$this->yyidx + -2]->minor->bindVar, $this->yystack[$this->yyidx + -3]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -3]->minor->ssVars + $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -3]->minor->gGPssVars + $this->yystack[$this->yyidx + -2]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -3]->minor->bindVar + $this->yystack[$this->yyidx + -2]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -2]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5056 "resource/ASPPisParser.php"
        break;
      case 240: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples triplesBlock */
#line 435 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->gGPssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->gGPssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} if(!empty($this->yystack[$this->yyidx + -1]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->bindVar, $this->yystack[$this->yyidx + -2]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -2]->minor->gGPssVars + $this->yystack[$this->yyidx + -1]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -2]->minor->bindVar + $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5061 "resource/ASPPisParser.php"
        break;
      case 241: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples DOT */
#line 436 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->ssVars, $this->yystack[$this->yyidx + -2]->minor->gGPssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->gGPssVars, $this->yystack[$this->yyidx + -2]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} if(!empty($this->yystack[$this->yyidx + -1]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -2]->minor->noDuplicates($this->yystack[$this->yyidx + -1]->minor->bindVar, $this->yystack[$this->yyidx + -2]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -2]->minor->gGPssVars + $this->yystack[$this->yyidx + -1]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -2]->minor->bindVar + $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5066 "resource/ASPPisParser.php"
        break;
      case 242: /* groupGraphPatternSubX ::= groupGraphPatternSubX graphPatternNotTriples */
#line 437 "resource/ASPPisParser.y"
{ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->ssVars, $this->yystack[$this->yyidx + -1]->minor->gGPssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->gGPssVars, $this->yystack[$this->yyidx + -1]->minor->ssVars); if(isset($tmp)){throw new Exception("Variable is already in scope: " . $tmp);} if(!empty($this->yystack[$this->yyidx + 0]->minor->bindVar)){ $tmp = $this->yystack[$this->yyidx + -1]->minor->noDuplicates($this->yystack[$this->yyidx + 0]->minor->bindVar, $this->yystack[$this->yyidx + -1]->minor->vars); if(isset($tmp)){throw new Exception("Bindvariable is already in scope: " . $tmp);}} $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->gGPssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -1]->minor->bindVar + $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5071 "resource/ASPPisParser.php"
        break;
      case 243: /* groupGraphPatternSubX ::= graphPatternNotTriples DOT triplesBlock */
#line 438 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -2]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -2]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5076 "resource/ASPPisParser.php"
        break;
      case 244: /* groupGraphPatternSubX ::= graphPatternNotTriples triplesBlock */
#line 439 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->gGPssVars;  $yygotominor->bindVar = $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5081 "resource/ASPPisParser.php"
        break;
      case 245: /* groupGraphPatternSubX ::= graphPatternNotTriples DOT */
#line 440 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + -1]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5086 "resource/ASPPisParser.php"
        break;
      case 246: /* groupGraphPatternSubX ::= graphPatternNotTriples */
#line 441 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 558; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5091 "resource/ASPPisParser.php"
        break;
      case 247: /* triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX DOT */
#line 443 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5096 "resource/ASPPisParser.php"
        break;
      case 248: /* triplesBlock ::= triplesSameSubjectPath DOT triplesBlockX */
#line 444 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5101 "resource/ASPPisParser.php"
        break;
      case 249: /* triplesBlock ::= triplesSameSubjectPath DOT */
#line 445 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' .'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5106 "resource/ASPPisParser.php"
        break;
      case 250: /* triplesBlock ::= triplesSameSubjectPath */
#line 446 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 559; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5111 "resource/ASPPisParser.php"
        break;
      case 251: /* triplesBlockX ::= triplesBlockX DOT triplesSameSubjectPath */
#line 447 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 560; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' .' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5116 "resource/ASPPisParser.php"
        break;
      case 252: /* triplesBlockX ::= triplesSameSubjectPath */
#line 448 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 560; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5121 "resource/ASPPisParser.php"
        break;
      case 253: /* graphPatternNotTriples ::= groupOrUnionGraphPattern */
      case 254: /* graphPatternNotTriples ::= optionalGraphPattern */
      case 255: /* graphPatternNotTriples ::= minusGraphPattern */
      case 256: /* graphPatternNotTriples ::= graphGraphPattern */
      case 257: /* graphPatternNotTriples ::= serviceGraphPattern */
#line 450 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5130 "resource/ASPPisParser.php"
        break;
      case 258: /* graphPatternNotTriples ::= filter */
#line 455 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5135 "resource/ASPPisParser.php"
        break;
      case 259: /* graphPatternNotTriples ::= bind */
#line 456 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->bindVar = $this->yystack[$this->yyidx + 0]->minor->bindVar; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5140 "resource/ASPPisParser.php"
        break;
      case 260: /* graphPatternNotTriples ::= inlineData */
#line 457 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 561; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5145 "resource/ASPPisParser.php"
        break;
      case 261: /* optionalGraphPattern ::= OPTIONAL groupGraphPattern */
#line 459 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 562; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'OPTIONAL ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5150 "resource/ASPPisParser.php"
        break;
      case 262: /* graphGraphPattern ::= GRAPH varOrIri groupGraphPattern */
#line 461 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 563; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'GRAPH ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5155 "resource/ASPPisParser.php"
        break;
      case 263: /* serviceGraphPattern ::= SERVICE SILENT varOrIri groupGraphPattern */
#line 463 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 564; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SERVICE SILENT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5160 "resource/ASPPisParser.php"
        break;
      case 264: /* serviceGraphPattern ::= SERVICE varOrIri groupGraphPattern */
#line 464 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 564; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'SERVICE ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5165 "resource/ASPPisParser.php"
        break;
      case 265: /* bind ::= BIND LPARENTHESE expression AS var RPARENTHESE */
#line 466 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 565; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->ssVars[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->ssVars += $this->yystack[$this->yyidx + -3]->minor->ssVars; $yygotominor->bindVar[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' AS ' . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5170 "resource/ASPPisParser.php"
        break;
      case 266: /* inlineData ::= VALUES dataBlock */
#line 468 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 566; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5175 "resource/ASPPisParser.php"
        break;
      case 267: /* dataBlock ::= inlineDataOneVar */
      case 268: /* dataBlock ::= inlineDataFull */
#line 470 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 567; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5181 "resource/ASPPisParser.php"
        break;
      case 269: /* inlineDataOneVar ::= var LBRACE dataBlockValueX RBRACE */
#line 473 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 568; $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . ' { ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5186 "resource/ASPPisParser.php"
        break;
      case 270: /* inlineDataOneVar ::= var LBRACE RBRACE */
#line 474 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 568; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '{ }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5191 "resource/ASPPisParser.php"
        break;
      case 271: /* dataBlockValueX ::= dataBlockValueX dataBlockValue */
#line 475 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 569; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count + 1; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5196 "resource/ASPPisParser.php"
        break;
      case 272: /* dataBlockValueX ::= dataBlockValue */
#line 476 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 569; $yygotominor->count = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5201 "resource/ASPPisParser.php"
        break;
      case 273: /* inlineDataFull ::= LPARENTHESE varX RPARENTHESE LBRACE inlineDataFullX RBRACE */
#line 478 "resource/ASPPisParser.y"
{if($this->yystack[$this->yyidx + -1]->minor->count > 0 ){if($this->yystack[$this->yyidx + -4]->minor->count == $this->yystack[$this->yyidx + -1]->minor->count){ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -4]->minor->query . ' ) {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' }';}else{throw new Exception("Different Amount of Variables and Values for Value Clause : " . $this->yystack[$this->yyidx + -4]->minor->query . ' and ' . $this->yystack[$this->yyidx + -1]->minor->query);}}else{$yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->vars = $this->yystack[$this->yyidx + -4]->minor->vars; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -4]->minor->query . ' ) {' . PHP_EOL . $this->yystack[$this->yyidx + -1]->minor->query . ' }';}$yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5206 "resource/ASPPisParser.php"
        break;
      case 274: /* inlineDataFull ::= NIL LBRACE nilX RBRACE */
#line 479 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->query = '( ) { ' . $this->yystack[$this->yyidx + -1]->minor->query . ' }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5211 "resource/ASPPisParser.php"
        break;
      case 275: /* inlineDataFull ::= NIL LBRACE RBRACE */
#line 480 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 570; $yygotominor->query = '( ) { }'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5216 "resource/ASPPisParser.php"
        break;
      case 276: /* nilX ::= nilX NIL */
#line 481 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 571; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5221 "resource/ASPPisParser.php"
        break;
      case 277: /* nilX ::= NIL */
#line 482 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 571; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5226 "resource/ASPPisParser.php"
        break;
      case 278: /* varX ::= varX var */
#line 483 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 572; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count + 1; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5231 "resource/ASPPisParser.php"
        break;
      case 279: /* varX ::= var */
#line 484 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 572; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->count = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5236 "resource/ASPPisParser.php"
        break;
      case 280: /* inlineDataFullX ::= inlineDataFullX LPARENTHESE dataBlockValueX RPARENTHESE */
#line 485 "resource/ASPPisParser.y"
{if($this->yystack[$this->yyidx + -3]->minor->count > 0 ){if($this->yystack[$this->yyidx + -3]->minor->count == $this->yystack[$this->yyidx + -1]->minor->count){ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -3]->minor->count; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';}else{throw new Exception("Different Amount of Values for Value Clause : " . $this->yystack[$this->yyidx + -3]->minor->query . ' and ' . $this->yystack[$this->yyidx + -2]->minor->query);}}else{$yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . PHP_EOL . '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )';}$yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5241 "resource/ASPPisParser.php"
        break;
      case 281: /* inlineDataFullX ::= inlineDataFullX NIL */
#line 486 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5246 "resource/ASPPisParser.php"
        break;
      case 282: /* inlineDataFullX ::= LPARENTHESE dataBlockValueX RPARENTHESE */
#line 487 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->count = $this->yystack[$this->yyidx + -1]->minor->count; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5251 "resource/ASPPisParser.php"
        break;
      case 283: /* inlineDataFullX ::= NIL */
#line 488 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 573; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5256 "resource/ASPPisParser.php"
        break;
      case 284: /* dataBlockValue ::= iri */
      case 285: /* dataBlockValue ::= rdfLiteral */
      case 286: /* dataBlockValue ::= numericLiteral */
      case 287: /* dataBlockValue ::= booleanLiteral */
#line 490 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 574; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5264 "resource/ASPPisParser.php"
        break;
      case 288: /* dataBlockValue ::= UNDEF */
#line 494 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 574; $yygotominor->query = 'UNDEF'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5269 "resource/ASPPisParser.php"
        break;
      case 289: /* minusGraphPattern ::= SMINUS groupGraphPattern */
#line 496 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 575; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'MINUS ' . PHP_EOL .  $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5274 "resource/ASPPisParser.php"
        break;
      case 290: /* groupOrUnionGraphPattern ::= groupGraphPattern groupOrUnionGraphPatternX */
#line 498 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 576; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -1]->minor->gGPssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5279 "resource/ASPPisParser.php"
        break;
      case 291: /* groupOrUnionGraphPattern ::= groupGraphPattern */
#line 499 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 576; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5284 "resource/ASPPisParser.php"
        break;
      case 292: /* groupOrUnionGraphPatternX ::= groupOrUnionGraphPatternX UNION groupGraphPattern */
#line 500 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 577; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + -2]->minor->gGPssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars;  $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . PHP_EOL . ' UNION ' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5289 "resource/ASPPisParser.php"
        break;
      case 293: /* groupOrUnionGraphPatternX ::= UNION groupGraphPattern */
#line 501 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 577; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->gGPssVars = $this->yystack[$this->yyidx + 0]->minor->gGPssVars;  $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'UNION ' . PHP_EOL . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5294 "resource/ASPPisParser.php"
        break;
      case 294: /* filter ::= FILTER LPARENTHESE expression RPARENTHESE */
#line 503 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 578; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'FILTER ( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5299 "resource/ASPPisParser.php"
        break;
      case 295: /* filter ::= FILTER builtInCall */
      case 296: /* filter ::= FILTER functionCall */
#line 504 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 578; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'FILTER ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5305 "resource/ASPPisParser.php"
        break;
      case 297: /* functionCall ::= iri argList */
#line 507 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 579; $yygotominor->hasFNC = true; $yygotominor->hasAGG = true; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5310 "resource/ASPPisParser.php"
        break;
      case 298: /* argList ::= LPARENTHESE DISTINCT expression argListX RPARENTHESE */
#line 509 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( DISTINCT' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5315 "resource/ASPPisParser.php"
        break;
      case 299: /* argList ::= LPARENTHESE expression argListX RPARENTHESE */
#line 510 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars +  $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5320 "resource/ASPPisParser.php"
        break;
      case 300: /* argList ::= LPARENTHESE DISTINCT expression RPARENTHESE */
#line 511 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 580; $yygotominor->query = '( DISTINCT' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5325 "resource/ASPPisParser.php"
        break;
      case 301: /* argList ::= LPARENTHESE expression RPARENTHESE */
#line 512 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 580; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5330 "resource/ASPPisParser.php"
        break;
      case 302: /* argList ::= NIL */
#line 513 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 580; $yygotominor->query = '( )' . PHP_EOL; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5335 "resource/ASPPisParser.php"
        break;
      case 303: /* argListX ::= argListX COMMA expression */
#line 514 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 581; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5340 "resource/ASPPisParser.php"
        break;
      case 304: /* argListX ::= COMMA expression */
#line 515 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 581; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5345 "resource/ASPPisParser.php"
        break;
      case 305: /* expressionList ::= LPARENTHESE expression argListX RPARENTHESE */
#line 517 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 582; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5350 "resource/ASPPisParser.php"
        break;
      case 306: /* expressionList ::= LPARENTHESE expression RPARENTHESE */
#line 518 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + -1]->minor; $yygotominor->type = 582; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5355 "resource/ASPPisParser.php"
        break;
      case 307: /* expressionList ::= NIL */
#line 519 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 582; $yygotominor->query = '( )' . PHP_EOL; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5360 "resource/ASPPisParser.php"
        break;
      case 308: /* triplesSameSubject ::= varOrTerm propertyListNotEmpty */
      case 309: /* triplesSameSubject ::= triplesNode propertyListNotEmpty */
#line 521 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 583; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5366 "resource/ASPPisParser.php"
        break;
      case 310: /* triplesSameSubject ::= triplesNode */
#line 523 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 583; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5371 "resource/ASPPisParser.php"
        break;
      case 311: /* propertyListNotEmpty ::= verb objectList propertyListNotEmptyX */
#line 525 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 584; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5376 "resource/ASPPisParser.php"
        break;
      case 312: /* propertyListNotEmpty ::= verb objectList */
#line 526 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 584; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5381 "resource/ASPPisParser.php"
        break;
      case 313: /* propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON verb objectList */
#line 527 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5386 "resource/ASPPisParser.php"
        break;
      case 314: /* propertyListNotEmptyX ::= propertyListNotEmptyX SEMICOLON */
#line 528 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query. ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5391 "resource/ASPPisParser.php"
        break;
      case 315: /* propertyListNotEmptyX ::= SEMICOLON verb objectList */
#line 529 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5396 "resource/ASPPisParser.php"
        break;
      case 316: /* propertyListNotEmptyX ::= SEMICOLON */
#line 530 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 585; $yygotominor->query = ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5401 "resource/ASPPisParser.php"
        break;
      case 317: /* verb ::= varOrIri */
#line 532 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 586; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5406 "resource/ASPPisParser.php"
        break;
      case 318: /* verb ::= A */
#line 533 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 586; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5411 "resource/ASPPisParser.php"
        break;
      case 319: /* objectList ::= graphNode objectListX */
#line 535 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 587; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5416 "resource/ASPPisParser.php"
        break;
      case 320: /* objectList ::= graphNode */
#line 536 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 587; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5421 "resource/ASPPisParser.php"
        break;
      case 321: /* objectListX ::= objectListX COMMA graphNode */
#line 537 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 588; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5426 "resource/ASPPisParser.php"
        break;
      case 322: /* objectListX ::= COMMA graphNode */
#line 538 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 588; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5431 "resource/ASPPisParser.php"
        break;
      case 323: /* triplesSameSubjectPath ::= varOrTerm propertyListPathNotEmpty */
      case 324: /* triplesSameSubjectPath ::= triplesNodePath propertyListPathNotEmpty */
#line 540 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 589; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5437 "resource/ASPPisParser.php"
        break;
      case 325: /* triplesSameSubjectPath ::= triplesNodePath */
#line 542 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 589; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5442 "resource/ASPPisParser.php"
        break;
      case 326: /* propertyListPathNotEmpty ::= pathAlternative objectListPath propertyListPathNotEmptyX */
#line 544 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5447 "resource/ASPPisParser.php"
        break;
      case 327: /* propertyListPathNotEmpty ::= var objectListPath propertyListPathNotEmptyX */
#line 545 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5452 "resource/ASPPisParser.php"
        break;
      case 328: /* propertyListPathNotEmpty ::= pathAlternative objectListPath */
#line 546 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5457 "resource/ASPPisParser.php"
        break;
      case 329: /* propertyListPathNotEmpty ::= var objectListPath */
#line 547 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 590; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5462 "resource/ASPPisParser.php"
        break;
      case 330: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON pathAlternative objectList */
#line 548 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5467 "resource/ASPPisParser.php"
        break;
      case 331: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON var objectList */
#line 549 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -3]->minor->query . '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5472 "resource/ASPPisParser.php"
        break;
      case 332: /* propertyListPathNotEmptyX ::= propertyListPathNotEmptyX SEMICOLON */
#line 550 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query. ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5477 "resource/ASPPisParser.php"
        break;
      case 333: /* propertyListPathNotEmptyX ::= SEMICOLON pathAlternative objectList */
#line 551 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5482 "resource/ASPPisParser.php"
        break;
      case 334: /* propertyListPathNotEmptyX ::= SEMICOLON var objectList */
#line 552 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '; ' . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5487 "resource/ASPPisParser.php"
        break;
      case 335: /* propertyListPathNotEmptyX ::= SEMICOLON */
#line 553 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 591; $yygotominor->query = ';'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5492 "resource/ASPPisParser.php"
        break;
      case 336: /* objectListPath ::= graphNodePath objectListPathX */
#line 555 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 592; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5497 "resource/ASPPisParser.php"
        break;
      case 337: /* objectListPath ::= graphNodePath */
#line 556 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 592; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5502 "resource/ASPPisParser.php"
        break;
      case 338: /* objectListPathX ::= objectListPathX COMMA graphNodePath */
#line 557 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 593; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5507 "resource/ASPPisParser.php"
        break;
      case 339: /* objectListPathX ::= COMMA graphNodePath */
#line 558 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 593; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = ', ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5512 "resource/ASPPisParser.php"
        break;
      case 340: /* pathAlternative ::= pathSequence pathAlternativeX */
#line 560 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 594; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5517 "resource/ASPPisParser.php"
        break;
      case 341: /* pathAlternative ::= pathSequence */
#line 561 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 594; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5522 "resource/ASPPisParser.php"
        break;
      case 342: /* pathAlternativeX ::= pathAlternativeX VBAR pathSequence */
#line 562 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 595; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5527 "resource/ASPPisParser.php"
        break;
      case 343: /* pathAlternativeX ::= VBAR pathSequence */
#line 563 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 595; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5532 "resource/ASPPisParser.php"
        break;
      case 344: /* pathSequence ::= pathEltOrInverse pathSequenceX */
#line 565 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 596; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5537 "resource/ASPPisParser.php"
        break;
      case 345: /* pathSequence ::= pathEltOrInverse */
#line 566 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 596; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5542 "resource/ASPPisParser.php"
        break;
      case 346: /* pathSequenceX ::= pathSequenceX SLASH pathEltOrInverse */
#line 567 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 597; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '/' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5547 "resource/ASPPisParser.php"
        break;
      case 347: /* pathSequenceX ::= SLASH pathEltOrInverse */
#line 568 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 597; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '/' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5552 "resource/ASPPisParser.php"
        break;
      case 348: /* pathElt ::= pathPrimary pathMod */
#line 570 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 598; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5557 "resource/ASPPisParser.php"
        break;
      case 349: /* pathElt ::= pathPrimary */
#line 571 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 598; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5562 "resource/ASPPisParser.php"
        break;
      case 350: /* pathEltOrInverse ::= HAT pathElt */
#line 573 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 599; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '^' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5567 "resource/ASPPisParser.php"
        break;
      case 351: /* pathEltOrInverse ::= pathElt */
#line 574 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 599; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5572 "resource/ASPPisParser.php"
        break;
      case 352: /* pathMod ::= STAR */
#line 576 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '*'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5577 "resource/ASPPisParser.php"
        break;
      case 353: /* pathMod ::= PLUS */
#line 577 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '+'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5582 "resource/ASPPisParser.php"
        break;
      case 354: /* pathMod ::= QUESTION */
#line 578 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 600; $yygotominor->query = '?'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5587 "resource/ASPPisParser.php"
        break;
      case 355: /* pathPrimary ::= LPARENTHESE pathAlternative RPARENTHESE */
#line 580 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5592 "resource/ASPPisParser.php"
        break;
      case 356: /* pathPrimary ::= EXCLAMATION pathNegatedPropertySet */
#line 581 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '!' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5597 "resource/ASPPisParser.php"
        break;
      case 357: /* pathPrimary ::= A */
#line 582 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5602 "resource/ASPPisParser.php"
        break;
      case 358: /* pathPrimary ::= iri */
#line 583 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 601; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5607 "resource/ASPPisParser.php"
        break;
      case 359: /* pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet pathNegatedPropertySetX RPARENTHESE */
#line 585 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5612 "resource/ASPPisParser.php"
        break;
      case 360: /* pathNegatedPropertySet ::= LPARENTHESE pathOneInPropertySet RPARENTHESE */
#line 586 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5617 "resource/ASPPisParser.php"
        break;
      case 361: /* pathNegatedPropertySet ::= LPARENTHESE RPARENTHESE */
#line 587 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5622 "resource/ASPPisParser.php"
        break;
      case 362: /* pathNegatedPropertySet ::= pathOneInPropertySet */
#line 588 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 602; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5627 "resource/ASPPisParser.php"
        break;
      case 363: /* pathNegatedPropertySetX ::= pathNegatedPropertySetX VBAR pathOneInPropertySet */
#line 589 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 603; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5632 "resource/ASPPisParser.php"
        break;
      case 364: /* pathNegatedPropertySetX ::= VBAR pathOneInPropertySet */
#line 590 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 603; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5637 "resource/ASPPisParser.php"
        break;
      case 365: /* pathOneInPropertySet ::= HAT iri */
#line 592 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = '^' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5642 "resource/ASPPisParser.php"
        break;
      case 366: /* pathOneInPropertySet ::= HAT A */
#line 593 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 604; ; $yygotominor->query = '^rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5647 "resource/ASPPisParser.php"
        break;
      case 367: /* pathOneInPropertySet ::= A */
#line 594 "resource/ASPPisParser.y"
{ if(!checkNS('rdf:type')){throw new Exception("Missing Prefix for rdf:type (a)");} $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = 'rdf:type'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5652 "resource/ASPPisParser.php"
        break;
      case 368: /* pathOneInPropertySet ::= iri */
#line 595 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 604; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5657 "resource/ASPPisParser.php"
        break;
      case 369: /* triplesNode ::= collection */
      case 370: /* triplesNode ::= blankNodePropertyList */
#line 597 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 605; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5663 "resource/ASPPisParser.php"
        break;
      case 371: /* blankNodePropertyList ::= LBRACKET propertyListNotEmpty RBRACKET */
#line 600 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 606; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '[ ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ]'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5668 "resource/ASPPisParser.php"
        break;
      case 372: /* triplesNodePath ::= collectionPath */
      case 373: /* triplesNodePath ::= blankNodePropertyListPath */
#line 602 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 607; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5674 "resource/ASPPisParser.php"
        break;
      case 374: /* blankNodePropertyListPath ::= LBRACKET propertyListPathNotEmpty RBRACKET */
#line 605 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 608; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '[ ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ]'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5679 "resource/ASPPisParser.php"
        break;
      case 375: /* collection ::= LPARENTHESE graphNodeX RPARENTHESE */
#line 607 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 609; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5684 "resource/ASPPisParser.php"
        break;
      case 376: /* graphNodeX ::= graphNodeX graphNode */
#line 608 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 610; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5689 "resource/ASPPisParser.php"
        break;
      case 377: /* graphNodeX ::= graphNode */
#line 609 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 610; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5694 "resource/ASPPisParser.php"
        break;
      case 378: /* collectionPath ::= LPARENTHESE graphNodePathX RPARENTHESE */
#line 611 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 611; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5699 "resource/ASPPisParser.php"
        break;
      case 379: /* graphNodePathX ::= graphNodePathX graphNodePath */
#line 612 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 612; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5704 "resource/ASPPisParser.php"
        break;
      case 380: /* graphNodePathX ::= graphNodePath */
#line 613 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 612; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5709 "resource/ASPPisParser.php"
        break;
      case 381: /* graphNode ::= varOrTerm */
      case 382: /* graphNode ::= triplesNode */
#line 615 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 613; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5715 "resource/ASPPisParser.php"
        break;
      case 383: /* graphNodePath ::= varOrTerm */
      case 384: /* graphNodePath ::= triplesNodePath */
#line 618 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 614; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5721 "resource/ASPPisParser.php"
        break;
      case 385: /* varOrTerm ::= var */
#line 621 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 615; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5726 "resource/ASPPisParser.php"
        break;
      case 386: /* varOrTerm ::= graphTerm */
#line 622 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 615; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5731 "resource/ASPPisParser.php"
        break;
      case 387: /* varOrIri ::= var */
#line 624 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 616; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5736 "resource/ASPPisParser.php"
        break;
      case 388: /* varOrIri ::= iri */
#line 625 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 616; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5741 "resource/ASPPisParser.php"
        break;
      case 389: /* var ::= VAR1 */
      case 390: /* var ::= VAR2 */
#line 627 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 617; $yygotominor->vars = array(); $yygotominor->vars[$this->yystack[$this->yyidx + 0]->minor->value] = 1; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5747 "resource/ASPPisParser.php"
        break;
      case 391: /* graphTerm ::= iri */
      case 392: /* graphTerm ::= rdfLiteral */
      case 393: /* graphTerm ::= numericLiteral */
      case 394: /* graphTerm ::= booleanLiteral */
#line 630 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5755 "resource/ASPPisParser.php"
        break;
      case 395: /* graphTerm ::= blankNode */
#line 634 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5760 "resource/ASPPisParser.php"
        break;
      case 396: /* graphTerm ::= NIL */
#line 635 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 618; $yygotominor->query = '( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5765 "resource/ASPPisParser.php"
        break;
      case 397: /* expression ::= conditionalAndExpression conditionalOrExpressionX */
#line 637 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 619; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5770 "resource/ASPPisParser.php"
        break;
      case 398: /* expression ::= conditionalAndExpression */
#line 638 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 619; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor);$yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5775 "resource/ASPPisParser.php"
        break;
      case 399: /* conditionalOrExpressionX ::= conditionalOrExpressionX OR conditionalAndExpression */
#line 639 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 620; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' || ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5780 "resource/ASPPisParser.php"
        break;
      case 400: /* conditionalOrExpressionX ::= OR conditionalAndExpression */
#line 640 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 620; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '|| ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5785 "resource/ASPPisParser.php"
        break;
      case 401: /* conditionalAndExpression ::= relationalExpression conditionalAndExpressionX */
#line 642 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 621; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5790 "resource/ASPPisParser.php"
        break;
      case 402: /* conditionalAndExpression ::= relationalExpression */
#line 643 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 621; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5795 "resource/ASPPisParser.php"
        break;
      case 403: /* conditionalAndExpressionX ::= conditionalAndExpressionX AND relationalExpression */
#line 644 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 622; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' && ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5800 "resource/ASPPisParser.php"
        break;
      case 404: /* conditionalAndExpressionX ::= AND relationalExpression */
#line 645 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 622; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '&& ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5805 "resource/ASPPisParser.php"
        break;
      case 405: /* relationalExpression ::= additiveExpression relationalExpressionX */
#line 647 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 623; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5810 "resource/ASPPisParser.php"
        break;
      case 406: /* relationalExpression ::= additiveExpression */
#line 648 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 623; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5815 "resource/ASPPisParser.php"
        break;
      case 407: /* relationalExpressionX ::= EQUAL additiveExpression */
#line 649 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5820 "resource/ASPPisParser.php"
        break;
      case 408: /* relationalExpressionX ::= NEQUAL additiveExpression */
#line 650 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '!= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5825 "resource/ASPPisParser.php"
        break;
      case 409: /* relationalExpressionX ::= SMALLERTHEN additiveExpression */
#line 651 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '< ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5830 "resource/ASPPisParser.php"
        break;
      case 410: /* relationalExpressionX ::= GREATERTHEN additiveExpression */
#line 652 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '> ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5835 "resource/ASPPisParser.php"
        break;
      case 411: /* relationalExpressionX ::= SMALLERTHENQ additiveExpression */
#line 653 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '<= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5840 "resource/ASPPisParser.php"
        break;
      case 412: /* relationalExpressionX ::= GREATERTHENQ additiveExpression */
#line 654 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '>= ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5845 "resource/ASPPisParser.php"
        break;
      case 413: /* relationalExpressionX ::= IN expressionList */
#line 655 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'IN' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5850 "resource/ASPPisParser.php"
        break;
      case 414: /* relationalExpressionX ::= NOT IN expressionList */
#line 656 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 624; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'NOT IN' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5855 "resource/ASPPisParser.php"
        break;
      case 415: /* additiveExpression ::= multiplicativeExpression additiveExpressionX */
#line 658 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 625; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5860 "resource/ASPPisParser.php"
        break;
      case 416: /* additiveExpression ::= multiplicativeExpression */
#line 659 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 625; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5865 "resource/ASPPisParser.php"
        break;
      case 417: /* additiveExpressionX ::= additiveExpressionX numericLiteralPositive additiveExpressionY */
      case 418: /* additiveExpressionX ::= additiveExpressionX numericLiteralNegative additiveExpressionY */
#line 660 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' ' . $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5871 "resource/ASPPisParser.php"
        break;
      case 419: /* additiveExpressionX ::= additiveExpressionX numericLiteralPositive */
      case 420: /* additiveExpressionX ::= additiveExpressionX numericLiteralNegative */
#line 662 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5877 "resource/ASPPisParser.php"
        break;
      case 421: /* additiveExpressionX ::= additiveExpressionX PLUS multiplicativeExpression */
#line 664 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' + ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5882 "resource/ASPPisParser.php"
        break;
      case 422: /* additiveExpressionX ::= additiveExpressionX MINUS multiplicativeExpression */
#line 665 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' - ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5887 "resource/ASPPisParser.php"
        break;
      case 423: /* additiveExpressionX ::= numericLiteralPositive additiveExpressionY */
      case 424: /* additiveExpressionX ::= numericLiteralNegative additiveExpressionY */
#line 666 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5893 "resource/ASPPisParser.php"
        break;
      case 425: /* additiveExpressionX ::= numericLiteralPositive */
      case 426: /* additiveExpressionX ::= numericLiteralNegative */
#line 668 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5899 "resource/ASPPisParser.php"
        break;
      case 427: /* additiveExpressionX ::= PLUS multiplicativeExpression */
#line 670 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '+ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5904 "resource/ASPPisParser.php"
        break;
      case 428: /* additiveExpressionX ::= MINUS multiplicativeExpression */
#line 671 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 626; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '- ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5909 "resource/ASPPisParser.php"
        break;
      case 429: /* additiveExpressionY ::= additiveExpressionY STAR unaryExpression */
#line 672 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' * ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5914 "resource/ASPPisParser.php"
        break;
      case 430: /* additiveExpressionY ::= additiveExpressionY SLASH unaryExpression */
#line 673 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + -2]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -2]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -2]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -2]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . ' / ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5919 "resource/ASPPisParser.php"
        break;
      case 431: /* additiveExpressionY ::= STAR unaryExpression */
#line 674 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '* ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5924 "resource/ASPPisParser.php"
        break;
      case 432: /* additiveExpressionY ::= SLASH unaryExpression */
#line 675 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 627; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '/ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5929 "resource/ASPPisParser.php"
        break;
      case 433: /* multiplicativeExpression ::= unaryExpression additiveExpressionY */
#line 677 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 628; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars + $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes + $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . ' ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5934 "resource/ASPPisParser.php"
        break;
      case 434: /* multiplicativeExpression ::= unaryExpression */
#line 678 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 628; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5939 "resource/ASPPisParser.php"
        break;
      case 435: /* unaryExpression ::= EXCLAMATION primaryExpression */
#line 680 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '! ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5944 "resource/ASPPisParser.php"
        break;
      case 436: /* unaryExpression ::= PLUS primaryExpression */
#line 681 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '+ ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5949 "resource/ASPPisParser.php"
        break;
      case 437: /* unaryExpression ::= MINUS primaryExpression */
#line 682 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = '- ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5954 "resource/ASPPisParser.php"
        break;
      case 438: /* unaryExpression ::= primaryExpression */
#line 683 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 629; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5959 "resource/ASPPisParser.php"
        break;
      case 439: /* primaryExpression ::= LPARENTHESE expression RPARENTHESE */
#line 685 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + -1]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = '( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 5964 "resource/ASPPisParser.php"
        break;
      case 440: /* primaryExpression ::= builtInCall */
#line 686 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5969 "resource/ASPPisParser.php"
        break;
      case 441: /* primaryExpression ::= iri */
      case 443: /* primaryExpression ::= rdfLiteral */
      case 444: /* primaryExpression ::= numericLiteral */
      case 445: /* primaryExpression ::= booleanLiteral */
#line 687 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5977 "resource/ASPPisParser.php"
        break;
      case 442: /* primaryExpression ::= functionCall */
#line 688 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->hasFNC = true; $yygotominor->hasAGG = true; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5982 "resource/ASPPisParser.php"
        break;
      case 446: /* primaryExpression ::= var */
#line 692 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 630; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5987 "resource/ASPPisParser.php"
        break;
      case 447: /* builtInCall ::= aggregate */
      case 448: /* builtInCall ::= regexExpression */
      case 465: /* builtInCall ::= subStringExpression */
      case 467: /* builtInCall ::= strReplaceExpression */
#line 694 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 5995 "resource/ASPPisParser.php"
        break;
      case 449: /* builtInCall ::= existsFunc */
      case 450: /* builtInCall ::= notExistsFunc */
#line 696 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6001 "resource/ASPPisParser.php"
        break;
      case 451: /* builtInCall ::= STR LPARENTHESE expression RPARENTHESE */
      case 452: /* builtInCall ::= LANG LPARENTHESE expression RPARENTHESE */
#line 698 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STR( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6007 "resource/ASPPisParser.php"
        break;
      case 453: /* builtInCall ::= LANGMATCHES LPARENTHESE expression COMMA expression RPARENTHESE */
#line 700 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'LANGMATCHES( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6012 "resource/ASPPisParser.php"
        break;
      case 454: /* builtInCall ::= DATATYPE LPARENTHESE expression RPARENTHESE */
#line 701 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DATATYPE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6017 "resource/ASPPisParser.php"
        break;
      case 455: /* builtInCall ::= BOUND LPARENTHESE var RPARENTHESE */
#line 702 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->query = 'BOUND( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6022 "resource/ASPPisParser.php"
        break;
      case 456: /* builtInCall ::= URI LPARENTHESE expression RPARENTHESE */
#line 703 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'URI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6027 "resource/ASPPisParser.php"
        break;
      case 457: /* builtInCall ::= BNODE LPARENTHESE expression RPARENTHESE */
#line 704 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->hasBN = true; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes[$this->yystack[$this->yyidx + -1]->minor->query] = 1; $yygotominor->bNodes += $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'BNODE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6032 "resource/ASPPisParser.php"
        break;
      case 458: /* builtInCall ::= BNODE NIL */
#line 705 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->hasBN = true; $yygotominor->query = 'BNODE( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6037 "resource/ASPPisParser.php"
        break;
      case 459: /* builtInCall ::= RAND NIL */
#line 706 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'RAND( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6042 "resource/ASPPisParser.php"
        break;
      case 460: /* builtInCall ::= ABS LPARENTHESE expression RPARENTHESE */
#line 707 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ABS(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6047 "resource/ASPPisParser.php"
        break;
      case 461: /* builtInCall ::= CEIL LPARENTHESE expression RPARENTHESE */
#line 708 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars;$yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CEIL(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6052 "resource/ASPPisParser.php"
        break;
      case 462: /* builtInCall ::= FLOOR LPARENTHESE expression RPARENTHESE */
#line 709 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'FLOOR(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6057 "resource/ASPPisParser.php"
        break;
      case 463: /* builtInCall ::= ROUND LPARENTHESE expression RPARENTHESE */
#line 710 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ROUND(' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6062 "resource/ASPPisParser.php"
        break;
      case 464: /* builtInCall ::= CONCAT expressionList */
#line 711 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars;$yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'CONCAT' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6067 "resource/ASPPisParser.php"
        break;
      case 466: /* builtInCall ::= STRLEN LPARENTHESE expression RPARENTHESE */
#line 713 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRLEN( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6072 "resource/ASPPisParser.php"
        break;
      case 468: /* builtInCall ::= UCASE LPARENTHESE expression RPARENTHESE */
#line 715 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'UCASE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6077 "resource/ASPPisParser.php"
        break;
      case 469: /* builtInCall ::= LCASE LPARENTHESE expression RPARENTHESE */
#line 716 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query =  'LCASE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6082 "resource/ASPPisParser.php"
        break;
      case 470: /* builtInCall ::= ENCODE_FOR_URI LPARENTHESE expression RPARENTHESE */
#line 717 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ENCODE_FOR_URI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6087 "resource/ASPPisParser.php"
        break;
      case 471: /* builtInCall ::= CONTAINS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 718 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'CONTAINS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6092 "resource/ASPPisParser.php"
        break;
      case 472: /* builtInCall ::= STRSTARTS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 719 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRSTARTS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6097 "resource/ASPPisParser.php"
        break;
      case 473: /* builtInCall ::= STRENDS LPARENTHESE expression COMMA expression RPARENTHESE */
#line 720 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRENDS( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6102 "resource/ASPPisParser.php"
        break;
      case 474: /* builtInCall ::= STBEFORE LPARENTHESE expression COMMA expression RPARENTHESE */
#line 721 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STBEFORE( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6107 "resource/ASPPisParser.php"
        break;
      case 475: /* builtInCall ::= STRAFTER LPARENTHESE expression COMMA expression RPARENTHESE */
#line 722 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRAFTER( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6112 "resource/ASPPisParser.php"
        break;
      case 476: /* builtInCall ::= YEAR LPARENTHESE expression RPARENTHESE */
#line 723 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'YEAR( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6117 "resource/ASPPisParser.php"
        break;
      case 477: /* builtInCall ::= MONTH LPARENTHESE expression RPARENTHESE */
#line 724 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MONTH( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6122 "resource/ASPPisParser.php"
        break;
      case 478: /* builtInCall ::= DAY LPARENTHESE expression RPARENTHESE */
#line 725 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'DAY( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6127 "resource/ASPPisParser.php"
        break;
      case 479: /* builtInCall ::= HOURS LPARENTHESE expression RPARENTHESE */
#line 726 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'HOURS( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6132 "resource/ASPPisParser.php"
        break;
      case 480: /* builtInCall ::= MINUTES LPARENTHESE expression RPARENTHESE */
#line 727 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MINUTES( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6137 "resource/ASPPisParser.php"
        break;
      case 481: /* builtInCall ::= SECONDS LPARENTHESE expression RPARENTHESE */
#line 728 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SECONDS( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6142 "resource/ASPPisParser.php"
        break;
      case 482: /* builtInCall ::= TIMEZONE LPARENTHESE expression RPARENTHESE */
#line 729 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'TIMEZONE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6147 "resource/ASPPisParser.php"
        break;
      case 483: /* builtInCall ::= TZ LPARENTHESE expression RPARENTHESE */
#line 730 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'TZ( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6152 "resource/ASPPisParser.php"
        break;
      case 484: /* builtInCall ::= NOW NIL */
#line 731 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'NOW( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6157 "resource/ASPPisParser.php"
        break;
      case 485: /* builtInCall ::= UUID NIL */
#line 732 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'UUID( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6162 "resource/ASPPisParser.php"
        break;
      case 486: /* builtInCall ::= STRUUID NIL */
#line 733 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->query = 'STRUUID( )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6167 "resource/ASPPisParser.php"
        break;
      case 487: /* builtInCall ::= MD5 LPARENTHESE expression RPARENTHESE */
#line 734 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'MD5( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6172 "resource/ASPPisParser.php"
        break;
      case 488: /* builtInCall ::= SHA1 LPARENTHESE expression RPARENTHESE */
#line 735 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA1( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6177 "resource/ASPPisParser.php"
        break;
      case 489: /* builtInCall ::= SHA256 LPARENTHESE expression RPARENTHESE */
#line 736 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA256( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6182 "resource/ASPPisParser.php"
        break;
      case 490: /* builtInCall ::= SHA384 LPARENTHESE expression RPARENTHESE */
#line 737 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA384( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6187 "resource/ASPPisParser.php"
        break;
      case 491: /* builtInCall ::= SHA512 LPARENTHESE expression RPARENTHESE */
#line 738 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SHA512( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6192 "resource/ASPPisParser.php"
        break;
      case 492: /* builtInCall ::= COALESCE expressionList */
#line 739 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'COALESCE' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6197 "resource/ASPPisParser.php"
        break;
      case 493: /* builtInCall ::= IF LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 740 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'IF( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query .  ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6202 "resource/ASPPisParser.php"
        break;
      case 494: /* builtInCall ::= STRLANG LPARENTHESE expression COMMA expression RPARENTHESE */
#line 741 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRLANG( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6207 "resource/ASPPisParser.php"
        break;
      case 495: /* builtInCall ::= STRDT LPARENTHESE expression COMMA expression RPARENTHESE */
#line 742 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'STRDT( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6212 "resource/ASPPisParser.php"
        break;
      case 496: /* builtInCall ::= SAMETERM LPARENTHESE expression COMMA expression RPARENTHESE */
#line 743 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SAMETERM( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query .  ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6217 "resource/ASPPisParser.php"
        break;
      case 497: /* builtInCall ::= ISIRI LPARENTHESE expression RPARENTHESE */
#line 744 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISIRI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6222 "resource/ASPPisParser.php"
        break;
      case 498: /* builtInCall ::= ISURI LPARENTHESE expression RPARENTHESE */
#line 745 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISURI( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6227 "resource/ASPPisParser.php"
        break;
      case 499: /* builtInCall ::= ISBLANK LPARENTHESE expression RPARENTHESE */
#line 746 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISBLANK( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6232 "resource/ASPPisParser.php"
        break;
      case 500: /* builtInCall ::= ISLITERAL LPARENTHESE expression RPARENTHESE */
#line 747 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISLITERAL( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6237 "resource/ASPPisParser.php"
        break;
      case 501: /* builtInCall ::= ISNUMERIC LPARENTHESE expression RPARENTHESE */
#line 748 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 631; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'ISNUMERIC( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6242 "resource/ASPPisParser.php"
        break;
      case 502: /* regexExpression ::= REGEX LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 750 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 632; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REGEX( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6247 "resource/ASPPisParser.php"
        break;
      case 503: /* regexExpression ::= REGEX LPARENTHESE expression COMMA expression RPARENTHESE */
#line 751 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 632; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REGEX( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6252 "resource/ASPPisParser.php"
        break;
      case 504: /* subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 753 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 633; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SUBSTR( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6257 "resource/ASPPisParser.php"
        break;
      case 505: /* subStringExpression ::= SUBSTR LPARENTHESE expression COMMA expression RPARENTHESE */
#line 754 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 633; $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'SUBSTR( ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6262 "resource/ASPPisParser.php"
        break;
      case 506: /* strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression COMMA expression RPARENTHESE */
#line 756 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 634; $yygotominor->copyBools($this->yystack[$this->yyidx + -7]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -7]->minor->vars + $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -7]->minor->bNodes + $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REPLACE( ' . $this->yystack[$this->yyidx + -7]->minor->query . ', ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -9]->minor, $this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6267 "resource/ASPPisParser.php"
        break;
      case 507: /* strReplaceExpression ::= REPLACE LPARENTHESE expression COMMA expression COMMA expression RPARENTHESE */
#line 757 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 634; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -3]->minor); $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars + $this->yystack[$this->yyidx + -3]->minor->vars + $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes + $this->yystack[$this->yyidx + -3]->minor->bNodes + $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->query = 'REPLACE( ' . $this->yystack[$this->yyidx + -5]->minor->query . ', ' . $this->yystack[$this->yyidx + -3]->minor->query . ', ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6272 "resource/ASPPisParser.php"
        break;
      case 508: /* existsFunc ::= EXISTS groupGraphPattern */
#line 759 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 635; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'EXISTS ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6277 "resource/ASPPisParser.php"
        break;
      case 509: /* notExistsFunc ::= NOT EXISTS groupGraphPattern */
#line 761 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 636; $yygotominor->copyBools($this->yystack[$this->yyidx + 0]->minor); $yygotominor->ssVars = $this->yystack[$this->yyidx + 0]->minor->ssVars + $this->yystack[$this->yyidx + 0]->minor->gGPssVars; $yygotominor->vars = $this->yystack[$this->yyidx + 0]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + 0]->minor->bNodes; $yygotominor->query = 'NOT EXISTS ' . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6282 "resource/ASPPisParser.php"
        break;
      case 510: /* aggregate ::= COUNT LPARENTHESE DISTINCT STAR RPARENTHESE */
#line 763 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( DISTINCT * )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6287 "resource/ASPPisParser.php"
        break;
      case 511: /* aggregate ::= COUNT LPARENTHESE DISTINCT expression RPARENTHESE */
#line 764 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6292 "resource/ASPPisParser.php"
        break;
      case 512: /* aggregate ::= COUNT LPARENTHESE STAR RPARENTHESE */
#line 765 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( * )'; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6297 "resource/ASPPisParser.php"
        break;
      case 513: /* aggregate ::= COUNT LPARENTHESE expression RPARENTHESE */
#line 766 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'COUNT( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6302 "resource/ASPPisParser.php"
        break;
      case 514: /* aggregate ::= SUM LPARENTHESE DISTINCT expression RPARENTHESE */
#line 767 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SUM( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6307 "resource/ASPPisParser.php"
        break;
      case 515: /* aggregate ::= MIN LPARENTHESE DISTINCT expression RPARENTHESE */
#line 768 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MIN( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6312 "resource/ASPPisParser.php"
        break;
      case 516: /* aggregate ::= MAX LPARENTHESE DISTINCT expression RPARENTHESE */
#line 769 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MAX( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6317 "resource/ASPPisParser.php"
        break;
      case 517: /* aggregate ::= AVG LPARENTHESE DISTINCT expression RPARENTHESE */
#line 770 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'AVG( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6322 "resource/ASPPisParser.php"
        break;
      case 518: /* aggregate ::= SAMPLE LPARENTHESE DISTINCT expression RPARENTHESE */
#line 771 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SAMPLE( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6327 "resource/ASPPisParser.php"
        break;
      case 519: /* aggregate ::= SUM LPARENTHESE expression RPARENTHESE */
#line 772 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SUM( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6332 "resource/ASPPisParser.php"
        break;
      case 520: /* aggregate ::= MIN LPARENTHESE expression RPARENTHESE */
#line 773 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MIN( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6337 "resource/ASPPisParser.php"
        break;
      case 521: /* aggregate ::= MAX LPARENTHESE expression RPARENTHESE */
#line 774 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'MAX( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6342 "resource/ASPPisParser.php"
        break;
      case 522: /* aggregate ::= AVG LPARENTHESE expression RPARENTHESE */
#line 775 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'AVG( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6347 "resource/ASPPisParser.php"
        break;
      case 523: /* aggregate ::= SAMPLE LPARENTHESE expression RPARENTHESE */
#line 776 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'SAMPLE( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6352 "resource/ASPPisParser.php"
        break;
      case 524: /* aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE */
#line 777 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( DISTINCT ' . $this->yystack[$this->yyidx + -5]->minor->query . ' ; SEPARATOR = ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -8]->minor, $this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6357 "resource/ASPPisParser.php"
        break;
      case 525: /* aggregate ::= GROUP_CONCAT LPARENTHESE DISTINCT expression RPARENTHESE */
#line 778 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( DISTINCT ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6362 "resource/ASPPisParser.php"
        break;
      case 526: /* aggregate ::= GROUP_CONCAT LPARENTHESE expression SEMICOLON SEPARATOR EQUAL string RPARENTHESE */
#line 779 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( ' . $this->yystack[$this->yyidx + -5]->minor->query . ' ; SEPARATOR = ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -5]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -5]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -5]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -7]->minor, $this->yystack[$this->yyidx + -6]->minor, $this->yystack[$this->yyidx + -5]->minor, $this->yystack[$this->yyidx + -4]->minor, $this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6367 "resource/ASPPisParser.php"
        break;
      case 527: /* aggregate ::= GROUP_CONCAT LPARENTHESE expression RPARENTHESE */
#line 780 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 637; $yygotominor->hasAGG = true; $yygotominor->query = 'GROUP_CONCAT( ' . $this->yystack[$this->yyidx + -1]->minor->query . ' )'; $yygotominor->copyBools($this->yystack[$this->yyidx + -1]->minor); $yygotominor->vars = $this->yystack[$this->yyidx + -1]->minor->vars; $yygotominor->bNodes = $this->yystack[$this->yyidx + -1]->minor->bNodes; $yygotominor->childs = array($this->yystack[$this->yyidx + -3]->minor, $this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6372 "resource/ASPPisParser.php"
        break;
      case 528: /* rdfLiteral ::= string LANGTAG */
#line 782 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + -1]->minor->query . $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6377 "resource/ASPPisParser.php"
        break;
      case 529: /* rdfLiteral ::= string DHAT iri */
#line 783 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + -2]->minor->query . $this->yystack[$this->yyidx + -1]->minor->value . $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + -2]->minor, $this->yystack[$this->yyidx + -1]->minor, $this->yystack[$this->yyidx + 0]->minor); }
#line 6382 "resource/ASPPisParser.php"
        break;
      case 530: /* rdfLiteral ::= string */
#line 784 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 638; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6387 "resource/ASPPisParser.php"
        break;
      case 531: /* numericLiteral ::= numericLiteralUnsigned */
      case 532: /* numericLiteral ::= numericLiteralPositive */
      case 533: /* numericLiteral ::= numericLiteralNegative */
#line 786 "resource/ASPPisParser.y"
{ $yygotominor = $this->yystack[$this->yyidx + 0]->minor; $yygotominor->type = 639; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6394 "resource/ASPPisParser.php"
        break;
      case 534: /* numericLiteralUnsigned ::= INTEGER */
      case 535: /* numericLiteralUnsigned ::= DECIMAL */
      case 536: /* numericLiteralUnsigned ::= DOUBLE */
#line 790 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 640; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6401 "resource/ASPPisParser.php"
        break;
      case 537: /* numericLiteralPositive ::= INTEGER_POSITIVE */
      case 538: /* numericLiteralPositive ::= DECIMAL_POSITIVE */
      case 539: /* numericLiteralPositive ::= DOUBLE_POSITIVE */
#line 794 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 641; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6408 "resource/ASPPisParser.php"
        break;
      case 540: /* numericLiteralNegative ::= INTEGER_NEGATIVE */
      case 541: /* numericLiteralNegative ::= DECIMAL_NEGATIVE */
      case 542: /* numericLiteralNegative ::= DOUBLE_NEGATIVE */
#line 798 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 642; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value; $yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6415 "resource/ASPPisParser.php"
        break;
      case 543: /* booleanLiteral ::= TRUE */
#line 802 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 643; $yygotominor->query = "true";$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6420 "resource/ASPPisParser.php"
        break;
      case 544: /* booleanLiteral ::= FALSE */
#line 803 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 643; $yygotominor->query = "false";$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6425 "resource/ASPPisParser.php"
        break;
      case 545: /* string ::= STRING_LITERAL1 */
      case 546: /* string ::= STRING_LITERAL2 */
      case 547: /* string ::= STRING_LITERAL_LONG1 */
      case 548: /* string ::= STRING_LITERAL_LONG2 */
#line 805 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 644; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6433 "resource/ASPPisParser.php"
        break;
      case 549: /* iri ::= IRIREF */
#line 810 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 645; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6438 "resource/ASPPisParser.php"
        break;
      case 550: /* iri ::= prefixedName */
#line 811 "resource/ASPPisParser.y"
{ $yygotominor = new NTToken(); $yygotominor->type = 645; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->query;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6443 "resource/ASPPisParser.php"
        break;
      case 551: /* prefixedName ::= PNAME_LN */
      case 552: /* prefixedName ::= PNAME_NS */
#line 813 "resource/ASPPisParser.y"
{if(!$this->checkNS($this->yystack[$this->yyidx + 0]->minor->value)){throw new Exception("Missing Prefix for " . $this->yystack[$this->yyidx + 0]->minor->value);} $yygotominor = new NTToken(); $yygotominor->type = 646; $yygotominor->query = $this->yystack[$this->yyidx + 0]->minor->value;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6449 "resource/ASPPisParser.php"
        break;
      case 553: /* blankNode ::= BLANK_NODE_LABEL */
#line 816 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 647; $yygotominor->hasBN = true; $yygotominor->bNodes[$this->yystack[$this->yyidx + 0]->minor->value] = 1;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6454 "resource/ASPPisParser.php"
        break;
      case 554: /* blankNode ::= ANON */
#line 817 "resource/ASPPisParser.y"
{$yygotominor = new NTToken(); $yygotominor->type = 647; $yygotominor->hasBN = true;$yygotominor->childs = array($this->yystack[$this->yyidx + 0]->minor); }
#line 6459 "resource/ASPPisParser.php"
        break;
      default:
        break;
    }

    $yygoto = self::$yyRuleInfo[2 * $yyruleno];
    $yysize = self::$yyRuleInfo[(2 * $yyruleno) + 1];

    $state_for_reduce = $this->yystack[$this->yyidx - $yysize]->stateno;

    $this->yyidx -= $yysize;
    $yyact = $this->yy_find_reduce_action($state_for_reduce,$yygoto);

    if ($yyact < self::YYNSTATE)
      $this->yy_shift($yyact, $yygoto, $yygotominor);
    else if ($yyact == self::YYNSTATE + self::YYNRULE + 1)
      $this->yy_accept();
  }

  private function yy_parse_failed()
  {
    if ($this->yyTraceFILE)
      fprintf($this->yyTraceFILE, "%sFail!\n", $this->yyTracePrompt);

    while ($this->yyidx >= 0) 
      $this->yy_pop_parser_stack();

#line 140 "resource/ASPPisParser.y"

    throw new Exception('Couldnt finish Parsing (Unkown Problem)');
#line 6490 "resource/ASPPisParser.php"
  }

  private function yy_syntax_error($yymajor, $yyminor = null)
  {
    $message = 'Unexpected ' . $this->yy_token_name($yymajor);
    if (null !== $yyminor) {
      $message .= '(' . $yyminor->value . ')';
    }
  }

  private function yy_accept()
  {
    if ($this->yyTraceFILE)
      fprintf($this->yyTraceFILE, "%sAccept!\n", $this->yyTracePrompt);

    while ($this->yyidx >= 0) 
      $this->yy_pop_parser_stack();
#line 136 "resource/ASPPisParser.y"


#line 6511 "resource/ASPPisParser.php"
  }

  public function doParse($yymajor, $yyminor = null)
  {
    $yyact = 0; /* The parser action. */
    $yyendofinput = 0; /* True if we are at the end of input */
    $yyerrorhit = 0; /* True if yymajor has invoked an error */

    /* (re)initialize the parser, if necessary */
    if ($this->yyidx < 0) 
    {
      $this->yyidx = 0;
      $this->yyerrcnt = - 1;
      $ent = new stdClass;
      $ent->stateno = 0;
      $ent->major = 0;
      $ent->minor = null;
      $this->yystack = array(0 => $ent);
      $this->YY_NO_ACTION = self::YYNSTATE + self::YYNRULE + 2;
      $this->YY_ACCEPT_ACTION = self::YYNSTATE + self::YYNRULE + 1;
      $this->YY_ERROR_ACTION = self::YYNSTATE + self::YYNRULE;
    }

    $yyendofinput = ($yymajor == 0);

    if ($this->yyTraceFILE) 
      fprintf($this->yyTraceFILE, "%sInput %s\n", $this->yyTracePrompt, self::$yyTokenName[$yymajor]);

    do 
    {
      $yyact = $this->yy_find_shift_action($yymajor);

      if ($yyact < self::YYNSTATE) 
      {
        $this->yy_shift($yyact, $yymajor, $yyminor);
        $this->yyerrcnt--;

        if ($yyendofinput && $this->yyidx >= 0) 
          $yymajor = 0;
        else
          $yymajor = self::YYNOCODE;
      } 
      else if ($yyact < self::YYNSTATE + self::YYNRULE) 
      {
        $this->yy_reduce($yyact - self::YYNSTATE);
      }
      else if ($yyact == $this->YY_ERROR_ACTION) 
      {
        if ($this->yyTraceFILE) 
          fprintf($this->yyTraceFILE, "%sSyntax Error!\n", $this->yyTracePrompt);

        if (defined('self::YYERRORSYMBOL')) 
        {
          if ($this->yyerrcnt < 0) 
            $this->yy_syntax_error($yymajor, $yyminor);

          $yymx = $this->yystack[$this->yyidx]->major;

          if ($yymx == self::YYERRORSYMBOL || $yyerrorhit) 
          {
            if ($this->yyTraceFILE) 
              fprintf($this->yyTraceFILE, "%sDiscard input token %s\n", $this->yyTracePrompt, self::$yyTokenName[$yymajor]);

            $this->yy_destructor($yymajor, $yyminor);
            $yymajor = self::YYNOCODE;
          }
          else
          {
            while ($this->yyidx >= 0 && $yymx != self::YYERRORSYMBOL && ($yyact = $this->yy_find_reduce_action($this->yystack[$this->yyidx]->stateno, self::YYERRORSYMBOL)) >= self::YYNSTATE) 
              $this->yy_pop_parser_stack();

            if ($this->yyidx < 0 || $yymajor == 0) 
            {
              $this->yy_destructor($yymajor, $yyminor);
              $this->yy_parse_failed();
              $yymajor = self::YYNOCODE;
            }
            else if ($yymx != self::YYERRORSYMBOL) 
            {
              $this->yy_shift($yyact, self::YYERRORSYMBOL, 0);
            }
          }

          $this->yyerrcnt = 3;
          $yyerrorhit = 1;
        }
        else
        { 
          if ($this->yyerrcnt <= 0) 
            $this->yy_syntax_error($yymajor, $yyminor);

          $this->yyerrcnt = 3;
          $this->yy_destructor($yymajor, $yyminor);

          if ($yyendofinput) 
            $this->yy_parse_failed();

          $yymajor = self::YYNOCODE;
        }
      }
      else
      {
        $this->yy_accept();
        $yymajor = self::YYNOCODE;
      }
    }
    while ($yymajor != self::YYNOCODE && $this->yyidx >= 0);
  }
}

?>
